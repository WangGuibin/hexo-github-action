<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019年CoderWGB游记</title>
    <url>/hexo-github-action/2019/05/25/2019%E5%B9%B4CoderWGB%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>人们常说:”理想很丰满,现实很骨感”。</strong></p>
<a id="more"></a>
<h3 id="流量预警-以下开启刷图模式"><a href="#流量预警-以下开启刷图模式" class="headerlink" title="流量预警,以下开启刷图模式: ~"></a>流量预警,以下开启刷图模式: ~</h3><h2 id="时间总是让人猝不及防的东西"><a href="#时间总是让人猝不及防的东西" class="headerlink" title="时间总是让人猝不及防的东西"></a>时间总是让人猝不及防的东西</h2><p>和几个小伙伴成立了一个爬山户外的组织,团队成员加起来10人左右,平时有空有想法就组织一起活动。</p>
<h2 id="Time-Line"><a href="#Time-Line" class="headerlink" title="Time Line"></a>Time Line</h2><ul>
<li><a href="#1">2019年02月16日 鹏城第一峰 梧桐山打卡 </a></li>
<li><a href="#2">2019年03月16日 塘朗山森林公园 散步</a></li>
<li><a href="#3">2019年04月06日 小梅沙徒步</a></li>
<li><a href="#4">2019年05月01日 尖沙咀 维多利亚港 天星小轮 遛弯</a></li>
<li><a href="#5">2019年05月03日 凤凰山森林公园 烧香拜佛</a></li>
<li><a href="#6">2019年05月12日 艳阳天徒步南山双峰 怒吃五碗砂锅粥</a></li>
<li><a href="#7">2019年05月18日 夜登南山</a></li>
</ul>
<h1 id ="1">  今年首登梧桐山 </h1>


<p><img src="http://wangguibin.github.io/post-images/1560698788372.JPG" alt=""><br>这一次参与活动的有小美,小君,娟儿,娟儿家属(御用摄影师),大壮,me,一共6人成行 ~  </p>
<h1 id="2">    塘朗山抖腿   </h1>


<p><img src="http://wangguibin.github.io/post-images/1560698803277.JPG" alt=""><br><strong>划重点</strong> <code>这是塘朗山大门口, 路线说一下: 桃源村D出口 往前走个几百米,右拐一直往前走即到</code></p>
<p><img src="http://wangguibin.github.io/post-images/1560698813412.JPG" alt=""><br>​    尬: 这个站位有点尬, 本来实在不想放这张图上去的,但是这张图人多比较齐~  so 牺牲小我 </p>
<p>​    本次摄影采用了路人拍摄, 依次是大壮,娟娥,me,叶小姐,mison,noodles ,一共六个人 </p>
<h1 id="3">  小梅沙徒步  </h1>

<p>这一次本来计划心心念念已久的七娘山的,可是因为清明节,节假日人多的缘故到了一个坐不到车的集合点,so经过漫长的等待以及不得已的作出其他方案,不然群员们都要扫兴而归, 退而求其次,最后决定去小梅沙走走逛逛… </p>
<p><img src="http://wangguibin.github.io/post-images/1560698834116.JPG" alt=""><br>略~ 我都懒得介绍了, 什么三千把狼人杀女巫的,金鱼佬,大壮,娟儿的童鞋&amp;家属</p>
<p><img src="http://wangguibin.github.io/post-images/1560698888319.JPG" alt=""><br>看👀 这海水多绿,多蓝….</p>
<h1 id="4"> Hong Kong 遛弯之行 </h1>

<p>本来是之前没有居住证,所以没有续签港澳通行证,到4月份的时候貌似我刚办完证就遇到国家政策说不要这么麻烦也可以续签了, 于是气不过续签试试火力,有了签注,然后又是五一,闲着没事就去资本主义逛了逛</p>
<p><img src="http://wangguibin.github.io/post-images/1560698899666.JPG" alt=""></p>
<p>这里是尖沙咀码头,对面是中环,两边的海边都叫维多利亚港,我2017年跨2018年元旦的那个晚上去蹲守了足足五个小时,就为了看那场仅仅持续20分钟的烟火🎆~  </p>
<h1 id="5">  凤凰山烧香拜佛听故事  </h1>


<p><img src="http://wangguibin.github.io/post-images/1560698921450.jpg" alt=""><br>凤凰山脚下</p>
<p>寺庙旁边有素菜馆</p>
<p><img src="http://wangguibin.github.io/post-images/1560698943665.jpg" alt=""></p>
<h1 id="6">  艳阳天之登南山  </h1>




<p><img src="http://wangguibin.github.io/post-images/1560698962757.JPG" alt=""><br>​ 我,娟娥 ,大壮和大壮表妹仅四人 </p>
 <h1 id="7">  夜登南山 </h1>


<p><img src="http://wangguibin.github.io/post-images/1560698971403.jpg" alt=""></p>
<p>​    ## 待续~ </p>
]]></content>
      <tags>
        <tag>游记</tag>
        <tag>水文</tag>
        <tag>感悟</tag>
        <tag>计划想法</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年度个人总结</title>
    <url>/hexo-github-action/2018/12/31/2018%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="个人博客-http-wangguibin-github-io"><a href="#个人博客-http-wangguibin-github-io" class="headerlink" title="个人博客 http://wangguibin.github.io "></a>个人博客 <a><a href="http://wangguibin.github.io" target="_blank" rel="noopener">http://wangguibin.github.io</a> </a></h3><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    去年这个时候就有作一些类似的计划,明年全年应该如何如何,立了不少flag,很多事情都啪啪打脸,对于计划赶不上变化的事情,也就看淡很多。比如打算一个月看一本书,写一篇博客,去户外野一次…类似这种小目标看似简单容易实现,往往被现实琐碎的事情所打乱。今年依旧如此,为明年的这个时候埋下伏笔,但愿能打得轻些。一般来说,年初作出的计划,许下的承诺,写的越具体,生动,形象,年底清算复盘的时候越是最痛!</p>
<p><img src="http://wangguibin.github.io/post-images/1560697383306.png" alt=""><br>值得庆幸的是,今年博客几乎每个月都有更新。</p>
<a id="more"></a>

<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul>
<li><p><a href="#1">工作</a></p>
</li>
<li><p><a href="#2">技术</a></p>
</li>
<li><p><a href="#3">生活</a></p>
</li>
<li><p><a href="#4">总结</a></p>
</li>
</ul>
 <h1 id="1">  工作  </h1>

<p>​    说到工作,不得不说今年很丧,遇到前所未有的逆风局, 命运就算颠沛流离,命运就算曲折离奇… 差点我就要yin不住要尬歌了。2018这条路走得非常曲折, 工作上的频繁变动,导致个人性情大变。</p>
<h3 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h3><ul>
<li>2018年3月11日,在家家月嫂待满2年整,合同期满离职,可以说是很圆满了,就跟情侣分手似的,和平离职,没有什么不愉快,只是一个地方待久了,觉得外面的世界很大,不能总待在自己的舒适区原地踏步。当时我的想法很是慷慨激昂的,虽千万人吾往矣! 谁也拦不住我~  (直到今年家家月嫂上市启动大会,我仍然只是替他们高兴,祝愿他们成功而已~ 因为人生路,自己选的,跪着也要走完)</li>
</ul>
<p><img src="http://wangguibin.github.io/post-images/1560697411078.jpg" alt=""></p>
<ul>
<li><p>2018年3月25日 , 入职一家p2p小公司,具体什么名字,我也不愿多说。起初的想法就是进军一下金融领域,因为搞金融的容易搞钱,无非也想自己学点金融方面的东西,为以后的投资理财埋下伏笔。谁曾想p2p今年形势不好,6,7月份突然暴雷崩坏了,全国几百万家p2p相继凉凉, 相关的马甲包搞这方面黑产的公司也搞不动了,直接拒绝投资理财类似的业务,毕竟苹果审核方面对于这一块打击很严,App被拒,上线的机会很是渺茫,当时给到我这边的压力也很大,老板可以说也是慌得一笔,我思前想后还是得跑路要紧,当时是6月份,试用期内,想要跑路也容易,说走就走,so跑路成功! <img src="http://wangguibin.github.io/post-images/1560697431674.jpg" alt=""></p>
</li>
<li><p>2018年6月11日,由陈胖的推荐,入职深圳双猴科技, 这家公司规模还可以,人员配置也很合理, 本着为公司创造价值的心,也不曾想这个项目的主导说变就变的,连个项目跟进的人都没有, 一开始给到我做一个为翻译机服务的全语通App,一个月搞定的七七八八,结果没有人验收,后台一直很忙,联调接口也不配合(意味着该项目已凉),后来直接NO Care 了,无人跟进,没人搭理。就这样被放养了一两个月(期间自己看博客看视频学了学python),直到公司分家,这才真相大白。 <img src="http://wangguibin.github.io/post-images/1560697444164.jpg" alt=""></p>
</li>
<li><p>2018年10月31日, 分家到魔脑科技, 也就是现在所在的公司。利用人工智能学习英语的一个项目,公司的性质就是打造一个教育的平台,而我负责iOS开发这一块。因为是分家出来,各方面的东西几乎是从头开始的 , 到目前为止,我觉得这家公司更有互联网公司的味道, 活动相比较而言还可以,天天下午茶文化… 。毕竟创业公司不盈利的话,很容易就夭折了,希望能熬过明年吧(美好的祝愿). </p>
</li>
</ul>
<pre><code>纯手工自己组装办公室家具</code></pre><p><img src="http://wangguibin.github.io/post-images/1560697466728.jpg" alt=""><br>​        团建军训,走正步</p>
<p><img src="http://wangguibin.github.io/post-images/1560697480545.jpg" alt=""><br>​        站军姿,敬礼!</p>
<p><img src="http://wangguibin.github.io/post-images/1560697490636.jpg" alt=""><br>​        周六上课,虚无缥缈听大佬们说天书 in the sky</p>
<p><img src="http://wangguibin.github.io/post-images/1560697506060.jpg" alt=""><br>​        公司组织的户外活动,去深圳湾压马路</p>
<p><img src="http://wangguibin.github.io/post-images/1560697515071.jpg" alt=""></p>
<h1 id="2">  技术  </h1>

<p>​    想起年初定下的目标是,接触前后端的知识,向着全栈出发的。曾经想着仗剑走天涯,后来被琐事耽误了。</p>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul>
<li><em>HTML+CSS+JS和python爬虫入门</em></li>
<li><em>使用git代码管理,github发布了两个私有的pod库,分别是</em><ul>
<li><em><a href="https://github.com/CoderWGB/WGBCustomAlertView" target="_blank" rel="noopener">WGBCustomAlertView</a> 弹窗的通用工具</em> </li>
<li><em><a href="https://github.com/CoderWGB/WGBCocoaKit" target="_blank" rel="noopener">WGBCocoaKit</a>一些常用的Category工具</em></li>
</ul>
</li>
<li><em>iOS方面接触了IM即时聊天以及音视频简单处理</em>    </li>
<li><em>接触了人工智能的应用,语音识别,翻译与合成</em></li>
<li><em>小程序能够写一写,但是不熟</em></li>
</ul>
<p>写UI写的很熟练了,什么XIB纯代码都难不倒我,就是关于业务方面的东西,今年所经历的公司,没有一个文档规范的。希望以后能通过自己的努力,改变这些不合理。</p>
<h3 id="认知"><a href="#认知" class="headerlink" title="认知"></a>认知</h3><p>​    我清楚的知道,技术人普遍所欠缺的一种能力,那就是沟通表达能力, 这个是一门艺术活,看过类似演讲与口才的书也比较多,并没有实质性的进展,主要体现为缺乏实战场景,毕竟工作性质的关系,一天到晚可能就和电脑打交道,很少通过自己用口语去表达。</p>
 <h1 id="3">  生活  </h1>

<p>​    生活肯定想着多姿多彩的嘛,去年还真是那样,那时候在深圳几乎不会无聊,只恨自己时间太少。尽管是这样,我仍然没有遇到我喜欢的那个人。今年不比往年,由于换工作的事情,搬了两次家,于是于是搬到龙华那边之后,户外活动几乎没怎么参加, 开始宅到怀疑人生,什么都不想,就看看电视,玩玩手机,打打游戏,唱唱歌… </p>
<ul>
<li>刷过几部电视剧电影啥的,并没有写评论或者影评的习惯,我觉得可以试着搞一下了</li>
<li>玩手机,无非是聊天斗图联络感情,或者手游,再或者逛逛论坛啥的</li>
<li>打电脑游戏,LOL是老玩家了,也有想过退游</li>
<li>唱歌,得到多方面的肯定,确实比去年进步了</li>
<li>户外,爬山或者走海岸线</li>
<li>减肥节食,打卡互相督促</li>
</ul>
<p>​                    穿越东西冲,这是年初1月份的时候</p>
<p><img src="http://wangguibin.github.io/post-images/1560697528829.jpg" alt=""><br>​                    </p>
<p>​                    这个是和小呆瓜去的南山,当时小呆瓜还在深圳</p>
<p><img src="http://wangguibin.github.io/post-images/1560697536886.jpg" alt=""></p>
<p> 小胖梅说的这个,纪念碑谷的线下活动就在我当时上班的地方附近<br> <img src="http://wangguibin.github.io/post-images/1560697580633.jpg" alt=""></p>
<p>​    七月份大热天去作梧桐山,结识几个户外好友</p>
<p><img src="http://wangguibin.github.io/post-images/1560697594007.jpg" alt=""><br>​                    </p>
<p>​                    炎根来找我玩,然后一起去了大浪绿道那边的果园摘荔枝~ 吃个饱 吃个够</p>
<p><img src="http://wangguibin.github.io/post-images/1560697606179.jpg" alt=""><br>​    在洪湖公园赏荷花,大头和馒头以及猴子几人组</p>
<p><img src="http://wangguibin.github.io/post-images/1560697615749.jpg" alt=""><br>​        </p>
<p>​        参加西丽相亲大会</p>
<p><img src="http://wangguibin.github.io/post-images/1560697627610.jpg" alt=""></p>
<p>​                    宝安公园的景致还是很不错的呢  有空还得去跑跑步啥的</p>
<p><img src="http://wangguibin.github.io/post-images/1560697638363.jpg" alt=""></p>
<p>​                    梧桐山的好汉坡大平台在休息吃零食  10月1日</p>
<p><img src="http://wangguibin.github.io/post-images/1560697650920.jpg" alt=""><br>​    胖界游玩东部华侨城 </p>
<p><img src="http://wangguibin.github.io/post-images/1560697658385.jpg" alt=""><br>从11月份开始,我承担起了家庭责任,开始帮父亲在网上售卖脐橙,朋友圈的铺天盖地的广告,很多好友也很                捧场,我只能默默的说一句,赣南脐橙对于吃货来说绝对是不可抗拒的</p>
<p><img src="http://wangguibin.github.io/post-images/1560697665347.jpg" alt=""></p>
<p>此前种种,无非就是宅的结果,于是从11月18号开始聚集好友开始体重打卡,打了将近两个月,也就是现在,也是有一些结果了吧 </p>
<p>​                                第一次打卡,可以说是委屈成200斤</p>
<p><img src="http://wangguibin.github.io/post-images/1560697677590.jpg" alt=""><br>​                        到目前为止,可以说是减下来了一点点,剩下的就是要继续坚持</p>
<p><img src="http://wangguibin.github.io/post-images/1560697685898.jpg" alt=""><br>​    </p>
<p>​                        且行且坚持,我相信,假以时日我可以减到160的!!!</p>
<h1 id="4">  总结 </h1>

<p>​    emmmm… 重新审视了一下, 一年以来,最大的变化,可能是性格方面逐渐变得沉闷,没有之前那么豁达了。很少有时间去和别人去沟通自己的想法,也逐渐失去了表达的意愿,所以我自始至终都是一个内向的人啊。</p>
<p>​    通过复盘一年的经历,过去的种种,也开始发现自己对于生活的态度过于不作为,没有追求,没有目标,一味的上班下班,对于工作,已经缺乏了必要的耐心, 很多事情我都可以视而不见或是不想利用自己的时间去做, 分得很清楚。</p>
<p>对于未来,没有太多的奢望,好好工作,好好生活,好好吃饭,足矣~</p>
]]></content>
      <tags>
        <tag>游记</tag>
        <tag>水文</tag>
        <tag>感悟</tag>
        <tag>计划想法</tag>
      </tags>
  </entry>
  <entry>
    <title>Alfred+Shell打造一款轻量级的图床工具</title>
    <url>/hexo-github-action/2021/01/24/Alfred+Shell%E6%89%93%E9%80%A0%E4%B8%80%E6%AC%BE%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>github仓库 + <code>github_token</code> <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">生成token之后备份好</a></li>
<li><code>Alfred</code> 软件 <a href="https://www.alfredapp.com" target="_blank" rel="noopener">支持正版,盗版可耻😄</a></li>
<li><code>Shell</code>脚本,Mac自带的bash即可,用到<code>curl</code>工具</li>
</ol>
<p>脚本如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">filePath=<span class="variable">$1</span> <span class="comment"># /Users/mac/Desktop/1.jpg 文件路径 是通过Alfred选中事件传入进来的</span></span><br><span class="line"></span><br><span class="line">fileName=`date +%Y%m%d%H%M%S`.<span class="variable">$&#123;filePath##*.&#125;</span> <span class="comment">#时间到秒+路径截取拼接文件名 防止重复</span></span><br><span class="line"></span><br><span class="line">CommitMsg=<span class="string">"Mac通过Shell脚本上传了一张图片"</span><span class="variable">$fileName</span> <span class="comment">#提交信息可自定义</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>&lt;&lt;EOF</span><br><span class="line"><span class="variable">$userName</span> github用户名</span><br><span class="line"><span class="variable">$repoName</span> 仓库名</span><br><span class="line"><span class="variable">$path</span>  路径名即存放图片的目录</span><br><span class="line"><span class="variable">$github_token</span> github生成的token</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果 采用jsdelivr的免费加速服务</span></span><br><span class="line">Target_Img_URL=<span class="string">"https://cdn.jsdelivr.net/gh/<span class="variable">$userName</span>/<span class="variable">$repoName</span>/<span class="variable">$path</span>/"</span><span class="variable">$fileName</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件base64编码 不换行</span></span><br><span class="line">Base64_Content=$(base64 -b 0 <span class="variable">$filePath</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#github开发的API接口</span></span><br><span class="line">API_URL=<span class="string">"https://api.github.com/repos/<span class="variable">$userName</span>/<span class="variable">$repoName</span>/contents/<span class="variable">$path</span>/"</span><span class="variable">$&#123;fileName&#125;</span></span><br><span class="line"></span><br><span class="line">Acess_Token=<span class="string">"token <span class="variable">$github_token</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起PUT网络请求 -X是指定方法类型 -H是header参数可以传多个 -d 是传json参数 单引号shell不能入参所以只能转义</span></span><br><span class="line">result=$(curl \</span><br><span class="line">  -X PUT \</span><br><span class="line">  -H <span class="string">"Content-Type:application/json"</span>\</span><br><span class="line">  -H <span class="string">"Authorization:<span class="variable">$Acess_Token</span>"</span> \</span><br><span class="line">  -H <span class="string">"Accept:application/vnd.github.raw"</span>\</span><br><span class="line">  <span class="variable">$&#123;API_URL&#125;</span> \</span><br><span class="line">  -d <span class="string">"&#123;\"message\":\"<span class="variable">$&#123;CommitMsg&#125;</span>\",\"content\":\"<span class="variable">$&#123;Base64_Content&#125;</span>\"&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为返回结果是一堆json数据 但只有成功的时候才会返回committer字段 所以匹配一下用于判断</span></span><br><span class="line">IsUpload=`<span class="built_in">echo</span> <span class="variable">$result</span> | grep <span class="string">"committer"</span>`</span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="string">"<span class="variable">$IsUpload</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="comment">#将结果拷贝至剪贴板 </span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$Target_Img_URL</span> | pbcopy</span><br><span class="line">	<span class="comment">#如果需要markdown模式则打开如下代码注释即可</span></span><br><span class="line">	<span class="comment">#echo "![]($Target_Img_URL)" | pbcopy</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#发起AppleScript脚本通知事件 </span></span><br><span class="line">	osascript -e <span class="string">"display notification \"<span class="variable">$Target_Img_URL</span>\" with title \"通知\" subtitle \"上传成功,地址已拷贝至剪贴板\""</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#如此就大功告成了!</span></span><br></pre></td></tr></table></figure>

<h2 id="Alfred设置相关"><a href="#Alfred设置相关" class="headerlink" title="Alfred设置相关"></a>Alfred设置相关</h2><p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210124213912.png" alt=""></p>
<p>如图新建一个空白的<code>blank workflow</code>然后加<code>Hotkey</code>和<code>Run Script</code>,设置对应的快捷键以及脚本调用</p>
<p>设置快捷键如图:<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210124214231.png" alt=""></p>
<p>设置脚本调用如图:<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210124214257.png" alt=""></p>
<p>然后是配置变量列表(结合脚本和下图理解),导出可清空字段值勾选上不至于私密数据token之类的泄漏或者共享(这个功能很银杏化)<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210124214503.png" alt=""></p>
<p>最后是大功告成了!<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210124214725.png" alt=""></p>
<p>虽然我觉得<code>PicGo</code>+<code>TyPora</code>效率也很高,但是这个是自己亲手写出来的工具还是要嘚瑟嘚瑟的~ 哈嘿~ </p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>成品在这 <a href="https://github.com/WangGuibin/WGBToolsConfigRepository/blob/master/oh-my-workflows/github自动化图床.alfredworkflow" target="_blank" rel="noopener">github图床工具</a></p>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://www.cnblogs.com/osinger/p/12025315.html" target="_blank" rel="noopener">Alfred Workflow 一键上传图片到github</a><br><a href="https://www.cnblogs.com/wgb1234/p/13660900.html" target="_blank" rel="noopener">如何制作一个手机上的Github图床捷径(workflow)</a><br><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></p>
]]></content>
      <tags>
        <tag>图床</tag>
        <tag>效率工具</tag>
        <tag>工作流</tag>
        <tag>workflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastlane自动化脚本打包上传蒲公英发送钉钉机器人消息通知</title>
    <url>/hexo-github-action/2020/11/25/Fastlane%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%92%B2%E5%85%AC%E8%8B%B1%E5%8F%91%E9%80%81%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<h2 id="打包脚本集成"><a href="#打包脚本集成" class="headerlink" title="打包脚本集成"></a>打包脚本集成</h2><ol>
<li>定义好可配置项,方便修改</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先定义好全局变量 </span></span><br><span class="line">SCHEME = <span class="string">"xxx"</span></span><br><span class="line">WORKSPACE = <span class="string">"xxx.xcworkspace"</span></span><br><span class="line">XCODEPROJ = <span class="string">"xxx.xcodeproj"</span></span><br><span class="line">BundleId = <span class="string">"com.xxx.ooo"</span></span><br><span class="line">dingding_token = <span class="string">"xxxxoooo"</span> <span class="comment">#电脑端钉钉建群群助手添加机器人webhook设置好获取token即可 发消息得带tag不然可能失败</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>打包到Testflight</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">desc <span class="string">"打包到Testflight"</span></span><br><span class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span></span><br><span class="line">    increment_build_number_in_plist(<span class="symbol">target:</span> SCHEME) <span class="comment">#build号自增</span></span><br><span class="line">    build_app(</span><br><span class="line">      <span class="symbol">workspace:</span> WORKSPACE,</span><br><span class="line">      <span class="symbol">scheme:</span> SCHEME,</span><br><span class="line">      <span class="symbol">silent:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">output_directory:</span> <span class="string">'.ipa/Testflight'</span>,</span><br><span class="line">      <span class="symbol">output_name:</span> <span class="string">'app.ipa'</span>,</span><br><span class="line">      <span class="symbol">export_xcargs:</span> <span class="string">"-allowProvisioningUpdates"</span>,</span><br><span class="line">      <span class="symbol">export_options:</span> &#123;</span><br><span class="line">        <span class="symbol">method:</span> <span class="string">'app-store'</span>,</span><br><span class="line">        <span class="symbol">manifest:</span> &#123;</span><br><span class="line">          <span class="symbol">appURL:</span> <span class="string">'https://example.com/MyApp.ipa'</span>,</span><br><span class="line">          <span class="symbol">displayImageURL:</span> <span class="string">'http://xxxxxx'</span>,<span class="comment">#小图标</span></span><br><span class="line">          <span class="symbol">fullSizeImageURL:</span> <span class="string">'http://xxxxx'</span><span class="comment">#大图标1024x1024</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    upload_to_testflight(</span><br><span class="line">      <span class="symbol">ipa:</span> <span class="string">'.ipa/Testflight/app.ipa'</span></span><br><span class="line">    )</span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打包到App Store</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">desc <span class="string">"部署到App Store"</span></span><br><span class="line">  lane <span class="symbol">:release</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line">    sigh(</span><br><span class="line">      <span class="symbol">output_path:</span> <span class="string">'.certificates'</span>,</span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    increment_version_number_in_plist(</span><br><span class="line">      <span class="symbol">target:</span> SCHEME,</span><br><span class="line">      <span class="symbol">version_number:</span> options[<span class="symbol">:version_number</span>]</span><br><span class="line">    )</span><br><span class="line">    increment_build_number_in_plist(<span class="symbol">target:</span> SCHEME)</span><br><span class="line"></span><br><span class="line">    gym(</span><br><span class="line">      <span class="symbol">scheme:</span> SCHEME,</span><br><span class="line">      <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">silent:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">output_directory:</span> <span class="string">'.ipa/AppStore'</span>,</span><br><span class="line">      <span class="symbol">output_name:</span> <span class="string">'app.ipa'</span>,</span><br><span class="line">      <span class="symbol">configuration:</span> <span class="string">'Release'</span>,</span><br><span class="line">      <span class="symbol">export_xcargs:</span> <span class="string">"-allowProvisioningUpdates"</span></span><br><span class="line">    )</span><br><span class="line">    upload_to_app_store(</span><br><span class="line">      <span class="symbol">force:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">ipa:</span> <span class="string">'.ipa/AppStore/app.ipa'</span>,</span><br><span class="line">      <span class="symbol">skip_screenshots:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">automatic_release:</span> <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打AdHoc分发包</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">cert <span class="comment">#获取证书</span></span><br><span class="line"><span class="comment">#验证签名</span></span><br><span class="line">sigh(</span><br><span class="line">  <span class="symbol">adhoc:</span> <span class="literal">true</span>,</span><br><span class="line">  <span class="symbol">output_path:</span> <span class="string">'.certificates'</span>,</span><br><span class="line">  <span class="symbol">app_identifier:</span> BundleId</span><br><span class="line"> )</span><br><span class="line"><span class="comment">#自增build号</span></span><br><span class="line">increment_build_number_in_plist(<span class="symbol">target:</span> SCHEME)</span><br><span class="line">time = Time.now.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="comment">#编译打包</span></span><br><span class="line">gym(</span><br><span class="line">  <span class="symbol">scheme:</span> SCHEME,</span><br><span class="line">  <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">  <span class="symbol">output_directory:</span> <span class="string">".ipa/<span class="subst">#&#123;SCHEME&#125;</span>/<span class="subst">#&#123;time&#125;</span>"</span>,</span><br><span class="line">  <span class="symbol">output_name:</span> <span class="string">'app.ipa'</span>,</span><br><span class="line">  <span class="symbol">configuration:</span> <span class="string">"Release"</span>,</span><br><span class="line">  <span class="symbol">export_xcargs:</span> <span class="string">"-allowProvisioningUpdates"</span></span><br><span class="line"> )</span><br><span class="line"><span class="comment"># 上传蒲公英 </span></span><br><span class="line">upload_ipa_to_pgyer(<span class="symbol">scheme:</span> SCHEME, <span class="symbol">time:</span> time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送钉钉消息</span></span><br><span class="line">send_dingding_msg()</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传至蒲公英分发平台 (这个平时用的比较多)</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">private_lane <span class="symbol">:upload_ipa_to_pgyer</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line">    pgyer(</span><br><span class="line">      <span class="symbol">api_key:</span> <span class="string">"xxxxx"</span>,</span><br><span class="line">      <span class="symbol">user_key:</span> <span class="string">"xxxxx"</span>,</span><br><span class="line">      <span class="symbol">ipa:</span> <span class="string">".ipa/<span class="subst">#&#123;options[<span class="symbol">:scheme</span>]&#125;</span>/<span class="subst">#&#123;options[<span class="symbol">:time</span>]&#125;</span>/app.ipa"</span></span><br><span class="line">    )</span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="6">
<li><p>发送钉钉机器人消息</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">desc <span class="string">"发送机器人🤖消息到钉钉群"</span></span><br><span class="line">lane <span class="symbol">:send_dingding_msg</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line">  version = get_version_number(<span class="symbol">target:</span> SCHEME)</span><br><span class="line"> text = <span class="string">"🚀🚀🚀测试包v<span class="subst">#&#123;version&#125;</span> Release环境打包更新啦，下载地址：https://www.pgyer.com/xxx ,请查收~ "</span></span><br><span class="line"> ding_talk_msg_push(<span class="symbol">token:</span>dingding_token, <span class="symbol">text:</span>text, <span class="symbol">at_all:</span> <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>发送更新日志到钉钉群</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包之前准备好更新内容 log.txt 存放在fastlane同一目录层级</span></span><br><span class="line">desc <span class="string">"获取更新日志并发送至钉钉机器人🤖"</span></span><br><span class="line">    lane <span class="symbol">:send_log_to_dingding</span> <span class="keyword">do</span>  <span class="params">|options|</span></span><br><span class="line">    log_text = File.new(<span class="string">"../log.txt"</span>, <span class="string">"r:utf-8"</span>).sysread(<span class="number">2000</span>) <span class="comment">#读取文本2000字</span></span><br><span class="line">    ding_talk_msg_push(<span class="symbol">token:</span>dingding_token, <span class="symbol">text:</span>log_text, <span class="symbol">at_all:</span> <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可能用到的插件,在<code>Pluginfile</code>中添加</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">gem <span class="string">'fastlane-plugin-pgyer'</span></span><br><span class="line">gem <span class="string">'fastlane-plugin-versioning'</span></span><br><span class="line">gem <span class="string">'fastlane-plugin-ding_talk_msg_push'</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="fastlane自动化脚本打包-至此就告一段落了-持续集成下次再弄"><a href="#fastlane自动化脚本打包-至此就告一段落了-持续集成下次再弄" class="headerlink" title="fastlane自动化脚本打包,至此就告一段落了,持续集成下次再弄~"></a>fastlane自动化脚本打包,至此就告一段落了,持续集成下次再弄~</h2>]]></content>
      <tags>
        <tag>效率</tag>
        <tag>工具</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac内网穿透工具Ngrok的使用</title>
    <url>/hexo-github-action/2020/10/27/Mac%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7Ngrok%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>基于陈胖接了一个web项目,客户要求他用花生壳内网穿透给他们做演示预览, 然鹅Mac天然并没有花生壳这个软件~ 。</p>
<p>本着学习的态度,寻思着肯定有其他替代方案,然后就发现了<code>Ngrok</code>这个工具,这里记录一下使用的方法,特水此一文。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol>
<li><p><a href="https://ngrok.com/download" target="_blank" rel="noopener">下载地址</a></p>
</li>
<li><p>解压后发现是一个<code>shell</code>程序,然后执行<code>chmod a+x ngrok</code>增加执行权限</p>
</li>
<li><p>配置到环境变量,直接把可执行文件放到shell脚本目录<code>MyShell</code>下即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># shell脚本如何全局使用（不用cd到脚本目录下）？</span><br><span class="line"></span><br><span class="line">&gt; 本质是访问环境变量，好多第三方脚本工具都是全局配置的，一般需要在&#96;~&#x2F;.zshrc&#96;或者&#96;~&#x2F;.bash_profile&#96;里配置访问路径的环境变量，形如 </span><br><span class="line">​&#96;&#96;&#96;shell</span><br><span class="line">#其中&#96;&#x2F;Users&#x2F;mac&#96;是根目录即&#96;$HOME&#96; 可根据实际情况配置 这里电脑用户名为&#96;mac&#96; </span><br><span class="line">export PATH&#x3D;&#x2F;Users&#x2F;mac&#x2F;flutter&#x2F;bin:$PATH #拼到最前面</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;Users&#x2F;mac&#x2F;MyShell #拼到最后面</span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<ol>
<li>写好一个工具脚本，并命名为<code>common_tool</code> (PS:<code>common_tool.sh</code>简化命令的时候需要把后缀也加上其效果和无后缀是一样的)</li>
<li>建立一个目录用于存储脚本工具，这里命名为<code>MyShell</code>,并把<code>common_tool</code>放入该目录下</li>
<li>进入<code>MyShell</code>目录下，把<code>common_tool</code>脚本的执行权限打开 <code>chmod +x common_tool</code></li>
<li>查看命令<code>common_tool</code> </li>
</ol>
<p>​<code>shell
which common_tool
/Users/mac/MyShell/common_tool
​</code></p>
<ol start="5">
<li>执行命令 <code>common_tool</code><br>​<code>shell
common_tool + 回车即可看见效果
​</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 开启本地webServer服务</span><br><span class="line"></span><br><span class="line">开启webserver方式有很多,可以参考[盘点Mac上搭建本地WebServer的几种方式](https:&#x2F;&#x2F;www.cnblogs.com&#x2F;wgb1234&#x2F;p&#x2F;12466122.html) ,这里采用最为简单的方法即Python的一条命令</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">cd 到放web项目的index.html所在的入口目录</span><br><span class="line">执行python -m http.server 8080即可开启webServer服务</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="使用Ngrok穿透工具映射本地webServer地址"><a href="#使用Ngrok穿透工具映射本地webServer地址" class="headerlink" title="使用Ngrok穿透工具映射本地webServer地址"></a>使用Ngrok穿透工具映射本地webServer地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ngrok http localhost:8080  即可</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#即可获取映射后的根目录地址</span></span><br><span class="line">http://4dfcioxc4.ngrok.io </span><br><span class="line">https://4dfcioxc4.ngrok.io  <span class="comment">#iOS不支持https Mac支持</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>内网穿透</tag>
        <tag>webServer</tag>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>IPA包内网分发</title>
    <url>/hexo-github-action/2022/02/02/IPA%E5%8C%85%E5%86%85%E7%BD%91%E5%88%86%E5%8F%91/</url>
    <content><![CDATA[<p>企业包   无设备限制,方便分发,需要手动信任证书<br>开发包   100个设备UDID限制</p>
<a id="more"></a>

<ul>
<li><p>手机 + Xcode  手动安装,一个两个无所谓,人多或者机器一多就挺烦</p>
</li>
<li><p>外网 +  manifest.plist的https链接  可行,但是服务器支持</p>
</li>
<li><p>内网 +  manifest.plist的https链接 =&gt;   需要和手机保持同一个网段即局域网</p>
</li>
</ul>
<p><code>manifest.plist</code>格式如下: 需要放到<code>https</code>的资源服务器上 这里直接放github了, IPA放本地开个webServer 即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="meta-string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="comment">&lt;!-- ipa文件资源所在地址 一般放内网 局域网访问资源文件快 一般ipa资源文件比较大 --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>http://192.168.111.111:8080/app.ipa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- bundleID --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>App<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p>利用<code>itms-services</code>协议,画个按钮用html的a标签进行访问即可</p>
<p>itms-services://?action=download-manifest&amp;url=manifest.plist的url</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>iOS App安装<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.rect</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: teal;</span><br><span class="line">        border-radius: 50px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-id">#download</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        color: white;</span><br><span class="line">        background-color: tomato;</span><br><span class="line">        font-size: 25px;</span><br><span class="line">        border-radius: 25px;</span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-id">#888</span>;</span></span><br><span class="line">        padding: 10px;</span><br><span class="line">        background-image: linear-gradient(to top right, red, orange);</span><br><span class="line">        text-decoration: none;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rect"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>App<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"download"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">href</span>=<span class="string">"itms-services://?action=download-manifest&amp;url=https://cdn.jsdelivr.net/gh/WangGuibin/ImageBed@main/files/xxx.plist"</span></span></span><br><span class="line"><span class="tag">        &gt;</span>下载安装<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>工具使用</tag>
        <tag>IPA分发</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter与iOS之间平台通信(platform channel)基本流程</title>
    <url>/hexo-github-action/2020/04/02/Flutter%E4%B8%8EiOS%E4%B9%8B%E9%97%B4%E5%B9%B3%E5%8F%B0%E9%80%9A%E4%BF%A1(platform%20channel)%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://api.lyiqk.cn/purelady?cdd6a546" alt=""></p>
<h2 id="创建插件项目"><a href="#创建插件项目" class="headerlink" title="创建插件项目"></a>创建插件项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令解读 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -i 指的是iOS平台选择什么语言 后接语言类型 objc/swift</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -a 指的是Android平台 后接语言类型 java/kotlin</span></span><br><span class="line">flutter create --template=plugin -i objc -a java MyPlugin</span><br><span class="line">cd  MyPlugin/example</span><br><span class="line">flutter run #试试项目能否跑🏃起来</span><br></pre></td></tr></table></figure>

<p><em>等待命令执行完即可</em></p>
<p>目录结构大致如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── CHANGELOG.md</span><br><span class="line">├── LICENSE</span><br><span class="line">├── MyPlugin.iml</span><br><span class="line">├── README.md</span><br><span class="line">├── android   #安卓平台代码</span><br><span class="line">├── example #demo例子🌰</span><br><span class="line">├── ios   #iOS平台代码</span><br><span class="line">├── lib   #插件通信代码 </span><br><span class="line">├── pubspec.lock </span><br><span class="line">├── pubspec.yaml</span><br><span class="line">└── test</span><br></pre></td></tr></table></figure>



<h2 id="开始编写插件代码"><a href="#开始编写插件代码" class="headerlink" title="开始编写插件代码"></a>开始编写插件代码</h2><p><strong>首先打开项目找到<code>MyPlugin.dart</code>文件</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/services.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> MethodChannel _channel = <span class="keyword">const</span> MethodChannel(<span class="string">'MyPlugin'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span> platformVersion <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> version = <span class="keyword">await</span> _channel.invokeMethod(<span class="string">'getPlatformVersion'</span>);</span><br><span class="line">    <span class="keyword">return</span> version;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增一个方法 用于发送字典即Map参数给iOS平台 返回值是泛型类型用于接收iOS发送过来的消息内容</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">dynamic</span>&gt; dartSendMessageToIOS(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">return</span> _channel.invokeMethod(<span class="string">"dartSendMessageToIOS"</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>其次找到<code>example/main.dart</code>用于开发调试插件代码</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/services.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:MyPlugin/MyPlugin.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _platformVersion = <span class="string">'Unknown'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    initPlatformState();</span><br><span class="line">    initDartSendMessage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; initDartSendMessage() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> platformVersion;</span><br><span class="line">    <span class="built_in">dynamic</span> args; <span class="comment">//定义接收对应平台的返回值 (这里指iOS平台,Android端暂未实现)</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      platformVersion = <span class="string">""</span>;</span><br><span class="line">      args = <span class="keyword">await</span> MyPlugin.dartSendMessageToIOS(&#123;</span><br><span class="line">        <span class="string">"floatNumber"</span>: <span class="number">0.02</span>,</span><br><span class="line">        <span class="string">"number"</span>: <span class="number">666</span>,</span><br><span class="line">        <span class="string">"str"</span>: <span class="string">"字符串"</span>,</span><br><span class="line">        <span class="string">"arr"</span>: [<span class="string">"item1"</span>, <span class="string">"item2"</span>, <span class="string">"item3"</span>],</span><br><span class="line">        <span class="string">"dict"</span>: &#123;<span class="string">"key"</span>: <span class="string">"value"</span>&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"iOS获取过来的数据如下:\n <span class="subst">$args</span>"</span>);</span><br><span class="line">    &#125; <span class="keyword">on</span> PlatformException &#123;</span><br><span class="line">      platformVersion = <span class="string">"获取到版本号失败!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mounted) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _platformVersion = platformVersion;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Platform messages are asynchronous, so we initialize in an async method.</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; initPlatformState() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> platformVersion;</span><br><span class="line">    <span class="comment">// Platform messages may fail, so we use a try/catch PlatformException.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      platformVersion = <span class="keyword">await</span> MyPlugin.platformVersion;</span><br><span class="line">    &#125; <span class="keyword">on</span> PlatformException &#123;</span><br><span class="line">      platformVersion = <span class="string">'Failed to get platform version.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the widget was removed from the tree while the asynchronous platform</span></span><br><span class="line">    <span class="comment">// message was in flight, we want to discard the reply rather than calling</span></span><br><span class="line">    <span class="comment">// setState to update our non-existent appearance.</span></span><br><span class="line">    <span class="keyword">if</span> (!mounted) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _platformVersion = platformVersion;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">'Plugin example app'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">'Running on: <span class="subst">$_platformVersion</span>\n'</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于通道(channel)的数据类型交互可参考<a href="https://flutterchina.club/platform-channels/#codec" target="_blank" rel="noopener">flutter中文网的介绍</a></p>
<p><strong>最后就是使用Xcode打开<code>example/ios/Runner.xcodeproj</code>编辑本地库里的插件文件<code>MyPlugin.m</code></strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"MyPlugin.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyPlugin</span></span></span><br><span class="line">+ (<span class="keyword">void</span>)registerWithRegistrar:(<span class="built_in">NSObject</span>&lt;FlutterPluginRegistrar&gt;*)registrar &#123;</span><br><span class="line">  FlutterMethodChannel* channel = [FlutterMethodChannel</span><br><span class="line">      methodChannelWithName:<span class="string">@"MyPlugin"</span></span><br><span class="line">            binaryMessenger:[registrar messenger]];</span><br><span class="line">  MyPlugin* instance = [[MyPlugin alloc] init];</span><br><span class="line">  [registrar addMethodCallDelegate:instance channel:channel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)handleMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result &#123;</span><br><span class="line">  <span class="keyword">if</span> ([<span class="string">@"getPlatformVersion"</span> isEqualToString:call.method]) &#123;</span><br><span class="line">    result([<span class="string">@"iOS "</span> stringByAppendingString:[[<span class="built_in">UIDevice</span> currentDevice] systemVersion]]);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([<span class="string">@"dartSendMessageToIOS"</span> isEqualToString:call.method])&#123;</span><br><span class="line">      <span class="comment">//dart 发送一些参数给iOS,收到消息之后做一些事情</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//dart传的参数字典也就是Map</span></span><br><span class="line">      <span class="built_in">NSDictionary</span> *args = call.arguments;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"dart发送过来的数据:"</span>);</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"floatNumber: %@"</span>,args[<span class="string">@"floatNumber"</span>]);</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"str: %@"</span>,args[<span class="string">@"str"</span>]);</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"arr: %@"</span>,args[<span class="string">@"arr"</span>]);</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"dict: %@"</span>,args[<span class="string">@"dict"</span>]);</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"dict[key]: %@"</span>,args[<span class="string">@"dict"</span>][<span class="string">@"key"</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//给flutter channel发送一些参数过去 dart收到会打印显示的</span></span><br><span class="line">      result(@&#123;</span><br><span class="line">          <span class="string">@"float"</span> : @(<span class="number">0.0666</span>),</span><br><span class="line">          <span class="string">@"int"</span> : @(<span class="number">1111</span>),</span><br><span class="line">          <span class="string">@"strings"</span> : <span class="string">@"哈哈哈哈,我是字符串了"</span>,</span><br><span class="line">          <span class="string">@"array"</span> : @[<span class="string">@"iOS"</span>,<span class="string">@"Swift"</span>,<span class="string">@"Flutter"</span>],</span><br><span class="line">          <span class="string">@"dict"</span> : @&#123;<span class="string">@"iOS"</span>:<span class="string">@"666"</span>&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    result(FlutterMethodNotImplemented);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>



<h2 id="最后-运行代码查看效果"><a href="#最后-运行代码查看效果" class="headerlink" title="最后,运行代码查看效果"></a>最后,运行代码查看效果</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd example</span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure>

<p><strong>附上一张控制台打印的效果图</strong></p>
<p><img src="https://github.com/WangGuibin/MyFilesRepo/blob/master/images/flutter2ios.png?raw=true" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>OC和C++混编需要注意的问题</title>
    <url>/hexo-github-action/2018/12/17/OC%E5%92%8CC++%E6%B7%B7%E7%BC%96%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><h4 id="1-c文件的identify-and-type右边栏修改为Objective-C-source"><a href="#1-c文件的identify-and-type右边栏修改为Objective-C-source" class="headerlink" title="1. .c文件的identify and type右边栏修改为Objective-C source"></a>1. <code>.c</code>文件的<code>identify and type</code>右边栏修改为<code>Objective-C source</code></h4><h4 id="2-Built-setting-gt-Apple-Clang-Language-gt-Compile-Source-AS设置为According-to-File-type-即根据文件源类型来编译"><a href="#2-Built-setting-gt-Apple-Clang-Language-gt-Compile-Source-AS设置为According-to-File-type-即根据文件源类型来编译" class="headerlink" title="2. Built setting -&gt; Apple Clang Language -&gt; Compile Source AS设置为According to File type,即根据文件源类型来编译"></a>2. <code>Built setting -&gt; Apple Clang Language -&gt; Compile Source AS</code>设置为<code>According to File type</code>,即根据文件源类型来编译</h4><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><h4 id="1-项目中使用到C或者C-的代码部分的-m文件-改为-mm"><a href="#1-项目中使用到C或者C-的代码部分的-m文件-改为-mm" class="headerlink" title="1. 项目中使用到C或者C++的代码部分的.m文件,改为.mm"></a>1. 项目中使用到C或者C++的代码部分的<code>.m</code>文件,改为<code>.mm</code></h4><h4 id="2-Built-setting-gt-Apple-Clang-Language-gt-Compile-Source-AS设置为Objective-C-即指定为C-的编译机制"><a href="#2-Built-setting-gt-Apple-Clang-Language-gt-Compile-Source-AS设置为Objective-C-即指定为C-的编译机制" class="headerlink" title="2.Built setting -&gt; Apple Clang Language -&gt; Compile Source AS设置为Objective-C++,即指定为C++的编译机制"></a>2.<code>Built setting -&gt; Apple Clang Language -&gt; Compile Source AS</code>设置为<code>Objective-C++</code>,即指定为C++的编译机制</h4><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><code>如果项目中有些头文件导入方式是用modules的@import xxxx 类似的, 那么就不能用第二种方案,因为.mm和这个会冲突,导致整个项目编译不过, 一般报错像这样 &quot;Use of &#39;@import&#39; when C++ modules are disabled, consider using -fmodules and -fcxx-modules&quot;</code></p>
<h4 id="最近几个月处于尴尬的处境-又是资本寒冬-一年之内换了三次工作两次住处-果然应了戴总那句2018注定是不平凡的一年"><a href="#最近几个月处于尴尬的处境-又是资本寒冬-一年之内换了三次工作两次住处-果然应了戴总那句2018注定是不平凡的一年" class="headerlink" title="最近几个月处于尴尬的处境,又是资本寒冬,一年之内换了三次工作两次住处,果然应了戴总那句2018注定是不平凡的一年"></a>最近几个月处于尴尬的处境,又是资本寒冬,一年之内换了三次工作两次住处,果然应了戴总那句2018注定是不平凡的一年</h4><h4 id="我想做个2019年的大计划-打算定一下目标-来做几件像样的事情…-12月了没几天了-先酝酿着。"><a href="#我想做个2019年的大计划-打算定一下目标-来做几件像样的事情…-12月了没几天了-先酝酿着。" class="headerlink" title="我想做个2019年的大计划,打算定一下目标,来做几件像样的事情… 12月了没几天了,先酝酿着。"></a>我想做个2019年的大计划,打算定一下目标,来做几件像样的事情… 12月了没几天了,先酝酿着。</h4><pre><code>`于2018年12月17日 深圳宝安`</code></pre>]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>学习总结</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>URL编码表参考</title>
    <url>/hexo-github-action/2020/11/19/URL%E7%BC%96%E7%A0%81%E8%A1%A8%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/1605732922.png" alt=""></p>
]]></content>
      <tags>
        <tag>URL编码</tag>
        <tag>URL解码</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS pod私有库组件化初尝试</title>
    <url>/hexo-github-action/2019/03/26/iOS%20pod%E7%A7%81%E6%9C%89%E5%BA%93%E7%BB%84%E4%BB%B6%E5%8C%96%E5%88%9D%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<p>​    很早以前就听说过组件化,但那个时候只是浅显的以为只有web前端才有的东西,现如今早已是大前端时代,组件化自然也是在业界普及,没有真正自己去实操这个东西,就犹如附骨之疽,很难受~<br>什么叫组件化呢? 带着这个问题去寻找答案。</p>
<a id="more"></a>

<blockquote>
<p>百度百科</p>
<blockquote>
<p>组件化是指解耦复杂系统时将多个功能模块拆分、重组的过程，有多种属性、状态反映其内部特性。</p>
</blockquote>
</blockquote>
<p>看字面意思,也大概能获取一些信息,比如<code>解耦</code>,<code>模块拆分</code>,<code>重组</code>等, 其实就把软件工程形容成一家大工厂, 写代码就是生产各种零配件, 生产到组装的一系列的过程活动就是组件化。</p>
<p>举两个耳熟能详的例子吧:</p>
<ul>
<li>A女士在微信上收到朋友的一条淘宝吱口令链接,她根据信息提示复制之后打开淘宝App, 淘宝一启动弹出提示框,询问是否跳转该商品了解详情, 点击是直接跳到一个路径比较深的页面(平时正常访问都是要列表或者某个具体的商品点击之后才能呈现的页面)</li>
<li>B先生在某浏览器上查找一个问题,刷到一个知乎的回答,但是只显示了一半,需要打开App才能阅读全文以及回复评论等操作,点击那个引导按钮,浏览器唤起知乎App,知乎跳转了该问题的回答列表</li>
</ul>
<p>以上均是日常可见的组件化场景,这种国民级的应用无需我来打广告了吧(避嫌)</p>
<p>其实组件化的方案有很多种,什么url-block,protocol-class, target-action等, 它们共同的特点就是独立出一个中间层/中间件, 用于处理调度业务的一个逻辑层, 使其业务模块解耦。</p>
<p>业界流行代表作: </p>
<p><a href="https://github.com/meili/MGJRouter" target="_blank" rel="noopener">MGJRouter</a></p>
<p><a href="https://github.com/casatwy/CTMediator" target="_blank" rel="noopener">CTMediator</a></p>
<p><a href="https://github.com/alibaba/BeeHive/blob/master/README-CN.md" target="_blank" rel="noopener">BeeHive</a></p>
<p>我参考的是<code>casa</code>大佬的<a href="https://github.com/casatwy/CTMediator" target="_blank" rel="noopener">CTMediator</a>,因为它短小精悍, 容易理解和实践。</p>
<p>就仅仅两个接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 远程App调用入口</span><br><span class="line">- (id)performActionWithUrl:(NSURL *)url completion:(void(^)(NSDictionary *info))completion;</span><br><span class="line">&#x2F;&#x2F; 本地组件调用入口</span><br><span class="line">- (id)performTarget:(NSString *)targetName action:(NSString *)actionName params:(NSDictionary *)params shouldCacheTarget:(BOOL)shouldCacheTarget;</span><br></pre></td></tr></table></figure>

<p>实践步骤:</p>
<h2 id="1-利用category独立业务模块-利用runtime运行时调用action的方法-获取业务对象供外部使用"><a href="#1-利用category独立业务模块-利用runtime运行时调用action的方法-获取业务对象供外部使用" class="headerlink" title="1. 利用category独立业务模块,利用runtime运行时调用action的方法,获取业务对象供外部使用"></a>1. 利用category独立业务模块,利用runtime运行时调用action的方法,获取业务对象供外部使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface CTMediator (CTMediatorModuleAActions)</span><br><span class="line"></span><br><span class="line">- (UIViewController *)CTMediator_viewControllerForDetail;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line">  </span><br><span class="line">NSString * const kCTMediatorTargetA &#x3D; @&quot;A&quot;; &#x2F;&#x2F;模块A</span><br><span class="line">NSString * const kCTMediatorActionNativFetchDetailViewController &#x3D; @&quot;nativeFetchDetailViewController&quot;&#x2F;&#x2F;方法名</span><br><span class="line">  </span><br><span class="line">@implementation CTMediator (CTMediatorModuleAActions)</span><br><span class="line"></span><br><span class="line">- (UIViewController *)CTMediator_viewControllerForDetail&#123;</span><br><span class="line">    UIViewController *viewController &#x3D; [self performTarget: kCTMediatorTargetA</span><br><span class="line">                              action: kCTMediatorActionNativFetchDetailViewController</span><br><span class="line">                              params: @&#123;@&quot;key&quot;:@&quot;value&quot;&#125; &#x2F;&#x2F;参数</span><br><span class="line">                   shouldCacheTarget:NO  &#x2F;&#x2F;是否缓存</span><br><span class="line">                                   ];</span><br><span class="line">    if ([viewController isKindOfClass:[UIViewController class]]) &#123;</span><br><span class="line">        &#x2F;&#x2F; view controller 交付出去之后，可以由外界选择是push还是present</span><br><span class="line">        return viewController;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 这里处理异常场景，具体如何处理取决于产品</span><br><span class="line">        return [[UIViewController alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>



<h2 id="2-建立Target-Actions-实现返回对应的业务对象"><a href="#2-建立Target-Actions-实现返回对应的业务对象" class="headerlink" title="2. 建立Target_Actions,实现返回对应的业务对象"></a>2. 建立Target_Actions,实现返回对应的业务对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@interface Target_A : NSObject</span><br><span class="line">&#x2F;&#x2F;CTMediator里的规则是 &#96;Action_&#96;+ &#96;actionName&#96; + &#96;:&#96;匹配</span><br><span class="line">- (UIViewController *)Action_nativeFetchDetailViewController:(NSDictionary *)params;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Target_A</span><br><span class="line"></span><br><span class="line">- (UIViewController *)Action_nativeFetchDetailViewController:(NSDictionary *)params&#123;</span><br><span class="line">    &#x2F;&#x2F; 因为action是从属于ModuleA的，所以action直接可以使用ModuleA里的所有声明</span><br><span class="line">    DemoModuleADetailViewController *viewController &#x3D; [[DemoModuleADetailViewController alloc] init];</span><br><span class="line">    viewController.valueLabel.text &#x3D; params[@&quot;key&quot;];</span><br><span class="line">    return viewController;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>



<h2 id="3-使用者调用组件-获取业务对象处理业务-实现组件化"><a href="#3-使用者调用组件-获取业务对象处理业务-实现组件化" class="headerlink" title="3. 使用者调用组件,获取业务对象处理业务,实现组件化"></a>3. 使用者调用组件,获取业务对象处理业务,实现组件化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (indexPath.row &#x3D;&#x3D; 0) &#123;</span><br><span class="line">    UIViewController *viewController &#x3D; [[CTMediator sharedInstance] CTMediator_viewControllerForDetail];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 获得view controller之后，在这种场景下，到底push还是present，其实是要由使用者决定的，mediator只要给出view controller的实例就好了</span><br><span class="line">    [self presentViewController:viewController animated:YES completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (indexPath.row &#x3D;&#x3D; 1) &#123;</span><br><span class="line">    UIViewController *viewController &#x3D; [[CTMediator sharedInstance] CTMediator_viewControllerForDetail];</span><br><span class="line">    [self.navigationController pushViewController:viewController animated:YES];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>很久没写文章了,那就水这么一篇吧 </p>
<p>​                                                                    于 2019年03月26日 深圳宝安</p>
<p>参考博文</p>
<p><a href="https://www.jianshu.com/p/59c2d2c4b737" target="_blank" rel="noopener">iOS 从零到一搭建组件化项目框架</a></p>
<p><a href="https://www.cnblogs.com/fishbay/p/7216084.html" target="_blank" rel="noopener">iOS组件化的几种实现</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>学习总结</tag>
        <tag>cocopods</tag>
        <tag>组件化</tag>
        <tag>git</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode辅助工具之热重载插件利器</title>
    <url>/hexo-github-action/2018/06/13/Xcode%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7%E4%B9%8B%E7%83%AD%E9%87%8D%E8%BD%BD%E6%8F%92%E4%BB%B6%E5%88%A9%E5%99%A8/</url>
    <content><![CDATA[<p>文章最新修改于: 2019-03-31 13:47:20</p>
<p> 昨天刚刚看完iOSTips微信公众号推送的文章, <a href="https://mp.weixin.qq.com/s?__biz=MjM5NTQ2NzE0NQ==&mid=2247483999&idx=1&sn=bc88d37b6f819bd6bd7d8b76e9787620&chksm=a6f958b9918ed1af9a084ce2c2732aaee715193e37fdb830dc31d8f0174c0314b22dc5c0dd1e&mpshare=1&scene=23&srcid=06126xSxEfUaISIzvyp4L4kn#rd" target="_blank" rel="noopener">Injection：iOS热重载背后的黑魔法</a> , 效果明显,惊为天人!,<br> 底层原理啥的受限目前水平,咱先不研究,使用方法还是得总结一波的,于是开始琢磨了一下。</p>
 <a id="more"></a>

<h4 id="第一步-去App-Store-或者-github下载开源免费的应用-InjectionIII-没错就是这货-长得跟注射器💉似的"><a href="#第一步-去App-Store-或者-github下载开源免费的应用-InjectionIII-没错就是这货-长得跟注射器💉似的" class="headerlink" title="第一步 , 去App Store 或者 github下载开源免费的应用 InjectionIII,没错就是这货,长得跟注射器💉似的"></a>第一步 , 去<code>App Store</code> 或者 <code>github</code>下载开源免费的应用 <code>InjectionIII</code>,没错就是这货,长得跟注射器💉似的</h4><p><img src="http://wangguibin.github.io/post-images/1560695017231.png" alt=""></p>
<h4 id="第二步-打开InjectionIII应用-open-project选择Xcode项目的根目录路径-把File-Watcher钩子打上即可"><a href="#第二步-打开InjectionIII应用-open-project选择Xcode项目的根目录路径-把File-Watcher钩子打上即可" class="headerlink" title="第二步,  打开InjectionIII应用,open project选择Xcode项目的根目录路径, 把File Watcher钩子打上即可"></a>第二步,  打开<code>InjectionIII</code>应用,<code>open project</code>选择Xcode项目的根目录路径, 把<code>File Watcher</code>钩子打上即可</h4><p><img src="http://wangguibin.github.io/post-images/1560695076760.png" alt=""></p>
<p><img src="http://wangguibin.github.io/post-images/1560695064682.png" alt=""></p>
<h4 id="第三步-打开项目添加类似入口的代码或者是监听的代码-值得注意的是Xcode10之后需要修改路径名iOSInjection-bundle修改为iOSInjection10-bundle"><a href="#第三步-打开项目添加类似入口的代码或者是监听的代码-值得注意的是Xcode10之后需要修改路径名iOSInjection-bundle修改为iOSInjection10-bundle" class="headerlink" title="第三步 , 打开项目添加类似入口的代码或者是监听的代码 (!!!: 值得注意的是Xcode10之后需要修改路径名iOSInjection.bundle修改为iOSInjection10.bundle)"></a>第三步 , 打开项目添加类似入口的代码或者是监听的代码 (!!!: 值得注意的是Xcode10之后需要修改路径名<code>iOSInjection.bundle</code>修改为<code>iOSInjection10.bundle</code>)</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">	<span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">  <span class="comment">//Xcode 10.0之前 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">	 [[<span class="built_in">NSBundle</span> bundleWithPath:<span class="string">@"/Applications/InjectionIII.app/Contents/Resources/iOSInjection.bundle"</span>] load];</span><br><span class="line">	<span class="comment">//for tvOS:</span></span><br><span class="line">	[[<span class="built_in">NSBundle</span> bundleWithPath:<span class="string">@"/Applications/InjectionIII.app/Contents/Resources/tvOSInjection.bundle"</span>] load];</span><br><span class="line">	<span class="comment">//Or for macOS:</span></span><br><span class="line">	[[<span class="built_in">NSBundle</span> bundleWithPath:<span class="string">@"/Applications/InjectionIII.app/Contents/Resources/macOSInjection.bundle"</span>] load];</span><br><span class="line"></span><br><span class="line">		<span class="comment">//	Bundle(path: "/Applications/InjectionIII.app/Contents/Resources/iOSInjection.bundle")?.load()</span></span><br><span class="line"><span class="comment">//		//for tvOS:</span></span><br><span class="line"><span class="comment">//	Bundle(path: "/Applications/InjectionIII.app/Contents/Resources/tvOSInjection.bundle")?.load()</span></span><br><span class="line"><span class="comment">//		//Or for macOS:</span></span><br><span class="line"><span class="comment">//	Bundle(path: "/Applications/InjectionIII.app/Contents/Resources/macOSInjection.bundle")?.load()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//Xcode 10.0之后 (有点凑字数的嫌疑,但是我想的是一劳永逸~)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">	 [[<span class="built_in">NSBundle</span> bundleWithPath:<span class="string">@"/Applications/InjectionIII.app/Contents/Resources/iOSInjection10.bundle"</span>] load];</span><br><span class="line">	<span class="comment">//for tvOS:</span></span><br><span class="line">	[[<span class="built_in">NSBundle</span> bundleWithPath:<span class="string">@"/Applications/InjectionIII.app/Contents/Resources/tvOSInjection10.bundle"</span>] load];</span><br><span class="line">	<span class="comment">//Or for macOS:</span></span><br><span class="line">	[[<span class="built_in">NSBundle</span> bundleWithPath:<span class="string">@"/Applications/InjectionIII.app/Contents/Resources/macOSInjection10.bundle"</span>] load];</span><br><span class="line"></span><br><span class="line">		<span class="comment">//	Bundle(path: "/Applications/InjectionIII.app/Contents/Resources/iOSInjection10.bundle")?.load()</span></span><br><span class="line"><span class="comment">//		//for tvOS:</span></span><br><span class="line"><span class="comment">//	Bundle(path: "/Applications/InjectionIII.app/Contents/Resources/tvOSInjection10.bundle")?.load()</span></span><br><span class="line"><span class="comment">//		//Or for macOS:</span></span><br><span class="line"><span class="comment">//	Bundle(path: "/Applications/InjectionIII.app/Contents/Resources/macOSInjection10.bundle")?.load()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第四步-运行代码-修改局部UI布局或者属性-command-s保存一下看效果-貌似不用保存也能看到效果…-真的是有点强大-PS-从此告别coding五分钟-编译两小时-提升效率杠杠的"><a href="#第四步-运行代码-修改局部UI布局或者属性-command-s保存一下看效果-貌似不用保存也能看到效果…-真的是有点强大-PS-从此告别coding五分钟-编译两小时-提升效率杠杠的" class="headerlink" title="第四步 , 运行代码,修改局部UI布局或者属性,command+s保存一下看效果,貌似不用保存也能看到效果… 真的是有点强大(PS: 从此告别coding五分钟  编译两小时 提升效率杠杠的)"></a>第四步 , 运行代码,修改局部UI布局或者属性,command+s保存一下看效果,貌似不用保存也能看到效果… 真的是有点强大<code>(PS: 从此告别coding五分钟  编译两小时 提升效率杠杠的)</code></h4><p>首次运行代码可以看到控制台打印,如图则是正确的打印:</p>
<p><img src="http://wangguibin.github.io/post-images/1560695117490.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)injected&#123;</span><br><span class="line">	&#x2F;&#x2F;写在这个方法里调用你的UI修改才会生效 command+s 检查监听到文件的修改 然后重新绘制UI </span><br><span class="line">		&#x2F;&#x2F;[self setup];</span><br><span class="line">		[self viewDidLoad]; &#x2F;&#x2F;即调用生效的地方 Debug的时候才会调用 无须担心项目上线后的影响 开发调试完可移除</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最后-大功告成-甩上一张gif查看效果"><a href="#最后-大功告成-甩上一张gif查看效果" class="headerlink" title="最后, 大功告成,甩上一张gif查看效果"></a>最后, 大功告成,甩上一张gif查看效果</h4><p><img src="http://wangguibin.github.io/post-images/1560695104658.gif" alt=""></p>
]]></content>
      <tags>
        <tag>效率</tag>
        <tag>工具</tag>
        <tag>Xcode</tag>
        <tag>热重载</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS加载本地html文件锚点定位处理</title>
    <url>/hexo-github-action/2021/06/13/iOS%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0html%E6%96%87%E4%BB%B6%E9%94%9A%E7%82%B9%E5%AE%9A%E4%BD%8D%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>最近听好几位同学说起这个问题,碰巧我也遇到了这个问题,所以有必要做个记录~</p>
<a id="more"></a>

<h2 id="加载本地HTML文件"><a href="#加载本地HTML文件" class="headerlink" title="加载本地HTML文件"></a>加载本地HTML文件</h2><p> 加载本地的<code>html</code>文件必然是要读取它的文件地址,一般来说是放到项目的资源文件目录下,然后<code>mainBundle</code>加载即可,至于SDK内原理一致,不是本文讨论的范畴了~<br>(⚠️注意: html文件属于引用文件不参与编译,所以拖进项目时不要勾选☑️group,而是下面那个引用folder )</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"demo"</span> ofType:<span class="string">@"html"</span>];</span><br></pre></td></tr></table></figure>

<h2 id="锚点参数处理"><a href="#锚点参数处理" class="headerlink" title="锚点参数处理"></a>锚点参数处理</h2><p><strong>如上述代码加载html文件是没啥毛病的,也能加载出来,但是并不满足锚点跳转到页面某个位置的需求</strong></p>
<h3 id="path后拼接锚点参数"><a href="#path后拼接锚点参数" class="headerlink" title="path后拼接锚点参数"></a>path后拼接锚点参数</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *fileURLString = [path stringByAppendingFormat:<span class="string">@"#third"</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,fileURLString);</span><br></pre></td></tr></table></figure>
<p><strong>打印之后发现缺少 <code>file://</code> 协议头,用这个得拼协议头,于是:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *filePath = [<span class="built_in">NSString</span> stringByAppendingString:<span class="string">@"file://%@"</span>,fileURLString];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, filePath);</span><br></pre></td></tr></table></figure>
<p><strong>打印之后发现URL结果是正确✅的,有协议头也有传参, 这就可以组装URL加载webView了,可是一运行结果页面都加载不出来~</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> fileURLWithPath: filePath]; </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, URL.absoluteString);</span><br></pre></td></tr></table></figure>
<p><strong>打印发现<code>#third</code> 会被转成 <code>%23third</code>,这貌似就陷入难题了,因为前面无论如何努力,最终都要通过URL进行页面加载~  只能另辟蹊径(js注入大法好)了</strong></p>
<h2 id="解决方案①"><a href="#解决方案①" class="headerlink" title="解决方案①"></a>解决方案①</h2><p>在页面加载完成之后,调用js注入的方法:</p>
<ol>
<li>利用<code>location.hash</code>属性进行锚点定位<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.webView evaluateJavaScript:<span class="string">@"window.location.hash='#third'"</span> completionHandler:^(<span class="keyword">id</span> _Nullable, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">  &#125;];</span><br></pre></td></tr></table></figure></li>
<li>利用<code>dom</code>元素滚动方法<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.webView evaluateJavaScript:<span class="string">@"window.document.getElementById('third').scrollIntoView()"</span> completionHandler:^(<span class="keyword">id</span> _Nullable, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure>
<h2 id="解决方案②-终极"><a href="#解决方案②-终极" class="headerlink" title="解决方案② (终极)"></a>解决方案② (终极)</h2>这个方法最简单~ 最native~<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *lastURL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"#third"</span> relativeToURL:URL];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,lastURL.absoluteString);</span><br></pre></td></tr></table></figure>
如此传参就不会存在<code>#</code>被转<code>%23</code>的问题了 </li>
</ol>
<p><code>demo.html</code>的代码在这里 <a href="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210613190555.html" target="_blank" rel="noopener">demo代码</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>大前端</tag>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS如何简单实现绘制爱心?</title>
    <url>/hexo-github-action/2020/03/22/iOS%E5%A6%82%E4%BD%95%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E7%BB%98%E5%88%B6%E7%88%B1%E5%BF%83/</url>
    <content><![CDATA[<blockquote>
<p>灵感来源于前端CSS画红心的原理  <a href="https://www.cnblogs.com/yingzi1028/p/6248937.html" target="_blank" rel="noopener">参考</a></p>
</blockquote>
<p><img src="https://github.com/WangGuibin/MyFilesRepo/blob/master/images/heart_demo.png?raw=true" alt=""></p>
<a id="more"></a>



<h1 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    灵感来自于前端CSS画红心的原理: 一个正方形 + 两个圆 + 整体旋转一定的角度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line">IB_DESIGNABLE</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WGBHeartView</span> : <span class="title">UIView</span></span></span><br><span class="line"><span class="comment">//❤心有多大?</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) IBInspectable <span class="built_in">CGFloat</span> heartSize;</span><br><span class="line"><span class="comment">//❤心的颜色?</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) IBInspectable <span class="built_in">UIColor</span> *heartColor;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"WGBHeartView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WGBHeartView</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIView</span> *bottomView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIView</span> *leftView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIView</span> *rightView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WGBHeartView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initConfig];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)coder</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:coder];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> initConfig];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)initConfig&#123;</span><br><span class="line">        <span class="comment">//默认值</span></span><br><span class="line">    <span class="keyword">self</span>.heartSize = <span class="number">150.0</span>;</span><br><span class="line">    <span class="keyword">self</span>.heartColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    [<span class="keyword">self</span> addSubview: <span class="keyword">self</span>.bottomView];</span><br><span class="line">    [<span class="keyword">self</span> addSubview: <span class="keyword">self</span>.leftView];</span><br><span class="line">    [<span class="keyword">self</span> addSubview: <span class="keyword">self</span>.rightView];</span><br><span class="line">    <span class="comment">//提前旋转45度</span></span><br><span class="line">    <span class="keyword">self</span>.transform = <span class="built_in">CGAffineTransformMakeRotation</span>(M_PI_4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除设置背景色 </span></span><br><span class="line">- (<span class="keyword">void</span>)setBackgroundColor:(<span class="built_in">UIColor</span> *)backgroundColor&#123;</span><br><span class="line">    backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">    [<span class="keyword">super</span> setBackgroundColor:backgroundColor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setHeartSize:(<span class="built_in">CGFloat</span>)heartSize&#123;</span><br><span class="line">    _heartSize = heartSize;</span><br><span class="line">    <span class="built_in">CGFloat</span> partSize = heartSize/<span class="number">3.0</span>;</span><br><span class="line">    <span class="keyword">self</span>.bottomView.frame = <span class="built_in">CGRectMake</span>(partSize, partSize, partSize*<span class="number">2</span> , partSize*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">self</span>.leftView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, partSize, partSize*<span class="number">2</span> , partSize*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">self</span>.rightView.frame = <span class="built_in">CGRectMake</span>(partSize, <span class="number">0</span>, partSize*<span class="number">2</span> , partSize*<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.leftView.layer.cornerRadius = partSize;</span><br><span class="line">    <span class="keyword">self</span>.rightView.layer.cornerRadius = partSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setHeartColor:(<span class="built_in">UIColor</span> *)heartColor&#123;</span><br><span class="line">    _heartColor = heartColor;</span><br><span class="line">    <span class="keyword">self</span>.bottomView.backgroundColor = heartColor;</span><br><span class="line">    <span class="keyword">self</span>.leftView.backgroundColor = heartColor;</span><br><span class="line">    <span class="keyword">self</span>.rightView.backgroundColor = heartColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">///MARK:- lazy load</span></span><br><span class="line">- (<span class="built_in">UIView</span> *)bottomView&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_bottomView) &#123;</span><br><span class="line">        _bottomView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectZero</span>];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:_bottomView];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _bottomView;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">UIView</span> *)leftView&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_leftView) &#123;</span><br><span class="line">        _leftView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectZero</span>];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:_leftView];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _leftView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)rightView&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_rightView) &#123;</span><br><span class="line">        _rightView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectZero</span>];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:_rightView];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _rightView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/WangGuibin/MyFilesRepo/blob/master/images/heart2IB.png?raw=true" alt="IB设置的过程"></p>
<h1 id="简单调用如下"><a href="#简单调用如下" class="headerlink" title="简单调用如下:"></a>简单调用如下:</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">WGBHeartView *heartView = [[WGBHeartView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span> , <span class="number">100</span>)];</span><br><span class="line">heartView.heartColor = [<span class="built_in">UIColor</span> blackColor];<span class="comment">//默认颜色是红色</span></span><br><span class="line">heartView.heartSize = <span class="number">100</span>; <span class="comment">//这个尺寸最好是设置与视图宽高一致 生成的爱心❤️比较规则</span></span><br><span class="line">[<span class="keyword">self</span>.view addSubview: heartView];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> heartWH = <span class="number">50.0</span>f;</span><br><span class="line">    <span class="built_in">CGFloat</span> margin = <span class="number">15.0</span>f;</span><br><span class="line">    WGBHeartView *heartItemView = [[WGBHeartView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">20</span> + (heartWH+margin)*i,   <span class="number">250</span>, heartWH , heartWH)];</span><br><span class="line">    heartItemView.heartColor = [<span class="built_in">UIColor</span> colorWithRed:arc4random()%<span class="number">256</span>/<span class="number">255.0</span>f green:arc4random()%<span class="number">256</span>/<span class="number">255.0</span>f  blue:arc4random()%<span class="number">256</span>/<span class="number">255.0</span>f alpha:<span class="number">1.0</span>f];</span><br><span class="line">    heartItemView.heartSize = heartWH;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview: heartItemView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>大前端</tag>
        <tag>CSS</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发如何给自己的App增加捷径自定义拓展</title>
    <url>/hexo-github-action/2020/11/28/iOS%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84App%E5%A2%9E%E5%8A%A0%E6%8D%B7%E5%BE%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<blockquote>
<p>这不是一句两句话能描述清楚的,所以直接进入一图胜千言模式 。</p>
</blockquote>
<p>玩捷径的时候是不是还在为没有好用的操作或者鸡肋的操作而苦恼呢，自定义捷径拓展可以解决这个问题，只实现要你自己想要的功能，就像是一个黑盒，一顿输入一顿输出就完事儿，压根不知道里面发生了什么，现在要做的就是自己去实现这个黑盒。</p>
<a id="more"></a>

<img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/1.png" style="zoom:50%;" />

<p> 首先添加<code>Target</code> 找到<code>Intent Extension</code> 添加就完事儿了</p>
<img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/2.png" style="zoom:50%;" />

<p>下一步下一步,弹窗的话就点<code>Activited</code>,接下来再创建<code>SiriKit Intent Defintion File</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/3.png" alt=""></p>
<p>起名字没啥讲究,一般一个项目就一个这玩意儿,默认的就完事儿了 </p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/4.png" alt=""></p>
<p>这里开始就有些操作了,添加一个<code>intent</code>项目 ,填写如图的一些表单信息,勾选重要的几项,添加自定义参数等</p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/5.png" alt=""></p>
<p>如果需要回调处理,响应结果这里也需要填写,创建返回结果的字段/类型,生成模板文件的时候会生成对应的返回方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/6.png" alt=""></p>
<p>编译后查看如图位置,点击箭头进去,即可查看生成的模板文件,只有头文件查看API接口(苹果一贯的闭源作风)</p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/7.png" alt=""></p>
<p>看看👀 就这就这: </p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/8.png" alt=""></p>
<p>然后就去找到一开始创建<code>Target</code>自动生成的文件<code>IntentHandler.m</code>去实现对应的<code>intent</code>处理</p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/9.png" alt=""></p>
<p>每个intent的处理,风格有点相似,只是类型不同而已,大概这就是模板文件的魅力吧</p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/10.png" alt=""></p>
<p>到这一步处理完,就完事了,然后就是运行主App,验证结果了(最好是卸载重新安装)</p>
<p>运行App之后,打开捷径App,新建一个快捷指令,如图: </p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/Xnip2020-11-28_11-12-49.png" alt=""></p>
<p>然后找到自己开发的App</p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/Xnip2020-11-28_11-13-24.png" alt=""></p>
<p>那就拿这个<code>图标易容术</code><a href="这是我的一个开源项目,是基于iOS14利用WebClip技术通过生成mobileConfig描述文件来替换应用图标的一种实现方案,项目地址[WebClipChangeAppLogo](https://github.com/WangGuibin/WebClipChangeAppLogo)">^1</a>来举个例子吧 </p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/Xnip2020-11-28_11-13-41.png" alt=""></p>
<p>写的一个沙盒存储,基于<code>NSUserDefaults</code>[^2]实现的,如果想要卸载App也能不丢失数据,那实现方案只能更换钥匙串或者iCloud等,但是这个操作是基于这个应用的,我也不希望我开发的App被人卸载,虽说有点流氓操作,但是不想用就别用的原则就是这么简单粗暴~ </p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/Xnip2020-11-28_11-13-50.png" alt=""></p>
<p>这个描述就是一开始创建<code>Intent</code>时表单里的<code>description</code>字段,提前编辑好再copy过去,排版会好看些.</p>
<p>存储功能展示</p>
<img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/Xnip2020-11-28_11-15-00.png" style="zoom:67%;" />

<p>查数据</p>
<img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/Xnip2020-11-28_11-15-33.png" style="zoom:67%;" />



<p>整体开发下来好像没有什么很困难的东西,只不过国内目前还很少对应的中文资料,只能硬着头皮找英文资料取经~ </p>
<p>参考资料: </p>
<ul>
<li>Alex Hay <a href="https://github.com/mralexhay/ShortcutsExample" target="_blank" rel="noopener">https://github.com/mralexhay/ShortcutsExample</a></li>
<li><code>Toolbox pro</code>的作者的博客 <a href="https://toolboxpro.app/blog" target="_blank" rel="noopener">Adding Shortcuts To An App</a></li>
</ul>
<p>[^2]: apple官方文档 <a href="https://developer.apple.com/documentation/foundation/nsuserdefaults" target="_blank" rel="noopener">NSUserDefaults</a></p>
]]></content>
      <tags>
        <tag>效率</tag>
        <tag>工具</tag>
        <tag>iOS</tag>
        <tag>捷径</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS日志埋点方案</title>
    <url>/hexo-github-action/2024/11/27/iOS%E6%97%A5%E5%BF%97%E5%9F%8B%E7%82%B9%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<a id="more"></a>
<p>采用主流的日志库方案作为基础依赖</p>
<p><code>CocoaLumberjack</code></p>
<p>然后自己封装一层调用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CocoaLumberjack/CocoaLumberjack.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OILogError(frmt, ...)   OI_LOG_MAYBE(DDLogLevelError, DDLogFlagError,   frmt, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OILogWarn(frmt, ...)    OI_LOG_MAYBE(DDLogLevelWarning, DDLogFlagWarning, frmt, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OILogInfo(frmt, ...)    OI_LOG_MAYBE(DDLogLevelInfo, DDLogFlagInfo,    frmt, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OILogDebug(frmt, ...)   OI_LOG_MAYBE(DDLogLevelDebug, DDLogFlagDebug,   frmt, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OI_LOG_MAYBE(lvl, flg, frmt, ...) \</span></span><br><span class="line">    <span class="keyword">if</span> (lvl &amp; flg) &#123; \</span><br><span class="line">        [DDLog log:<span class="literal">YES</span> level:lvl flag:flg context:<span class="number">0</span> file:__FILE__ function:__FUNCTION__ line:__LINE__ tag:<span class="number">0</span> format:(frmt), ## __VA_ARGS__]; \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">OILog</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)defaultLogFilePath;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#import <span class="meta-string">"OILog.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"OILogFormatter.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">OILog</span></span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//无需主动调用 把这些代码加进项目即可, app启动无感调用</span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    @weakify(<span class="keyword">self</span>);</span><br><span class="line">    __block <span class="keyword">id</span> observer = [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserverForName:<span class="built_in">UIApplicationDidFinishLaunchingNotification</span> object:<span class="literal">nil</span> queue:<span class="literal">nil</span> usingBlock:^(<span class="built_in">NSNotification</span> * _Nonnull note) &#123;</span><br><span class="line">        @strongify(<span class="keyword">self</span>);</span><br><span class="line">        [<span class="keyword">self</span> didFinishLaunchingOnLoad:note];</span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:observer];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)didFinishLaunchingOnLoad:(<span class="built_in">NSNotification</span> *)noti &#123;</span><br><span class="line">    [<span class="keyword">self</span> initSDK];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)initSDK &#123;</span><br><span class="line">    [DDLog removeAllLoggers];</span><br><span class="line">    </span><br><span class="line">    OILogFormatter *logFormatter = [[OILogFormatter alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">//     add logger for Terminal output or Xcode console output.</span></span><br><span class="line">    DDOSLogger *ttyLogger = [DDOSLogger sharedInstance];</span><br><span class="line">    ttyLogger.logFormatter = logFormatter;</span><br><span class="line"><span class="comment">//    ttyLogger.colorsEnabled = YES;</span></span><br><span class="line">    [DDLog addLogger:ttyLogger withLevel:DDLogLevelAll];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// add logger for Cached</span></span><br><span class="line">    DDLogFileManagerDefault *fileManager = [[DDLogFileManagerDefault alloc] initWithLogsDirectory:[<span class="keyword">self</span> defaultLogFilePath]];</span><br><span class="line">    DDFileLogger *fileLogger = [[DDFileLogger alloc] initWithLogFileManager:fileManager];</span><br><span class="line">    <span class="comment">// 刷新频率为一天，超过一天会生成新的log文件</span></span><br><span class="line">    fileLogger.rollingFrequency = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">    <span class="comment">// 文件大小阈值，超过该大小，也会生成新的log文件</span></span><br><span class="line">    fileLogger.maximumFileSize = <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">// 为0.则表示不限制文件个数</span></span><br><span class="line">    fileLogger.logFileManager.maximumNumberOfLogFiles = <span class="number">0</span>;</span><br><span class="line">    fileLogger.logFormatter = logFormatter;</span><br><span class="line">    <span class="comment">// info以上上报日志</span></span><br><span class="line">    [DDLog addLogger:fileLogger withLevel:DDLogLevelInfo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)defaultLogFilePath &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) objectAtIndex:<span class="number">0</span>] stringByAppendingPathComponent:<span class="string">@"OILog"</span>];</span><br><span class="line">    <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (![fileManager fileExistsAtPath:filePath]) &#123;</span><br><span class="line">        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">        [fileManager createDirectoryAtPath:filePath withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:&amp;error];</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            OILogDebug(<span class="string">@"日志目录创建失败！！！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CocoaLumberjack/CocoaLumberjack.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">OILogFormatter</span> : <span class="title">NSObject</span>&lt;<span class="title">DDLogFormatter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#import <span class="meta-string">"OILogFormatter.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">OILogFormatter</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)formatLogMessage:(DDLogMessage *)logMessage &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *logLevel;</span><br><span class="line">    <span class="keyword">switch</span> (logMessage.flag) &#123;</span><br><span class="line">        <span class="keyword">case</span> DDLogFlagDebug:</span><br><span class="line">            logLevel = <span class="string">@"DEBUG"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DDLogFlagInfo:</span><br><span class="line">            logLevel = <span class="string">@"INFO"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DDLogFlagWarning:</span><br><span class="line">            logLevel = <span class="string">@"WARN"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DDLogFlagError:</span><br><span class="line">            logLevel = <span class="string">@"ERROR"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DDLogFlagVerbose:</span><br><span class="line">            logLevel = <span class="string">@"VERBOSE"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            logLevel = <span class="string">@"VERBOSE"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSDateFormatter</span> *logDateFormatter;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        logDateFormatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">        logDateFormatter.dateFormat = <span class="string">@"yyyy-MM-dd HH:mm:ss:SSS"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">  	<span class="comment">/// 此处可以使用其他APM日志收集工具 进行收集日志埋点 打印的时候区分一下level 后台查埋点的时候就可以进行区分查找</span></span><br><span class="line">    <span class="comment">///  从而更方便定位生产问题</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"\n%@ *** [%@] %@ (line: %lu)\n*** %@\n"</span>,</span><br><span class="line">            [logDateFormatter stringFromDate:logMessage.timestamp],</span><br><span class="line">            logLevel,</span><br><span class="line">            logMessage.function,</span><br><span class="line">            logMessage.line,</span><br><span class="line">            logMessage.message];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>日志</tag>
        <tag>埋点</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS的AES 128加密解密的两种模式(CBC和ECB)</title>
    <url>/hexo-github-action/2020/03/09/iOS%E7%9A%84AES%20128%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F(CBC%E5%92%8CECB)/</url>
    <content><![CDATA[<p> **关于AES加密解密原理什么的不在本篇的范畴,网上很多大牛总结的很好了 </p>
 <a id="more"></a>

<p> 请参考<a href="https://blog.csdn.net/qq_38289815/article/details/80900813" target="_blank" rel="noopener">AES加密过程详解</a>**</p>
<p><strong>1. 苹果默认是<code>CBC</code>模式的,有文档为证:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">    @enum       CCOptions</span></span><br><span class="line"><span class="comment">    @abstract   Options flags, passed to CCCryptorCreate().</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @constant   kCCOptionPKCS7Padding   Perform PKCS7 padding.</span></span><br><span class="line"><span class="comment">    @constant   kCCOptionECBMode        Electronic Code Book Mode.</span></span><br><span class="line"><span class="comment">                                        Default is CBC.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    <span class="comment">/* options for block ciphers */</span></span><br><span class="line">    kCCOptionPKCS7Padding   = <span class="number">0x0001</span>,</span><br><span class="line">    kCCOptionECBMode        = <span class="number">0x0002</span></span><br><span class="line">    <span class="comment">/* stream ciphers currently have no options */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>2. 一般来说,我们客户端单纯只是做做业务的话,接触的加密算法或者需要我们去深入底层的东西少之又少,通常是后端提供加密的<code>key</code>(秘钥)和<code>iv</code>(偏移量)给前端小伙伴们使用.</strong> </p>
<p><strong>3. <code>CBC</code>和<code>EBC</code>,在调用方看来,仅仅只是一个枚举值的区别</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CBC模式</span></span><br><span class="line">kCCOptionPKCS7Padding</span><br><span class="line"><span class="comment">//ECB模式</span></span><br><span class="line">kCCOptionPKCS7Padding | kCCOptionECBMode</span><br></pre></td></tr></table></figure>
<p><strong>4. 下面👇贴一段<code>ECB</code>加密解密的代码</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSData</span> (<span class="title">AESEncryption</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AES128加密</span></span><br><span class="line">- (<span class="built_in">NSData</span> *)AES128ParmEncryptWithKey:(<span class="built_in">NSString</span> *)key iv:(<span class="built_in">NSString</span> *)iv</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> keyPtr[kCCKeySizeAES128+<span class="number">1</span>];</span><br><span class="line">    bzero(keyPtr, <span class="keyword">sizeof</span>(keyPtr));</span><br><span class="line">    [key getCString:keyPtr maxLength:<span class="keyword">sizeof</span>(keyPtr) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> ivPtr[kCCBlockSizeAES128 + <span class="number">1</span>];</span><br><span class="line">    bzero(ivPtr, <span class="keyword">sizeof</span>(ivPtr));</span><br><span class="line">    [iv getCString:ivPtr maxLength:<span class="keyword">sizeof</span>(ivPtr) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSUInteger</span> dataLength = [<span class="keyword">self</span> length];</span><br><span class="line">    size_t bufferSize = dataLength + kCCBlockSizeAES128;</span><br><span class="line">    <span class="keyword">void</span> *buffer = malloc(bufferSize);</span><br><span class="line">    size_t numBytesEncrypted = <span class="number">0</span>;</span><br><span class="line">    CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128,</span><br><span class="line">                                          kCCOptionPKCS7Padding | kCCOptionECBMode,</span><br><span class="line">                                          keyPtr, kCCBlockSizeAES128,</span><br><span class="line">                                          ivPtr,</span><br><span class="line">                                          [<span class="keyword">self</span> bytes], dataLength,</span><br><span class="line">                                          buffer, bufferSize,</span><br><span class="line">                                          &amp;numBytesEncrypted);</span><br><span class="line">    <span class="keyword">if</span> (cryptStatus == kCCSuccess) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSData</span> dataWithBytesNoCopy:buffer length:numBytesEncrypted];</span><br><span class="line">    &#125;</span><br><span class="line">    free(buffer);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line">- (<span class="built_in">NSData</span> *)AES128ParmDecryptWithKey:(<span class="built_in">NSString</span> *)key iv:(<span class="built_in">NSString</span> *)iv</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> keyPtr[kCCKeySizeAES128 + <span class="number">1</span>];</span><br><span class="line">    bzero(keyPtr, <span class="keyword">sizeof</span>(keyPtr));</span><br><span class="line">    [key getCString:keyPtr maxLength:<span class="keyword">sizeof</span>(keyPtr) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> ivPtr[kCCBlockSizeAES128 + <span class="number">1</span>];</span><br><span class="line">    bzero(ivPtr, <span class="keyword">sizeof</span>(ivPtr));</span><br><span class="line">    [iv getCString:ivPtr maxLength:<span class="keyword">sizeof</span>(ivPtr) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSUInteger</span> dataLength = [<span class="keyword">self</span> length];</span><br><span class="line">    size_t bufferSize = dataLength + kCCBlockSizeAES128;</span><br><span class="line">    <span class="keyword">void</span> *buffer = malloc(bufferSize);</span><br><span class="line">    size_t numBytesDecrypted = <span class="number">0</span>;</span><br><span class="line">    CCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt, kCCAlgorithmAES128,</span><br><span class="line">                                          kCCOptionPKCS7Padding|kCCOptionECBMode,</span><br><span class="line">                                          keyPtr, kCCBlockSizeAES128,</span><br><span class="line">                                          ivPtr,</span><br><span class="line">                                          [<span class="keyword">self</span> bytes], dataLength,</span><br><span class="line">                                          buffer, bufferSize,</span><br><span class="line">                                          &amp;numBytesDecrypted);</span><br><span class="line">    <span class="keyword">if</span> (cryptStatus == kCCSuccess) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSData</span> dataWithBytesNoCopy:buffer length:numBytesDecrypted];</span><br><span class="line">    &#125;</span><br><span class="line">    free(buffer);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><strong>5. 最后在<a href="https://github.com/WangGuibin/TestDemo/tree/master/TestAES128/TestAES128" target="_blank" rel="noopener">Demo地址</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>关于AppleScript脚本的一些使用总结</title>
    <url>/hexo-github-action/2021/01/23/%E5%85%B3%E4%BA%8EAppleScript%E8%84%9A%E6%9C%AC%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="1-暗黑模式切换"><a href="#1-暗黑模式切换" class="headerlink" title="1. 暗黑模式切换"></a>1. 暗黑模式切换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tell application &quot;System Events&quot;</span><br><span class="line">	tell appearance preferences</span><br><span class="line">		set dark mode to not dark mode</span><br><span class="line">	end tell</span><br><span class="line">end tell</span><br></pre></td></tr></table></figure>

<h2 id="2-发送邮件"><a href="#2-发送邮件" class="headerlink" title="2. 发送邮件"></a>2. 发送邮件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--设置参数</span><br><span class="line">set recipientName to &quot;xxx&quot; --收件人</span><br><span class="line">set recipientAddress to &quot;xxx@gmail.com&quot; --收件地址</span><br><span class="line">set mailSubject to &quot;使用AppleScript脚本自动化发邮件&quot; --邮件主题</span><br><span class="line">set mailContent to &quot;这是一封来自AppleScript发出的测试邮件,请勿回复!!!&quot; --邮件内容</span><br><span class="line"></span><br><span class="line">--执行发送邮件操作</span><br><span class="line">tell application &quot;Mail&quot;</span><br><span class="line">	</span><br><span class="line">	--创建信息</span><br><span class="line">	set theMessage to make new outgoing message with properties &#123;subject:mailSubject, content:mailContent, visible:true&#125;</span><br><span class="line">	</span><br><span class="line">	--发送信息</span><br><span class="line">	tell theMessage</span><br><span class="line">		make new to recipient with properties &#123;name:recipientName, address:recipientAddress&#125;</span><br><span class="line"></span><br><span class="line">		send</span><br><span class="line">		</span><br><span class="line">	end tell</span><br><span class="line">end tell</span><br></pre></td></tr></table></figure>

<h2 id="3-弹窗相关"><a href="#3-弹窗相关" class="headerlink" title="3. 弹窗相关"></a>3. 弹窗相关</h2><p>一个按钮默认样式<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/btn1s.png" alt="一个按钮"><br>一个按钮加空格格式化样式<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/btn1l.png" alt=""><br>两个按钮样式<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/btn2.png" alt=""><br>三个按钮样式<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/btn3.png" alt=""><br>没有icon样式<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/Xnip2021-01-23_22-02-53.png" alt=""></p>
<p>反正这个dialog感觉就很安卓</p>
<h4 id="a-普通弹窗"><a href="#a-普通弹窗" class="headerlink" title="a. 普通弹窗"></a>a. 普通弹窗</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; --默认带上取消和确认按钮</span><br><span class="line">--设置一个OK按钮以及默认选中</span><br><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; buttons &quot;OK&quot; default button &quot;OK&quot;</span><br><span class="line">--效果同上</span><br><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; buttons &quot;OK&quot; default button 1</span><br><span class="line">-- 自定义多个按钮 (最多允许使用三个按钮。)</span><br><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; buttons &#123;&quot;OK&quot;,&quot;Cancel&quot;,&quot;HAHA&quot;&#125; default button &quot;OK&quot;</span><br></pre></td></tr></table></figure>
<p>或者alert 这个就比较iOS<br><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/alertl.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 与 dialog 类似布局上有所不同,按钮是居中纵向排列</span><br><span class="line">display alert &quot;hahhaha&quot; buttons &#123;&quot;OK&quot;, &quot;NO&quot;, &quot;YES&quot;&#125; default button 2</span><br></pre></td></tr></table></figure>

<h4 id="b-带图标的弹窗"><a href="#b-带图标的弹窗" class="headerlink" title="b. 带图标的弹窗"></a>b. 带图标的弹窗</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--可以指定对话框的图标，icon 图标可以指定 note (普通) &#x2F;stop (危险) &#x2F;caution (警告) 三种类型 或者指向文件路径</span><br><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; buttons &#123;&quot;No&quot;, &quot;Yes&quot;&#125; default button &quot;Yes&quot; with icon caution</span><br><span class="line"></span><br><span class="line">-- 自定义图标 注意图片格式应该为.icns格式的 可以去应用xx.app&#x2F;contens&#x2F;resources下面去找</span><br><span class="line">set fileName to choose file &quot;Select a Folder&quot;</span><br><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; buttons &#123;&quot;No&quot;, &quot;Yes&quot;&#125; default button &quot;Yes&quot; with icon file fileName</span><br><span class="line"></span><br><span class="line">-- 指定路径 桌面路径 + 文件名</span><br><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; buttons &#123;&quot;No&quot;, &quot;Yes&quot;&#125; default button &quot;Yes&quot; with icon file ((path to desktop as text) &amp; &quot;AppIcon.icns&quot;)</span><br><span class="line"></span><br><span class="line">-- 或者这样</span><br><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; buttons &#123;&quot;No&quot;, &quot;Yes&quot;&#125; default button &quot;Yes&quot; with icon alias ((path to desktop as text) &amp; &quot;AppIcon.icns&quot;)</span><br><span class="line">-- 转化一下</span><br><span class="line">-- set fileName to ((path to desktop as text) &amp; &quot;AppIcon.icns&quot;)</span><br><span class="line">set fileName to &quot;Macintosh HD:Users:wangguibin:Desktop:AppIcon.icns&quot;</span><br><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; buttons &#123;&quot;No&quot;, &quot;Yes&quot;&#125; default button &quot;Yes&quot; with icon file fileName</span><br><span class="line"></span><br><span class="line">-- 直接使用App Store的图标</span><br><span class="line">set fileName to &quot;Macintosh HD:System:Applications:App Store.app:Contents:Resources:AppIcon.icns&quot;</span><br><span class="line">display dialog &quot;这是内容&quot; with title &quot;这是标题&quot; buttons &#123;&quot;No&quot;, &quot;Yes&quot;&#125; default button &quot;Yes&quot; with icon file fileName</span><br></pre></td></tr></table></figure>

<h4 id="c-弹窗输入框表单"><a href="#c-弹窗输入框表单" class="headerlink" title="c. 弹窗输入框表单"></a>c. 弹窗输入框表单</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display dialog &quot;表单&quot; default answer &quot;输入框内容&quot; buttons &#123;&quot;按钮1&quot;, &quot;按钮2&quot;, &quot;按钮3&quot;&#125; default button 1 with icon caution</span><br><span class="line">copy the result as list to &#123;text_returned, button_pressed&#125; --返回一个列表&#123;文本,按钮&#125;</span><br></pre></td></tr></table></figure>


<h4 id="d-选择列表弹窗"><a href="#d-选择列表弹窗" class="headerlink" title="d. 选择列表弹窗"></a>d. 选择列表弹窗</h4><p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/selecScriptList.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 默认单选 默认不选中的话直接设置 &#96;default items &#123;&#125;&#96; 即可</span><br><span class="line">choose from list &#123;&quot;Shell&quot;, &quot;Ruby&quot;, &quot;Python&quot;, &quot;Applescript&quot;, &quot;Javascript&quot;, &quot;Perl&quot;, &quot;Dart&quot;&#125; with title &quot;日期选择&quot; with prompt &quot;选择一门脚本语言&quot; OK button name &quot;学习&quot; cancel button name &quot;放弃&quot; default items &#123;&quot;Python&quot;&#125;</span><br><span class="line"></span><br><span class="line">-- 多选</span><br><span class="line">choose from list &#123;&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;&#125; with title &quot;日期选择&quot; with prompt &quot;选择一天或者多天&quot; OK button name &quot;确认选择&quot; cancel button name &quot;不选&quot; default items &#123;&quot;Monday&quot;&#125; with multiple selections allowed</span><br></pre></td></tr></table></figure>

<h4 id="e-选择文件和目录"><a href="#e-选择文件和目录" class="headerlink" title="e. 选择文件和目录"></a>e. 选择文件和目录</h4><p>选择文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 选择文件 获取文件名 没有的话不会创建 只是返回一个路径 </span><br><span class="line">choose file name with prompt &quot;获取文件名&quot;</span><br></pre></td></tr></table></figure>
<p>选择目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 注：其中prompt和default location参数同Choose File Name;另外invisibles指定显示隐藏 文件,multiple selections allowed可以多选,showing package contents显示包内容,省略时 则不显示隐藏文件&#x2F;不可多选&#x2F;不显示包内容</span><br><span class="line">choose folder with prompt &quot;选择目录&quot; default location file &quot;Macintosh HD:Users:mac:Desktop&quot; with invisibles, multiple selections allowed and showing package contents</span><br></pre></td></tr></table></figure>

<h2 id="4-通知"><a href="#4-通知" class="headerlink" title="4. 通知"></a>4. 通知</h2><p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/notepng.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 声音文件都在&#x2F;System&#x2F;Library&#x2F;Sounds </span><br><span class="line">-- 其中Funk , Glass, Ping 这几种好听一些 </span><br><span class="line">display notification &quot;通知内容通知内容通知内容通知内容&quot; with title &quot;通知主标题&quot; subtitle &quot;副标题&quot; sound name &quot;Funk&quot;</span><br></pre></td></tr></table></figure>


<h2 id="5-Shell-调用-AppleScript"><a href="#5-Shell-调用-AppleScript" class="headerlink" title="5. Shell 调用 AppleScript"></a>5. Shell 调用 AppleScript</h2><p>适合简短的脚本语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意单引号shell无法传参 如需传参则需要使用双引号\转义</span></span><br><span class="line">osascript -e <span class="string">'display notification "通知内容通知内容通知内容通知内容" with title "通知主标题" subtitle "副标题" sound name "Funk"'</span></span><br></pre></td></tr></table></figure>
<p>适合多行脚本,增加可读性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#简单粗暴 直接使用重定向包含applescript语句即可</span></span><br><span class="line">osascript &lt;&lt;EOF</span><br><span class="line"><span class="built_in">set</span> fileName to <span class="string">"Macintosh HD:System:Applications:App Store.app:Contents:Resources:AppIcon.icns"</span></span><br><span class="line">display dialog <span class="string">"这是内容"</span> with title <span class="string">"这是标题"</span> buttons &#123;<span class="string">"No"</span>, <span class="string">"Yes"</span>&#125; default button <span class="string">"Yes"</span> with icon file fileName</span><br><span class="line"><span class="built_in">set</span> btn to (button returned of result)</span><br><span class="line">get btn</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 返回值 "NO"或者"OK"</span></span><br></pre></td></tr></table></figure>

<h2 id="6-AppleScript-调用-Shell"><a href="#6-AppleScript-调用-Shell" class="headerlink" title="6. AppleScript 调用 Shell"></a>6. AppleScript 调用 Shell</h2><p>do shell script + shell脚本语句即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set shellStr to do shell script &quot;cd ~&#x2F;Desktop;cat shell_var.sh&quot;</span><br><span class="line">display alert shellStr buttons &#123;&quot;OK&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>AppleScript</code>配合<code>Shell</code> 以及<code>Alfred</code> 感觉能玩出很多花样来,一些工具确实能提升不少效率和体验。<br> 我平时玩的一些工具存放在这 <a href="https://github.com/WangGuibin/WGBToolsConfigRepository" target="_blank" rel="noopener">https://github.com/WangGuibin/WGBToolsConfigRepository</a></p>
<h2 id="参考博文文章"><a href="#参考博文文章" class="headerlink" title="参考博文文章"></a>参考博文文章</h2><p><a href="https://www.exchen.net/applescript-快速入门.html" target="_blank" rel="noopener">applescript-快速入门</a><br><a href="https://blog.csdn.net/u011238639/article/details/56506056" target="_blank" rel="noopener">我的新玩具-AppleScript(四)</a><br><a href="https://www.cnblogs.com/itcomputer/p/10162392.html" target="_blank" rel="noopener">applescript快速入门教程</a><br><a href="https://lucifr.com/make-your-mac-sing-happy-birthday-with-applescript/" target="_blank" rel="noopener">AppleScript 脚本让 Mac 唱生日快乐歌</a></p>
]]></content>
      <tags>
        <tag>效率</tag>
        <tag>工具使用</tag>
        <tag>AppleScript</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS编译SDK自动化脚本(.framework+.a)</title>
    <url>/hexo-github-action/2022/01/24/iOS%E7%BC%96%E8%AF%91SDK%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC(.framework+.a)/</url>
    <content><![CDATA[<p>之前研究过静态库打包合成的问题,为此踩了不少坑, 写了一篇关于静态库打包的半自动的文章</p>
<ul>
<li><a href="https://www.cnblogs.com/wgb1234/p/14258036.html" target="_blank" rel="noopener">关于Xcode12静态库打包的一些心得 - CoderWGB - 博客园</a></li>
</ul>
<a id="more"></a>

<p>不知道是Xcode的问题还是系统的问题,之前在网上找过了一些脚本,发现不可以直接在SDK工程中加入脚本,不然MacBook就直接发烫电风扇转不停了,当时没有找到好的办法,所以搞了个半自动…</p>
<p>最近发现有<code>Aggregate</code>这么个玩意儿,终于可以全自动了哈哈哈😄,需要在SDK的工程里创建一个聚合类型的<code>target</code>即<code>Aggregate</code></p>
<p>并在<code>Build Phases</code>新建一个<code>RunScript</code>里面执行脚本,无论是<code>.framework</code>还是<code>.a</code>都是一样的</p>
<p>开整:</p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/ImageBed@main/files/2022_01_24_20:00:51_aggregate.png" alt="创建Aggregate"></p>
<p>自动构建.framework脚本如下: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="comment">#SDK的名字</span></span><br><span class="line">SDK_NAME=<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="comment">#SDK产出目录</span></span><br><span class="line">INSTALL_DIR=<span class="variable">$&#123;SRCROOT&#125;</span>/Products/<span class="variable">$&#123;SDK_NAME&#125;</span>.framework</span><br><span class="line"></span><br><span class="line"><span class="comment">#清空编译缓存</span></span><br><span class="line">rm -rf <span class="variable">$&#123;BUILD_DIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行模拟器编译指令</span></span><br><span class="line">xcodebuild -configuration <span class="variable">$&#123;CONFIGURATION&#125;</span> -target ”<span class="variable">$&#123;SDK_NAME&#125;</span>“ -sdk iphonesimulator build</span><br><span class="line"><span class="comment">#执行真机编译指令</span></span><br><span class="line">xcodebuild -configuration <span class="variable">$&#123;CONFIGURATION&#125;</span> -target ”<span class="variable">$&#123;SDK_NAME&#125;</span>“ -sdk iphoneos  build</span><br><span class="line"></span><br><span class="line"><span class="comment">#真机目录</span></span><br><span class="line">DEVICE_DIR=”build“/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphoneos/<span class="variable">$&#123;SDK_NAME&#125;</span>.framework</span><br><span class="line"><span class="comment">#模拟器目录</span></span><br><span class="line">SIMULATOR_DIR=”build“/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphonesimulator/<span class="variable">$&#123;SDK_NAME&#125;</span>.framework</span><br><span class="line"></span><br><span class="line"><span class="comment">#清除旧的安装目录</span></span><br><span class="line"><span class="keyword">if</span> [ -d ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>“ ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">rm -rf ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>“</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#创建新的安装目录</span></span><br><span class="line">mkdir -p ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>“</span><br><span class="line"><span class="comment">#拷贝编译产物到安装目录</span></span><br><span class="line">cp -R ”<span class="variable">$&#123;DEVICE_DIR&#125;</span>/“ ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>/“</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并真机和模拟器的编译产物</span></span><br><span class="line">lipo -create ”<span class="variable">$&#123;DEVICE_DIR&#125;</span>/<span class="variable">$&#123;SDK_NAME&#125;</span>“ ”<span class="variable">$&#123;SIMULATOR_DIR&#125;</span>/<span class="variable">$&#123;SDK_NAME&#125;</span>“ -output ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>/<span class="variable">$&#123;SDK_NAME&#125;</span>“</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开安装目录查看结果</span></span><br><span class="line">open ”<span class="variable">$&#123;SRCROOT&#125;</span>/Products/“</span><br><span class="line"></span><br><span class="line">rm -rf ”<span class="variable">$&#123;SRCROOT&#125;</span>/build“</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看此次编译的架构支持</span></span><br><span class="line">lipo_info=`lipo -info <span class="variable">$&#123;INSTALL_DIR&#125;</span>/<span class="variable">$&#123;SDK_NAME&#125;</span>`</span><br><span class="line">icon_path=`<span class="built_in">pwd</span>`/Xcode.icns</span><br><span class="line">icon_file=$(osascript -e ”<span class="built_in">set</span> thePath to POSIX file \“<span class="variable">$&#123;icon_path&#125;</span>\” as string“)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$icon_file</span></span><br><span class="line">archs=<span class="variable">$&#123;lipo_info##*are:&#125;</span></span><br><span class="line">osascript -e ”display dialog \“<span class="variable">$&#123;archs&#125;</span>\” with title \“查看静态库信息\” buttons &#123;\“OK\”&#125; default button 1 with icon file \“<span class="variable">$&#123;icon_file&#125;</span>\”“</span><br><span class="line"><span class="built_in">echo</span> ”脚本跑🏃完了“</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/ImageBed@main/files/2022_01_24_20:01:38_framework.png" alt="framework脚本执行结果"></p>
<p>自动构建.a脚本如下: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="comment">#SDK的名字</span></span><br><span class="line">SDK_NAME=<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="comment">#SDK产出目录</span></span><br><span class="line">INSTALL_DIR=<span class="variable">$&#123;SRCROOT&#125;</span>/Products/<span class="variable">$&#123;SDK_NAME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清空编译缓存</span></span><br><span class="line">rm -rf <span class="variable">$&#123;BUILD_DIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行模拟器编译指令</span></span><br><span class="line">xcodebuild -configuration <span class="variable">$&#123;CONFIGURATION&#125;</span> -target ”<span class="variable">$&#123;SDK_NAME&#125;</span>“ -sdk iphonesimulator build</span><br><span class="line"><span class="comment">#执行真机编译指令</span></span><br><span class="line">xcodebuild -configuration <span class="variable">$&#123;CONFIGURATION&#125;</span> -target ”<span class="variable">$&#123;SDK_NAME&#125;</span>“ -sdk iphoneos  build</span><br><span class="line"></span><br><span class="line"><span class="comment">#真机目录</span></span><br><span class="line">DEVICE_DIR=”build“/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphoneos</span><br><span class="line"><span class="comment">#模拟器目录</span></span><br><span class="line">SIMULATOR_DIR=”build“/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphonesimulator</span><br><span class="line"></span><br><span class="line"><span class="comment">#清除旧的安装目录</span></span><br><span class="line"><span class="keyword">if</span> [ -d ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>“ ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">rm -rf ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>“</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#创建新的安装目录</span></span><br><span class="line">mkdir -p ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>“</span><br><span class="line"><span class="comment">#拷贝编译产物到安装目录</span></span><br><span class="line">cp -R ”<span class="variable">$&#123;DEVICE_DIR&#125;</span>/“ ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>/“</span><br><span class="line">rm -rf ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>/usr“</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并真机和模拟器的编译产物</span></span><br><span class="line">lipo -create ”<span class="variable">$&#123;DEVICE_DIR&#125;</span>/lib<span class="variable">$&#123;SDK_NAME&#125;</span>.a“ ”<span class="variable">$&#123;SIMULATOR_DIR&#125;</span>/lib<span class="variable">$&#123;SDK_NAME&#125;</span>.a“ -output ”<span class="variable">$&#123;INSTALL_DIR&#125;</span>/lib<span class="variable">$&#123;SDK_NAME&#125;</span>.a“</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开安装目录查看结果</span></span><br><span class="line">open ”<span class="variable">$&#123;SRCROOT&#125;</span>/Products/“</span><br><span class="line"><span class="comment">#删除编译冗余数据</span></span><br><span class="line">rm -rf ”<span class="variable">$&#123;SRCROOT&#125;</span>/build“</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看此次编译的架构支持</span></span><br><span class="line">lipo_info=`lipo -info <span class="variable">$&#123;INSTALL_DIR&#125;</span>/lib<span class="variable">$&#123;SDK_NAME&#125;</span>.a`</span><br><span class="line">icon_path=`<span class="built_in">pwd</span>`/Xcode.icns </span><br><span class="line">icon_file=$(osascript -e ”<span class="built_in">set</span> thePath to POSIX file \“<span class="variable">$&#123;icon_path&#125;</span>\” as string“)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$icon_file</span></span><br><span class="line">archs=<span class="variable">$&#123;lipo_info##*are:&#125;</span></span><br><span class="line">osascript -e ”display dialog \“<span class="variable">$&#123;archs&#125;</span>\” with title \“查看静态库信息\” buttons &#123;\“OK\”&#125; default button 1 with icon file \“<span class="variable">$&#123;icon_file&#125;</span>\”“</span><br><span class="line"><span class="built_in">echo</span> ”脚本跑🏃完了“</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/ImageBed@main/files/2022_01_24_20:02:16_liba.png" alt="lib.a静态库脚本执行结果"></p>
<p><strong>真机架构:</strong>   </p>
<ul>
<li>armv7</li>
<li>armv7s</li>
<li>arm64</li>
<li>arm64e</li>
</ul>
<p><strong>模拟器架构:</strong></p>
<ul>
<li>i386</li>
<li>x86_64</li>
</ul>
<p>不过现在Xcode13默认armv7和 arm64为标准架构,x86_64为PC端模拟器架构,需要自己手动调整Xcode配置剔除</p>
<p>如图: </p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/ImageBed@main/files/2022_01_24_20:09:26_Xnip2022-01-24_20-08-46.png" alt="Xcode SDK架构设置"></p>
<ul>
<li><p><a href="https://github.com/WangGuibin/WGBToolsConfigRepository/tree/master/oh-my-workflows/workflows/Xcode/静态库相关" target="_blank" rel="noopener">之前写的Mac自动操作静态库相关的工作流</a></p>
</li>
<li><p><a href="https://github.com/WangGuibin/TestDemo/tree/master/SDKDemo" target="_blank" rel="noopener">SDK自动打包 Demo</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Shell</tag>
        <tag>静态库</tag>
      </tags>
  </entry>
  <entry>
    <title>关于AppleScript的一些应用总结</title>
    <url>/hexo-github-action/2022/01/25/%E5%85%B3%E4%BA%8EAppleScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<a id="more"></a>
<blockquote>
<p>总结一下工作中常用到的一些可提升效率的一些AppleScript的操作 </p>
</blockquote>
<ul>
<li><a href="https://www.cnblogs.com/wgb1234/p/15789749.html" target="_blank" rel="noopener">关于AppleScript的一些应用总结</a></li>
<li><a href="https://www.cnblogs.com/wgb1234/p/14337703.html" target="_blank" rel="noopener">为Mac自带的AppleScript脚本编辑器增加代码注释快捷键</a></li>
<li><a href="https://www.cnblogs.com/wgb1234/p/14319273.html" target="_blank" rel="noopener">关于AppleScript脚本语言的一些使用总结</a></li>
</ul>
<h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><h3 id="新建窗口并执行shell指令"><a href="#新建窗口并执行shell指令" class="headerlink" title="新建窗口并执行shell指令"></a>新建窗口并执行shell指令</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"iTerm"</span></span><br><span class="line">    <span class="keyword">set</span> myterm <span class="keyword">to</span> create window <span class="keyword">with</span> default profile</span><br><span class="line">    <span class="keyword">tell</span> myterm</span><br><span class="line">        <span class="built_in">activate</span> current session</span><br><span class="line">        <span class="built_in">launch</span> session <span class="string">"Default Session"</span></span><br><span class="line">        <span class="keyword">tell</span> <span class="keyword">the</span> current session</span><br><span class="line">            <span class="built_in">write</span> <span class="built_in">text</span> <span class="string">"echo hello"</span></span><br><span class="line">            <span class="built_in">write</span> <span class="built_in">text</span> <span class="string">"clear;"</span></span><br><span class="line">            <span class="built_in">write</span> <span class="built_in">text</span> <span class="string">"date &amp;&amp; cal"</span> <span class="keyword">without</span> newline</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line">        <span class="built_in">write</span> (sessions <span class="keyword">of</span> current <span class="literal">tab</span>) <span class="built_in">text</span> <span class="literal">linefeed</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br></pre></td></tr></table></figure>



<h3 id="新建tab-并执行shell命令"><a href="#新建tab-并执行shell命令" class="headerlink" title="新建tab, 并执行shell命令"></a>新建tab, 并执行shell命令</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"iTerm"</span></span><br><span class="line">	<span class="keyword">tell</span> current window</span><br><span class="line">		create <span class="literal">tab</span> <span class="keyword">with</span> default profile</span><br><span class="line">		<span class="keyword">tell</span> current session</span><br><span class="line">			<span class="built_in">write</span> <span class="built_in">text</span> <span class="string">"echo 'hello world~ ' "</span></span><br><span class="line">		<span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">tell</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br></pre></td></tr></table></figure>



<h3 id="配合自动操作选中Podfile文件增加快速操作菜单-创建新窗口并执行pod-install"><a href="#配合自动操作选中Podfile文件增加快速操作菜单-创建新窗口并执行pod-install" class="headerlink" title="配合自动操作选中Podfile文件增加快速操作菜单,创建新窗口并执行pod install"></a>配合自动操作选中<code>Podfile</code>文件增加快速操作菜单,创建新窗口并执行pod install</h3><p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/ImageBed@main/files/2022_01_11_19:54:00_Xnip2022-01-11_19-51-43.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新建窗口,选中Podfile 右键快速操作找到pod install这个菜单执行即可</span></span><br><span class="line">PodfilePath=<span class="string">"<span class="variable">$&#123;1%/*&#125;</span>"</span> </span><br><span class="line">osascript &lt;&lt;EOF</span><br><span class="line">tell application <span class="string">"iTerm"</span></span><br><span class="line">    <span class="built_in">set</span> myterm to create window with default profile</span><br><span class="line">    tell myterm</span><br><span class="line">        activate current session</span><br><span class="line">        launch session <span class="string">"Default Session"</span></span><br><span class="line">        tell the current session</span><br><span class="line">            write text <span class="string">"cd <span class="variable">$&#123;PodfilePath&#125;</span>"</span></span><br><span class="line">            write text <span class="string">"clear;"</span></span><br><span class="line">            write text <span class="string">"pod install"</span> without newline</span><br><span class="line">        end tell</span><br><span class="line">        write (sessions of current tab) text linefeed</span><br><span class="line">    end tell</span><br><span class="line">end tell</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者新建tab</span></span><br><span class="line">PodfilePath=<span class="string">"<span class="variable">$&#123;1%/*&#125;</span>"</span> </span><br><span class="line">osascript &lt;&lt;EOF</span><br><span class="line">tell application <span class="string">"iTerm"</span></span><br><span class="line">	tell current window</span><br><span class="line">		create tab with default profile</span><br><span class="line">		tell current session</span><br><span class="line">            write text <span class="string">"cd <span class="variable">$&#123;PodfilePath&#125;</span>"</span></span><br><span class="line">            write text <span class="string">"clear;"</span></span><br><span class="line">            write text <span class="string">"pod install"</span> without newline</span><br><span class="line">		end tell</span><br><span class="line">	end tell</span><br><span class="line">end tell</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h2><h3 id="使用Safari打开指定URL"><a href="#使用Safari打开指定URL" class="headerlink" title="使用Safari打开指定URL"></a>使用Safari打开指定URL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">openWebLink</span></span>()&#123;</span><br><span class="line">osascript &lt;&lt;EOF</span><br><span class="line">tell application <span class="string">"Safari"</span></span><br><span class="line">	activate</span><br><span class="line">    tell window 1</span><br><span class="line">        <span class="built_in">set</span> current tab to (make new tab with properties &#123;URL:<span class="string">"<span class="variable">$&#123;1&#125;</span>"</span>&#125;)</span><br><span class="line">    end tell</span><br><span class="line">end tell</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Safari当前标签页执行一段js"><a href="#Safari当前标签页执行一段js" class="headerlink" title="Safari当前标签页执行一段js"></a>Safari当前标签页执行一段js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CSDN或360Doc解锁文本</span></span><br><span class="line">tell application <span class="string">"Safari"</span> to <span class="keyword">do</span> JavaScript <span class="string">"javascript:window.oncontextmenu=document.oncontextmenu=document.oncopy=null; [...document.querySelectorAll('body')].forEach(dom =&gt; dom.outerHTML = dom.outerHTML); [...document.querySelectorAll('body, body *')].forEach(dom =&gt; &#123;['onselect', 'onselectstart', 'onselectend', 'ondragstart', 'ondragend', 'oncontextmenu', 'oncopy'].forEach(ev =&gt; dom.removeAttribute(ev)); dom.style['user-select']='auto'; dom.style['-webkit-touch-callout']='auto'; dom.style['-webkit-user-select']='auto'; dom.style['-ms-user-select']='auto';dom.style['-khtml-user-select']='auto'; dom.style['-moz-user-select']='auto';&#125;);"</span> <span class="keyword">in</span> <span class="built_in">document</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><h3 id="Xcode打开-编译-运行项目的shell工作流"><a href="#Xcode打开-编译-运行项目的shell工作流" class="headerlink" title="Xcode打开/编译/运行项目的shell工作流"></a>Xcode打开/编译/运行项目的shell工作流</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">WorkspaceName=<span class="string">"xxx.xcworkspace"</span> <span class="comment">#workspace文件名</span></span><br><span class="line">FilePath=<span class="string">"/xxx/xxx"</span> <span class="comment">#项目根目录路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开项目</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">LoadProject</span></span>() &#123;</span><br><span class="line">osascript &lt;&lt;SCRIPT</span><br><span class="line">    tell application <span class="string">"Xcode"</span></span><br><span class="line"><span class="comment">#    判断已经打开就关闭的代码 觉着用不上就注释了</span></span><br><span class="line"><span class="comment">#        open "$FilePath"</span></span><br><span class="line"><span class="comment">#        set workspaceDocument to workspace document "$&#123;WorkspaceName&#125;"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        repeat 120 times</span></span><br><span class="line"><span class="comment">#            if loaded of workspaceDocument is true then</span></span><br><span class="line"><span class="comment">#                close workspaceDocument</span></span><br><span class="line"><span class="comment">#                exit repeat</span></span><br><span class="line"><span class="comment">#            end if</span></span><br><span class="line"><span class="comment">#        end repeat</span></span><br><span class="line"></span><br><span class="line">        open <span class="string">"<span class="variable">$FilePath</span>"</span></span><br><span class="line">        <span class="built_in">set</span> workspaceDocument_new to workspace document <span class="string">"<span class="variable">$&#123;WorkspaceName&#125;</span>"</span></span><br><span class="line">        <span class="built_in">set</span> loadTime_Begin to (current date)</span><br><span class="line"></span><br><span class="line">        repeat 1200 <span class="built_in">times</span></span><br><span class="line">            <span class="keyword">if</span> loaded of workspaceDocument_new is <span class="literal">true</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">set</span> loadTime_End to (current date)</span><br><span class="line">                <span class="built_in">exit</span> repeat</span><br><span class="line">            end <span class="keyword">if</span></span><br><span class="line">        end repeat</span><br><span class="line">    end tell</span><br><span class="line">SCRIPT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译项目</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">BuildProject</span></span>() &#123;</span><br><span class="line">osascript &lt;&lt;SCRIPT</span><br><span class="line">    tell application <span class="string">"Xcode"</span></span><br><span class="line">        <span class="built_in">set</span> actionResult to build workspace document 1</span><br><span class="line">        <span class="built_in">set</span> buildTime_Begin to (current date)</span><br><span class="line">        repeat</span><br><span class="line">            <span class="keyword">if</span> completed of actionResult is <span class="literal">true</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">set</span> buildTime_End to (current date)</span><br><span class="line">                <span class="built_in">exit</span> repeat</span><br><span class="line">            end <span class="keyword">if</span></span><br><span class="line">        end repeat</span><br><span class="line">        <span class="built_in">log</span> <span class="string">"Build 开始时间"</span> &amp; (time string of (buildTime_Begin))</span><br><span class="line">        <span class="built_in">log</span> <span class="string">"Build 开始结束"</span> &amp; (time string of (buildTime_End))</span><br><span class="line">        <span class="built_in">log</span> <span class="string">"Build 总共耗时 :"</span> &amp; (buildTime_End - buildTime_Begin) &amp; <span class="string">"秒"</span></span><br><span class="line">    end tell</span><br><span class="line">SCRIPT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">RunProject</span></span>() &#123;</span><br><span class="line">osascript &lt;&lt;SCRIPT</span><br><span class="line">    tell application <span class="string">"Xcode"</span></span><br><span class="line">        <span class="built_in">set</span> actionResult to run workspace document 1</span><br><span class="line">        <span class="built_in">set</span> runTime_Begin to (current date)</span><br><span class="line">        repeat</span><br><span class="line">            <span class="keyword">if</span> status of actionResult is running <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">set</span> runTime_End to (current date)</span><br><span class="line">                <span class="built_in">exit</span> repeat</span><br><span class="line">            end <span class="keyword">if</span></span><br><span class="line">        end repeat</span><br><span class="line">        <span class="built_in">log</span> <span class="string">"Run 开始时间"</span> &amp; (time string of (runTime_Begin))</span><br><span class="line">        <span class="built_in">log</span> <span class="string">"Run 开始结束"</span> &amp; (time string of (runTime_End))</span><br><span class="line">        <span class="built_in">log</span> <span class="string">"Run 总共耗时 :"</span> &amp; (runTime_End - runTime_Begin) &amp; <span class="string">"秒"</span></span><br><span class="line">    end tell</span><br><span class="line">SCRIPT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoadProject</span><br><span class="line">BuildProject</span><br><span class="line">RunProject</span><br></pre></td></tr></table></figure>
<h3 id="Xcode打开的当前文件的路径"><a href="#Xcode打开的当前文件的路径" class="headerlink" title="Xcode打开的当前文件的路径"></a>Xcode打开的当前文件的路径</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"Xcode"</span></span><br><span class="line">	<span class="keyword">set</span> CurrentActiveDocument <span class="keyword">to</span> document <span class="number">1</span> <span class="keyword">whose</span> <span class="built_in">name</span> <span class="keyword">ends with</span> (<span class="built_in">word</span> <span class="number">-1</span> <span class="keyword">of</span> (<span class="keyword">get</span> <span class="built_in">name</span> <span class="keyword">of</span> window <span class="number">1</span>))</span><br><span class="line">	<span class="keyword">set</span> WhatYouWant <span class="keyword">to</span> path <span class="keyword">of</span> CurrentActiveDocument</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br></pre></td></tr></table></figure>

<h2 id="Finder"><a href="#Finder" class="headerlink" title="Finder"></a>Finder</h2><h3 id="获取当前选中文件或文件夹的路径"><a href="#获取当前选中文件或文件夹的路径" class="headerlink" title="获取当前选中文件或文件夹的路径"></a>获取当前选中文件或文件夹的路径</h3><p>获取当前选中的文件或者文件夹的路径 (Mac 升级Big Sur之后Alfred快捷键就无法获取选中的文件或目录的路径,困扰了很长一段时间,后来无意中发现了这个操作,所以又算是修复了这个问题)</p>
<blockquote>
<p>后来去Alfred官方论坛搜了一下 发现是权限问题,只要在 偏好设置&gt;安全性与隐私&gt;辅助功能里把Alfred勾选☑️上即可 可能是macOS big sur更注重隐私了</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前选中的文件或者文件夹路径</span></span><br><span class="line">CurrentSelectPath=$(osascript &lt;&lt;EOF</span><br><span class="line">tell application <span class="string">"Finder"</span></span><br><span class="line">    <span class="built_in">set</span> theItems to selection</span><br><span class="line">    <span class="built_in">set</span> filePath to (POSIX path of (the selection as <span class="built_in">alias</span>))</span><br><span class="line">  end tell</span><br><span class="line">  <span class="built_in">set</span> q to filePath</span><br><span class="line">  <span class="built_in">return</span> q</span><br><span class="line">EOF</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$CurrentSelectPath</span></span><br></pre></td></tr></table></figure>
<h3 id="AppleScript格式路径与POSIX路径互转"><a href="#AppleScript格式路径与POSIX路径互转" class="headerlink" title="AppleScript格式路径与POSIX路径互转"></a>AppleScript格式路径与POSIX路径互转</h3><p>AppleScript获取的路径默认都是带冒号的,例如: <code>Macintosh HD:Applications:i4tools.app:</code><br><code>choose file</code>  或者 <code>choose folder</code> 可以获取带冒号的路径</p>
<p>带<code>:</code>的路径转为带<code>/</code>的路径</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> appPath <span class="keyword">to</span> <span class="keyword">POSIX path</span> <span class="keyword">of</span> <span class="string">"Macintosh HD:Applications:i4tools.app:"</span></span><br><span class="line"><span class="comment"># /Applications/i4tools.app</span></span><br></pre></td></tr></table></figure>
<p>带<code>/</code>的路径转为带<code>:</code>的路径</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> thePath <span class="keyword">to</span> <span class="keyword">POSIX file</span> <span class="string">"/Applications/i4tools.app"</span> <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line"><span class="comment"># Macintosh HD:Applications:i4tools.app:</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>工作流</tag>
        <tag>workflow</tag>
        <tag>AppleScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发: webStorm手机真机调试</title>
    <url>/hexo-github-action/2018/05/21/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8BwebStorm%E6%89%8B%E6%9C%BA%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1-做好准备工作"><a href="#1-做好准备工作" class="headerlink" title="1. 做好准备工作"></a>1. 做好准备工作</h2><ul>
<li>安装webstorm以及新建一个项目写个demo</li>
<li>确保是同一局域网,同一个路由器下的WiFi或者其他内部网络</li>
<li>安装google二维码插件 (草料二维码)</li>
</ul>
<a id="more"></a>

<h2 id="2-开始设置"><a href="#2-开始设置" class="headerlink" title="2. 开始设置"></a>2. 开始设置</h2><ul>
<li>用webstorm打开demo,打开偏好设置页面</li>
<li>点击到Debugger这一栏,可以看到如图所示:</li>
</ul>
<p><img src="http://wangguibin.github.io/post-images/1560696125636.png" alt=""></p>
<ul>
<li>设置端口号</li>
<li>☑️勾选相应设置</li>
</ul>
<h2 id="3-配置路径"><a href="#3-配置路径" class="headerlink" title="3. 配置路径"></a>3. 配置路径</h2><ul>
<li>点击到Deployment这一栏,如图</li>
</ul>
<p><img src="http://wangguibin.github.io/post-images/1560696177582.png" alt=""></p>
<ul>
<li>点击➕号,新建一个,填写自定义名字,设置对应的type</li>
<li>设置项目的父级路径</li>
<li>设置域名 + 端口号</li>
</ul>
<h2 id="4-匹配路径设置"><a href="#4-匹配路径设置" class="headerlink" title="4. 匹配路径设置"></a>4. 匹配路径设置</h2><ul>
<li>点击到mapper这一栏,如图</li>
</ul>
<p><img src="http://wangguibin.github.io/post-images/1560696186420.png" alt=""></p>
<ul>
<li>设置项目父级路径即可</li>
</ul>
<h2 id="5-设置完成-即可体验"><a href="#5-设置完成-即可体验" class="headerlink" title="5. 设置完成,即可体验"></a>5. 设置完成,即可体验</h2><ul>
<li>以上全部设置完成后,点击apply,点击ok</li>
<li>在项目里点击google浏览器打开即可</li>
<li>能够正常打开,点击地址栏旁边草料二维码插件,手机扫码就可以轻轻松松调试了</li>
</ul>
]]></content>
      <tags>
        <tag>效率</tag>
        <tag>工具</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Xcode12.3打包静态库的一点心得</title>
    <url>/hexo-github-action/2021/01/10/%E5%85%B3%E4%BA%8EXcode12.3%E6%89%93%E5%8C%85%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<blockquote>
<p>最近在玩静态库打包,时不时遇到如下这种报错,可能是Xcode升级的缘故,之前是没有遇到过,故此总结了一波…</p>
</blockquote>
<p> <code>Building for iOS Simulator, but the linked library &#39;libxxx.a&#39; was built for iOS.</code></p>
<a id="more"></a>

<p> 这个问题是因为模拟器编译的那个<code>.a</code>没有合并,只是打了真机的<code>.a</code>,运行到模拟器而模拟器是<code>x86_64</code>的架构,如果不需要模拟器调试,直接真机的即可</p>
<p>另: 模拟器打包与真机的包无法合并,出现arm64重复,无法合并为fat的问题<br> <code>Build settings-&gt;Excluded Architectures</code>里忽略当前<code>SDK</code>不支持的架构<br> 模拟器SDK下可以忽略真机的架构<code>arm64</code>,<code>arm64e</code>,其实不适配5s以下的话直接把i386也去掉也是可以的,同样真机也可去掉armv7和armv7s,这样做的好处是可以减小包体积</p>
<p>现在新iPhone X以上iPhone 11 iPhone12等支持新架构得加一个<code>arm64e</code>,在<code>Architectures</code>里的<code>other</code>里手动添加即可</p>
<p> 所以目前解决办法就是打多个版本的静态库<br> 比如:  </p>
<ul>
<li>全量包 i386,x86_64,armv7,armv7s,arm64,arm64e </li>
<li>拆分包<ul>
<li>真机和模拟器的拆分<ul>
<li>模拟器 i386,x86_64</li>
<li>真机 armv7,armv7s,arm64,arm64e </li>
</ul>
</li>
<li>每一种架构单独拎出来,lipo命令自己按需合并 </li>
</ul>
</li>
</ul>
<p>一般来说,开发调试的话就用全量包,发布上线用真机包</p>
<p><strong>讲道理,一些旧设备都被系统所淘汰了,iOS10起步支持iPhone 5s以上,那就大可不必支持i386和armv7,直接arm64和x86_64即可,上线打包可以剔除x86_64,这样才是最优解</strong></p>
<h2 id="编译-a的脚本如下-采用手动编译-脚本合成"><a href="#编译-a的脚本如下-采用手动编译-脚本合成" class="headerlink" title="编译.a的脚本如下(采用手动编译+脚本合成):"></a>编译.a的脚本如下(采用手动编译+脚本合成):</h2><p> ps: 自动编译在Xcode12.3不知道出了什么鬼,xcodebuild一直死循环就是编译不过,无奈之下采取半自动了,不过配合say语音提示也是可以的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="comment"># 先在工程根目录创建好SDK文件夹</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;PROJECT_NAME&#125;</span>_SDK</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;PROJECT_NAME&#125;</span>_SDK</span><br><span class="line">mkdir -p <span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">mkdir -p include</span><br><span class="line">mkdir -p lib</span><br><span class="line"></span><br><span class="line"><span class="comment">#回到工程目录</span></span><br><span class="line"><span class="built_in">cd</span> ./../../</span><br><span class="line"><span class="comment">#真机build生成的.a文件路径</span></span><br><span class="line">DEVICE_DIR_A=<span class="variable">$&#123;BUILD_DIR&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphoneos/lib<span class="variable">$&#123;PROJECT_NAME&#125;</span>.a</span><br><span class="line"><span class="comment">#模拟器build生成的.a文件路径</span></span><br><span class="line">SIMULATOR_DIR_A=<span class="variable">$&#123;BUILD_DIR&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphonesimulator/lib<span class="variable">$&#123;PROJECT_NAME&#125;</span>.a</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -f <span class="string">"<span class="variable">$&#123;DEVICE_DIR_A&#125;</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">	say <span class="string">"真机编译完成"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -f <span class="string">"<span class="variable">$&#123;SIMULATOR_DIR_A&#125;</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">	say <span class="string">"模拟器编译完成"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -f <span class="string">"<span class="variable">$&#123;DEVICE_DIR_A&#125;</span>"</span> ]] ; <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">if</span> [[ -f <span class="string">"<span class="variable">$&#123;SIMULATOR_DIR_A&#125;</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">		lipo -create <span class="variable">$&#123;DEVICE_DIR_A&#125;</span> <span class="variable">$&#123;SIMULATOR_DIR_A&#125;</span> -output ./<span class="variable">$&#123;PROJECT_NAME&#125;</span>_SDK/<span class="variable">$&#123;PROJECT_NAME&#125;</span>/lib/lib<span class="variable">$&#123;PROJECT_NAME&#125;</span>.a</span><br><span class="line">		<span class="comment">#头文件转移大法</span></span><br><span class="line">		HEADER_FOLDER=<span class="string">"<span class="variable">$&#123;BUILD_DIR&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphoneos/include/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span></span><br><span class="line">		cp -a <span class="variable">$&#123;HEADER_FOLDER&#125;</span>/. ./<span class="variable">$&#123;PROJECT_NAME&#125;</span>_SDK/<span class="variable">$&#123;PROJECT_NAME&#125;</span>/include</span><br><span class="line">		open ./</span><br><span class="line">		say <span class="string">"静态库合并成功"</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><video 
controls
    loop
    preload="auto"
   webkit-playsinline="true"
    playsinline="true"
    x5-video-player-type="h5"
    x5-video-player-fullscreen="true"
    x-webkit-airplay="allow" 
    x5-video-orientation="portraint"
    style="object-fit:fill"><br>        <source src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/1610240744.mp4" type="video/mp4"><br></video></p>
<h2 id="编译framework与-a类似"><a href="#编译framework与-a类似" class="headerlink" title="编译framework与.a类似"></a>编译framework与.a类似</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="comment">#创建存放目录</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</span><br><span class="line">INSTALL_DIR=./<span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</span><br><span class="line"></span><br><span class="line"><span class="comment">#真机编译产物</span></span><br><span class="line">DEVICE_DIR=<span class="variable">$&#123;BUILD_DIR&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphoneos/<span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</span><br><span class="line"><span class="comment">#模拟器编译产物</span></span><br><span class="line">SIMULATOR_DIR=<span class="variable">$&#123;BUILD_DIR&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphonesimulator/<span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</span><br><span class="line"></span><br><span class="line"><span class="comment">#.framework是目录是文件夹 所以用-d判断 文件用-f</span></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="string">"<span class="variable">$DEVICE_DIR</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">	say <span class="string">"真机编译完成"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="string">"<span class="variable">$SIMULATOR_DIR</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">	say <span class="string">"模拟器编译完成"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -d <span class="string">"<span class="variable">$&#123;DEVICE_DIR&#125;</span>"</span> ]] ; <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">if</span> [[ -d <span class="string">"<span class="variable">$&#123;SIMULATOR_DIR&#125;</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">		cp -R <span class="variable">$&#123;DEVICE_DIR&#125;</span>/ <span class="variable">$&#123;INSTALL_DIR&#125;</span>/</span><br><span class="line">		lipo -create <span class="string">"<span class="variable">$&#123;DEVICE_DIR&#125;</span>/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;SIMULATOR_DIR&#125;</span>/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span> -output <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span></span><br><span class="line">		open ./</span><br><span class="line">		say <span class="string">"静态库合并成功"</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><video 
controls
    loop
    preload="auto"
   webkit-playsinline="true"
    playsinline="true"
    x5-video-player-type="h5"
    x5-video-player-fullscreen="true"
    x-webkit-airplay="allow" 
    x5-video-orientation="portraint"
    style="object-fit:fill"><br>        <source src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/1610240648.mp4" type="video/mp4"><br></video></p>
<h2 id="一些相关文章"><a href="#一些相关文章" class="headerlink" title="一些相关文章"></a>一些相关文章</h2><p><a href="https://blog.lessney.com/blog/2020/05/22/解决-Xcode-11-4-以来模拟器编译报错-Building-for-iOS-Simulator-but-the-linked-library-was-built-for-iOS-的正确姿势/" target="_blank" rel="noopener">解决-Xcode-11-4-以来模拟器编译报错-Building-for-iOS-Simulator-but-the-linked-library-was-built-for-iOS-的正确姿势</a><br><a href="https://www.jianshu.com/p/5f896321b1ea" target="_blank" rel="noopener">Xcode 12 - Architecture相关问题</a><br><a href="https://www.jianshu.com/p/461edde66d02" target="_blank" rel="noopener">iOS CPU架构(ARM指令集)</a><br><a href="https://juejin.cn/post/6844903859731578887" target="_blank" rel="noopener">iOS 打包移除 i386 和 x86_64 平台动态库</a><br><a href="https://www.cnblogs.com/YueHeiZS/p/9252186.html" target="_blank" rel="noopener">Python小工具: 去除iOS静态库(.a或.framework)模拟器架构代码</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>工具使用</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>关于iOS视频边录制边上传技术方案的总结</title>
    <url>/hexo-github-action/2024/11/27/%E5%85%B3%E4%BA%8EiOS%E8%A7%86%E9%A2%91%E8%BE%B9%E5%BD%95%E5%88%B6%E8%BE%B9%E4%B8%8A%E4%BC%A0%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<a id="more"></a>
<p>最近公司开发了一款给业务员使用的工具,需要拍摄一镜到底的长视频,业务诉求是要求边录制边上传,因为他们之前别的部门实施过录完之后进行上传,反映不是很好容易失败而且耗时很长…., 经过一番<code>POC</code>发现苹果现有<code>API</code>无法完美的实现该技术方案,倒不是说技术方案很复杂而是苹果没有类似的接口.</p>
<p>比如录制一段视频,需要从头录到尾,才能生成一个完整的视频,录制过程中去读取输出文件路径是读取不到任何数据的,也就是说需要录完整段视频才有可能…这个不是和事后上传一样了嘛.</p>
<p>后来又想直接上传视频流由后端去整合转码为可播放的视频,但是这事儿后端也觉得复杂不愿意干,然后想着能否封装flv格式去上传,当然这也是一种技术方案,实施起来发现复杂度依然很高,需要学习<code>flv</code>封包相关的知识, 后来调研到可以将音视频流<code>buffer</code>用<code>AVWriter</code>写<code>mp4</code>文件存到沙盒, 这样可以开个定时器循环写入多个视频片段,最后将这些片段上传给后端去整合或者本地整合之后进行分片上传.</p>
<p>一开始我<code>iOS</code>这边倾向于使用本地合并然后进行分片上传,方案如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 开启定时器,每10秒写入一个视频,写入完成之后开启下一个视频写入,直到遇见停止录制的标识即停掉定时器结束写入</span><br><span class="line">2. 写入一个视频时,就开启分片上传,写入第二个视频时,将其按先后顺序追加合并到一起,分片上传读取的文件也改成合并后的这个视频,因为前面的视频数据是一样的,按顺序拼接而已,分片读取类似游标一样,上传到哪就读到哪</span><br><span class="line">3. 需要注意的是合并本地分片时,暂停读取分片数据,合并完成再进行读取,所以需要设置一个合并周期和分片读取的周期,能错开最好</span><br></pre></td></tr></table></figure>

<p>后来我完成基本的代码设计之后,<code>Android</code>老哥提出新的方案,要求后端采用<code>ffmpeg</code>来合并视频片段,说技术方案要统一对齐~, 然后就改成了该方案并实施了一段时间,发现链路长了很多,后端交互上也出现了比较多的问题,最后还是回滚到本地合并的方案,怎么说呢, 反正都行吧 都能够实现,都有类似的问题,比如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 视频片段衔接处有闪烁一下的痕迹</span><br><span class="line">2. 上传超时,丢失视频等</span><br><span class="line">3. 非法合片,合片失败等</span><br></pre></td></tr></table></figure>

<p>不过总的来说,客户端本地合并的话,可以缩短或者节省一些带宽和服务器资源,兜底一些报错</p>
]]></content>
      <tags>
        <tag>音视频</tag>
        <tag>边录边传</tag>
      </tags>
  </entry>
  <entry>
    <title>填报工时小助手之Shell+Alfred的合理使用</title>
    <url>/hexo-github-action/2021/05/29/%E5%A1%AB%E6%8A%A5%E5%B7%A5%E6%97%B6%E5%B0%8F%E5%8A%A9%E6%89%8B%E4%B9%8BShell+Alfred%E7%9A%84%E5%90%88%E7%90%86%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  最近部门检查工时及其繁琐,而考勤只有第二天才能出来,系统做得不够友好,工时涉及到一个计算,而工时填报只能在下班以后操作,每次都需要自己去算一遍无疑很低效,很是影响下班的效率,顺手撸了一个可交互的<code>shell</code>脚本配合<code>Alfred</code>完美运行,遂成此篇.<br> <a id="more"></a></p>
<p>执行效果如图:</p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210529161432.png" alt="第一步"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210529161618.png" alt="第二步"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210529161718.png" alt="填写"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210529161746.png" alt="结果"></p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><blockquote>
<p>工时计算规则: <code>工时 = 下班时间 - 上班时间 - 中午休息1.5小时</code></p>
</blockquote>
<p>  关于时间这种两位数的计算其实并不难,但这是一个体验问题,心算能力强的算我没说,懒就要懒到极致~<br>脚本太过简单,无非就是加减乘除的数学运算~<br>目前我想到了有两种方案</p>
<ul>
<li>① 秒级时间戳的差值 / 3600.0, 再减去1.5 即可</li>
<li>② 上班和下班时间点均转为小时数相减, 再减去1.5 即可</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这里我采用的是②<br>脚本如下: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用Xcode图标</span></span><br><span class="line"><span class="comment">#ICON="with icon file \"Macintosh HD:Applications:Xcode.app:Contents:Resources:Xcode.icns\""</span></span><br><span class="line"><span class="comment"># note/ stop/ caution 系统内置图标</span></span><br><span class="line">ICON=<span class="string">"with icon note"</span></span><br><span class="line"></span><br><span class="line">START_TIME=$(</span><br><span class="line">osascript &lt;&lt;EOF</span><br><span class="line">display dialog <span class="string">"工时填报计算"</span> default answer <span class="string">"请输入上班打卡时间"</span> <span class="variable">$&#123;ICON&#125;</span> </span><br><span class="line">text returned of result</span><br><span class="line">EOF</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$START_TIME</span></span><br><span class="line">HOUR1=<span class="variable">$&#123;START_TIME%:*&#125;</span></span><br><span class="line">MIN1=<span class="variable">$&#123;START_TIME#*:&#125;</span></span><br><span class="line">H1=$(<span class="built_in">echo</span> <span class="string">"scale=4; <span class="variable">$&#123;MIN1&#125;</span>/60"</span> | bc)</span><br><span class="line">res1=$(<span class="built_in">echo</span> <span class="string">"scale=4; <span class="variable">$&#123;HOUR1&#125;</span>+<span class="variable">$&#123;H1&#125;</span>"</span> | bc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">END_TIME=$(</span><br><span class="line">osascript &lt;&lt;EOF</span><br><span class="line">display dialog <span class="string">"工时填报计算"</span> default answer <span class="string">"请输入下班打卡时间"</span> <span class="variable">$&#123;ICON&#125;</span> </span><br><span class="line">text returned of result</span><br><span class="line">EOF</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$END_TIME</span></span><br><span class="line">HOUR2=<span class="variable">$&#123;END_TIME%:*&#125;</span></span><br><span class="line">MIN2=<span class="variable">$&#123;END_TIME#*:&#125;</span></span><br><span class="line">H2=$(<span class="built_in">echo</span> <span class="string">"scale=4; <span class="variable">$&#123;MIN2&#125;</span>/60"</span> | bc)</span><br><span class="line">res2=$(<span class="built_in">echo</span> <span class="string">"scale=4; <span class="variable">$&#123;HOUR2&#125;</span>+<span class="variable">$&#123;H2&#125;</span>"</span> | bc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工时 = 下班时间 - 上班时间 - 中午休息1.5小时</span></span><br><span class="line">res3=$(<span class="built_in">echo</span> <span class="string">"scale=4; <span class="variable">$&#123;res2&#125;</span>-<span class="variable">$&#123;res1&#125;</span>-1.5"</span> | bc)</span><br><span class="line">MSG=<span class="string">"计算规则:\n工时 = 下班时间 - 上班时间 - 中午休息1.5小时\n工时 = <span class="variable">$&#123;END_TIME&#125;</span> - <span class="variable">$&#123;START_TIME&#125;</span> - 1.5h午休\n计算结果为: <span class="variable">$&#123;res3&#125;</span>个小时"</span></span><br><span class="line">osascript &lt;&lt;EOF</span><br><span class="line">display dialog <span class="string">"<span class="variable">$&#123;MSG&#125;</span>"</span> with title <span class="string">"计算结果"</span> buttons &#123;<span class="string">"好的👌"</span>&#125;  default button 1 <span class="variable">$&#123;ICON&#125;</span> </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>脚本有了,如何去使用呢? 这可能是一个问题,总不能每次都打开终端去执行吧</p>
<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>shell是可以转成可执行程序的,可以执行如下代码试试:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod a+x work.sh</span><br></pre></td></tr></table></figure>
<p>执行之后就可以双击打开就可以运行该程序</p>
<h2 id="体验优化"><a href="#体验优化" class="headerlink" title="体验优化"></a>体验优化</h2><p>经过一番折腾,以上代码能够正确运行,还有一点点瑕疵就是打开之后会有一个终端执行窗口在桌面上,这个如何去优化它呢?<br>Alfred神器来帮忙</p>
<ul>
<li>1 首先将脚本放到一个目录下</li>
<li>2 <code>Alfred</code>新建一个<code>workflow</code>,第一个动作就是启动这个workflow的操作,看个人喜好keyword或者hotkey</li>
<li>3 下一步连接<code>Run Script</code>动作,点开选择bash或zsh,然后命令是cd 到你的脚本目录下执行脚本即可</li>
</ul>
<p>基本操作步骤如下图: </p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210529161857.png" alt="添加keyword入口"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210529161827.png" alt="添加工作流"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210529161955.png" alt="执行脚本命令填入"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210529162019.png" alt="启动Alfred"></p>
<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/20210529161432.png" alt="最终成品"></p>
]]></content>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>利用WebClip实现自定义图标</title>
    <url>/hexo-github-action/2020/10/23/%E5%88%A9%E7%94%A8WebClip%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><ul>
<li><strong>iPhone升级至iOS14以上</strong> (<code>不然可能会出现打开应用中间还是有一段空白页面过渡</code>)</li>
<li>参考博客 <a href="https://gjh.me/?p=594#comment-3105" target="_blank" rel="noopener">https://gjh.me/?p=594#comment-3105</a> 了解webclip的基本信息</li>
<li><a href="https://scomper.me/ios/2020-10-17" target="_blank" rel="noopener">iOS 14 上替换应用图标</a> </li>
<li>下载Mac App  <code>Apple configurator2</code></li>
</ul>
<h2 id="2-描述文件解析-直接上代码了"><a href="#2-描述文件解析-直接上代码了" class="headerlink" title="2. 描述文件解析(直接上代码了)"></a>2. 描述文件解析(直接上代码了)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">'-//Apple//DTD PLIST 1.0//EN'</span> <span class="meta-string">'http://www.apple.com/DTDs/PropertyList-1.0.dtd'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">'1.0'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadContent<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>FullScreen<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--    书签能否被删除?   --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>IsRemovable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--    图标的base64编码 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>Icon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span>base64编码(实际是需要填这个字段的 太长了这里就略了)<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--      描述文件的标签 这个是桌面上的名字     --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>应用名<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--       描述文件的简介         --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>这个是webClip 用于替换应用启动更换图标之类的或者网页书签的一个桌面快捷打开的方式<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--   描述文件内层导航栏显示的名字   --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadDisplayName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>WebClip内部名字<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--      唯一标识         --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.example.appclip.apple.webClip.managed.xxxooo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--        类型        --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadType<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.webClip.managed<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--     UUID保证唯一性即可        --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadUUID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>25F701C5-1305-42D4-B6C4-0FB453940C05<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--       版本号      --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">real</span>&gt;</span>1<span class="tag">&lt;/<span class="name">real</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--      预组装     --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>Precomposed<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--     跳转的URLScheme --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>URL<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>appcliplaunch://<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--    目标app的bundleID    --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>TargetApplicationBundleIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.sanche.AppClips<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--     描述文件的名字  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadDisplayName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>WebClip描述文件的名字<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--     描述文件的id   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.example.appclip<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    描述文件不允许删除? 貌似无效啊 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadRemovalDisallowed<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--      类型  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadType<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Configuration<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--      UUID保证唯一性即可    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadUUID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>95EF972A-9463-4037-83B8-7B23602F5C5D<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--     版本   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-如何使用"><a href="#3-如何使用" class="headerlink" title="3. 如何使用"></a>3. 如何使用</h2><ul>
<li><p>使用老外写的一个<code>iOS</code>捷径<a href="https://routinehub.co/shortcut/6565/" target="_blank" rel="noopener">https://routinehub.co/shortcut/6565/</a>   </p>
</li>
<li><p>使用<code>Apple configurator2</code>配置好描述文件,然后再利用<code>AirDrop</code>传送到手机安装  </p>
</li>
<li><p>把描述文件托管到文件服务器上或者互联网网盘然后使用手机自带的<code>Safari</code>浏览器下载打开安装即可</p>
</li>
<li><p><code>App Store</code>下载第三方换图标<code>App</code>也可快速实现功能~ (良莠不齐,有些是要跳空白页再跳的,有些是跳捷径再跳的,有些是webclip处理好的~ 比如: <code>趣图标</code>和<code>捷径集</code>以及<code>捷径盒</code>里的一些捷径) </p>
</li>
</ul>
<h2 id="4-大致原理"><a href="#4-大致原理" class="headerlink" title="4. 大致原理"></a>4. 大致原理</h2><ul>
<li>获取<code>bundleID</code>,已知或者从调用<code>App Store</code>搜索<code>api</code>获取 ,替换<code>TargetApplicationBundleIdentifier</code>字段</li>
<li>获取图标图片生成base64编码,替换<code>Icon</code>字段</li>
<li>生成<code>UUID</code>等唯一标识,替换相关<code>UUID</code>标识</li>
<li>替换应用名字段</li>
<li>把各个需要替换的字段更新生成新的描述文件进行安装即可 </li>
<li>其实可以一个描述文件包含多个书签或者应用,因为内部<code>PayloadContent</code>那一层是一个<code>array</code>,我发现<code>捷径集</code>好像就是这样实现的</li>
<li>至于签不签名好像并不影响使用</li>
</ul>
<h2 id="5-尝试一下这个微信替身-用手机Safari打开-点击安装"><a href="#5-尝试一下这个微信替身-用手机Safari打开-点击安装" class="headerlink" title="5. 尝试一下这个微信替身(用手机Safari打开)  点击安装"></a>5. 尝试一下这个微信替身(用手机<code>Safari</code>打开)  <a href="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/files/weixin.mobileconfig" target="_blank" rel="noopener">点击安装</a></h2><p>iOS代码实现可以如下这样打开Safari加载远程配置文件即可:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> downStr = <span class="string">"https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/files/weixin.mobileconfig"</span></span><br><span class="line"><span class="keyword">let</span> realURL = <span class="type">URL</span>(string: downStr)</span><br><span class="line"><span class="type">UIApplication</span>.shared.openURL(realURL!)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>捷径</tag>
        <tag>应用美化</tag>
      </tags>
  </entry>
  <entry>
    <title>如何制作一个手机免费图床捷径指令</title>
    <url>/hexo-github-action/2020/09/14/%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E6%89%8B%E6%9C%BA%E5%9B%BE%E5%BA%8A%E7%9A%84%E6%8D%B7%E5%BE%84%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/1600035331.png" alt="如图所见"></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li><code>github</code>账号与绑定邮箱</li>
<li>建立一个仓库用于存放图片</li>
<li>生成<code>github token</code> 注意生成之后要备份以免后面要用到(页面刷新之后会看不见🙈)</li>
<li>了解<code>github</code>上传文件的 <a href="https://docs.github.com/en/rest/reference/repos?query=content%20is%20not%20valid%20ba%27e#create-or-update-file-contents" target="_blank" rel="noopener">GitHub API</a></li>
</ul>
<h2 id="创建捷径"><a href="#创建捷径" class="headerlink" title="创建捷径"></a>创建捷径</h2><ul>
<li>设置捷径名字,共享表单中显示所有或者图片文件媒体这几种类型</li>
<li>创建一个字典存放配置项</li>
<li>取出每个配置项作为变量</li>
<li>文件名采用时间戳</li>
<li>从相册选或者小组件共享获取到图片资源转成<code>base64</code>不换行</li>
<li>拼接<code>API</code>路径,参考<code>API</code>和上图</li>
<li><code>PUT</code>请求,<code>json</code>格式传输,<code>token</code>塞进<code>header</code>,以及接受类型设置一下即可,值得注意的是<code>accept</code>应该设置为<code>application/vnd.github.raw</code></li>
<li>上传成功之后拼接好<code>cdn</code>访问的地址拷贝至剪贴板</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>灵感来自于<code>PicGo</code>,<code>Mac</code>上有这样一个软件插件挺好的,就想着好多图片都来自于手机拍摄,所以干脆就寻思着做了这么一个工具,直接从手机端上传,把地址放到剪贴板,剪贴板工具<code>Pin</code>或者其他工具通过<code>iCloud</code>同步到<code>Mac</code>使用也是可以达到无缝使用. (之前也有很多其他平台的图床用于盆友圈图片评论啥的,原理其实都是一个道理,把图片上传到图床取链接而已)</p>
]]></content>
      <tags>
        <tag>效率工具</tag>
        <tag>iOS</tag>
        <tag>捷径</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建nginx+rtmp本地模拟推流</title>
    <url>/hexo-github-action/2020/12/24/%E6%90%AD%E5%BB%BAnginx+rtmp%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E6%8E%A8%E6%B5%81/</url>
    <content><![CDATA[<p>前言：这几年直播短视频大火🔥，却也没有抓住这个风口，项目上遇到一个需要推流的功能，所以特此来研究一下这个rtmp推流，用于本地调试还是挺不错的。以下↓就是大致的搭建过程</p>
<a id="more"></a>

<ol>
<li><p>首先搭建nginx环境 <code>brew tap denji/nginx</code></p>
</li>
<li><p>其次安装rtmp的依赖 <code>brew install nginx-full --with-rtmp-module</code></p>
</li>
<li><p>测试<code>nginx</code> 以及<code>nginx -s reload</code> 和 <code>nginx -s stop</code></p>
</li>
<li><p>修改<code>/usr/local/etc/nginx/nginx.conf</code>配置<code>rtmp</code><br>将以下代码加到最后一行即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        application app &#123;</span><br><span class="line">            live on;</span><br><span class="line">            record off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改完<code>nginx -s reload</code>刷新配置</p>
</li>
<li><p>安装ffmpeg <code>brew install ffmpeg</code> (非常大 要安装好久 网络允许的话也很快)</p>
</li>
</ol>
<p>实践操作:<br>找一个本地的mp4视频文件,然后再准备一个VLC播放器<br>执行<code>FFmpeg</code>命令解码出<code>rtmp</code>的视频流推向本地<code>rtmp://127.0.0.1:1935/app/haha</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -re -i /Users/wangguibin/Downloads/big_buck_bunny.mp4 -vcodec copy -f flv rtmp://127.0.0.1:1935/app/haha</span><br></pre></td></tr></table></figure>
<p>VLC播放器添加网络地址进行播放,然后终端执行推流命令(本地如果先推中途播好像会卡顿卡壳)</p>
<img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/截屏2020-12-24 下午10.09.5011.png">

<img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/截屏2020-12-24 下午10.09.28.png">

<img src="https://cdn.jsdelivr.net/gh/WangGuibin/MyFilesRepo/images/Xnip2020-12-24_22-59-09.png">]]></content>
      <tags>
        <tag>工具使用</tag>
        <tag>音视频</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式学习笔记</title>
    <url>/hexo-github-action/2018/06/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="正则字符匹配规则"><a href="#正则字符匹配规则" class="headerlink" title="正则字符匹配规则"></a>正则字符匹配规则</h3><ol>
<li><code>^</code> 行首的意思</li>
<li><code>$</code>结尾处</li>
<li><code>*</code> 通配符</li>
<li><code>\b</code>匹配一个单词边界,单词与空格之间的位置,<code>\w+\b</code>切开成每个单词</li>
<li><code>\d</code>表示数字, <code>\d{5}</code>五位数字, <code>[0-9]</code>数字0~9</li>
<li><code>\w</code> 字母,数字,下划线</li>
<li><code>-</code>匹配短破折号</li>
<li><code>\r</code>或者<code>\n</code>换行符</li>
<li><code>\t</code>制表符</li>
</ol>
<a id="more"></a>

<ol start="10">
<li><code>\\</code> \本身</li>
<li><code>\s</code> 空格,制表符,换页符等空白字符中的任意一个</li>
<li><code>.</code>匹配除了换行符以外的任意字符</li>
<li><code>[ab5@]</code> 匹配<code>a</code> 或<code>b</code>或<code>5</code>或<code>@</code></li>
<li><code>[^abc]</code> 匹配除了<code>a</code> <code>b</code> <code>c</code> 以外的任意一个字符</li>
<li><code>[f-k]</code>匹配<code>f</code>到<code>k</code>之间的任意一个字母(包含<code>f</code> <code>k</code>)</li>
<li><code>[^A-F0-3]</code> 匹配 <code>A</code><del><code>F</code>和<code>0</code></del><code>3</code>以外的任意一个字符</li>
<li><code>{n}</code> 表达式重复<code>n</code>次,比如 <code>\w{2}</code> ==<code>\w\w</code> 或者 <code>a{4}</code> == <code>aaaa</code></li>
<li><code>{m,n}</code>表达式重复最少<code>m</code>次 最多重复<code>n</code>次,  比如 <code>ha{2,3}</code>=&gt;可匹配到 <code>haa</code> <code>haaa</code></li>
<li><code>{m,}</code>贪婪模式,表达式至少重复m次,比如<code>\w\d{3,}</code>=&gt;可匹配 <code>g123</code> <code>b456789</code>… 数字可以重复3个以上</li>
<li><code>?</code>匹配0次或者1次, 比如 <code>qw?</code> —&gt;   <code>qqqw</code>=&gt; qq,qq,qw =&gt;q?,q?,qw 匹配结果就是 q, q, qw </li>
<li><code>+</code>至少匹配一次以上, <code>a+b</code> =&gt; 匹配到 <code>ab</code> <code>aab</code> <code>aaab</code></li>
<li><code>|</code>修饰表达式或语句,不是匹配左边就是右边,两个条件均可</li>
<li><code>()</code>修饰一个整体,括号内的表达式可以单独获取</li>
<li><code>\x</code> 表示编号在0~255范围内的字符,空格可以表示成 <code>\x20</code></li>
<li><code>\u</code> <code>\uxxxx</code>表示16进制的数,比如: <code>\x4E2D</code></li>
<li><code>\S</code>匹配一个非空白字符 , <code>\s</code>匹配一个空白字符</li>
<li><code>\D</code>匹配非数字字符</li>
<li><code>\W</code>匹配所有字母,数字,下划线以外的字符</li>
<li><code>\B</code>匹配非单词边界</li>
<li><code>?:</code> 可以理解为函数封装的形式, 比如 <code>(?:(\w)\1)+</code> 这个规则去匹配 <code>e233t66i34p</code>=&gt;结果是<code>33</code> <code>66</code>  , <code>?:</code>是封装了一个 <code>(\w)</code>这样不会调用,而使用<code>\1</code>就是调用这句表达式 </li>
</ol>
<h3 id="需要加反斜杠转义的字符"><a href="#需要加反斜杠转义的字符" class="headerlink" title="需要加反斜杠转义的字符"></a>需要加反斜杠转义的字符</h3><p><code>^</code>  <code>$</code> <code>()</code> <code>{}</code> <code>[]</code> <code>.</code> <code>?</code> <code>+</code> <code>*</code> <code>|</code></p>
<h3 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h3><ol>
<li><p><code>[\u4e00-\u9fa5]</code>匹配中文字符</p>
</li>
<li><p><code>[^\x00-\xff]</code>匹配双字节字符(包括汉子在内)</p>
</li>
<li><p><code>\n\s*\r</code>匹配空白行</p>
</li>
<li><p>[\w!#$%&amp;’<em>+/=?^_`{|}~-]+(?:.[\w!#$%&amp;’</em>+/=?^_`{|}~-]+)<em>@(?:[\w](?:[\w-]</em>[\w])?.)+<a href="?:[\w-]*[\w]">\w</a>? 匹配邮箱</p>
</li>
<li><p><code>[a-zA-z]+://[^\s]*</code>匹配网址</p>
</li>
<li><p><code>\d{3}-\d{8}|\d{4}-\{7,8}</code>匹配电话号码 (PS. 新出的手机号已经不适用了)</p>
</li>
<li><p><code>^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$</code>匹配身份证号</p>
</li>
</ol>
<h3 id="参考手册"><a href="#参考手册" class="headerlink" title="参考手册"></a>参考手册</h3><p><a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">正则手册</a></p>
]]></content>
      <tags>
        <tag>效率</tag>
        <tag>工具</tag>
        <tag>学习总结</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>集成google翻译的小tips</title>
    <url>/hexo-github-action/2018/08/04/%E9%9B%86%E6%88%90google%E7%BF%BB%E8%AF%91%E7%9A%84%E5%B0%8Ftips/</url>
    <content><![CDATA[<p>google翻译的强大,就像我们公司的slogan : “让语言无国界,让世人心相通”</p>
<a id="more"></a>

<p><img src="http://wangguibin.github.io/post-images/1560697872361.png" alt=""></p>
<h5 id="友情提示-google相关的服务都是需要翻墙的-不然在大陆无法访问"><a href="#友情提示-google相关的服务都是需要翻墙的-不然在大陆无法访问" class="headerlink" title="友情提示: google相关的服务都是需要翻墙的,不然在大陆无法访问"></a><em>友情提示: google相关的服务都是需要翻墙的,不然在大陆无法访问</em></h5><p>写这篇文章的目的就是为了整合一下这方面的资料, 大概是因为被墙,网上关于这方面的资料很少,有些是过于老旧,甚至是不适用的,所以就不得不做个笔记就当作是探探路。</p>
<h1 id="google语音识别"><a href="#google语音识别" class="headerlink" title="google语音识别"></a>google语音识别</h1><ol>
<li>到<code>google</code>注册相关的<code>API_KEY</code>, 地址: <code>https://cloud.google.com/speech-to-text/docs/samples</code></li>
<li>下载demo  <code>https://github.com/GoogleCloudPlatform/ios-docs-samples/tree/master/speech/Objective-C/Speech-REST-Nonstreaming</code></li>
<li>录制语音文件存于沙盒, 上传语音文件到 <code>https://speech.googleapis.com/v1/speech:recognize?key=xxxxx</code></li>
</ol>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码:"></a>核心代码:</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *service = <span class="string">@"https://speech.googleapis.com/v1/speech:recognize"</span>;</span><br><span class="line">service = [service stringByAppendingString:<span class="string">@"?key="</span>];</span><br><span class="line">service = [service stringByAppendingString:API_KEY];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSData</span> *audioData = [<span class="built_in">NSData</span> dataWithContentsOfFile:[<span class="keyword">self</span> soundFilePath]];<span class="comment">//沙盒里的录音文件 具体看google提供的demo</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *configRequest = @&#123;<span class="string">@"encoding"</span>:<span class="string">@"LINEAR16"</span>,</span><br><span class="line">                                <span class="string">@"sampleRateHertz"</span>:@(SAMPLE_RATE),</span><br><span class="line">                                <span class="string">@"languageCode"</span>:<span class="string">@"zh-cn"</span>,</span><br><span class="line">                                <span class="string">@"maxAlternatives"</span>:@<span class="number">30</span>&#125;;</span><br><span class="line"><span class="built_in">NSDictionary</span> *audioRequest = @&#123;<span class="string">@"content"</span>:[audioData base64EncodedStringWithOptions:<span class="number">0</span>]&#125;;</span><br><span class="line"><span class="built_in">NSDictionary</span> *requestDictionary = @&#123;<span class="string">@"config"</span>:configRequest,</span><br><span class="line">                                    <span class="string">@"audio"</span>:audioRequest&#125;;</span><br><span class="line"><span class="built_in">NSError</span> *error;</span><br><span class="line"><span class="built_in">NSData</span> *requestData = [<span class="built_in">NSJSONSerialization</span> dataWithJSONObject:requestDictionary</span><br><span class="line">                                                      options:<span class="number">0</span></span><br><span class="line">                                                        error:&amp;error];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *path = service;</span><br><span class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:path];</span><br><span class="line"><span class="built_in">NSMutableURLRequest</span> *request = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:URL];</span><br><span class="line"><span class="comment">// if your API key has a bundle ID restriction, specify the bundle ID like this:</span></span><br><span class="line">[request addValue:[[<span class="built_in">NSBundle</span> mainBundle] bundleIdentifier] forHTTPHeaderField:<span class="string">@"X-Ios-Bundle-Identifier"</span>];</span><br><span class="line"><span class="built_in">NSString</span> *contentType = <span class="string">@"application/json"</span>;</span><br><span class="line">[request addValue:contentType forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</span><br><span class="line">[request setHTTPBody:requestData];</span><br><span class="line">[request setHTTPMethod:<span class="string">@"POST"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURLSessionTask</span> *task =</span><br><span class="line">[[<span class="built_in">NSURLSession</span> sharedSession]</span><br><span class="line"> dataTaskWithRequest:request</span><br><span class="line"> completionHandler:</span><br><span class="line"> ^(<span class="built_in">NSData</span> *data, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">   <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(),</span><br><span class="line">                  ^&#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *stringResult = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">                    _textView.text = stringResult;</span><br><span class="line">                    <span class="built_in">NSLog</span>(<span class="string">@"RESULT: %@ "</span>, stringResult);</span><br><span class="line">                  &#125;);</span><br><span class="line"> &#125;];</span><br><span class="line">[task resume];</span><br></pre></td></tr></table></figure>

<h1 id="google-文本翻译"><a href="#google-文本翻译" class="headerlink" title="google 文本翻译"></a>google 文本翻译</h1><p> 文本翻译和语音识别类似,都需要<code>API_KEY</code>,同样是POST请求</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> MARK:- 文本互转</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param text 文本</span></span><br><span class="line"><span class="comment"> @param targetCode 翻译的对应语言代码</span></span><br><span class="line"><span class="comment"> @param callBack 回调结果json字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)translateOriginText:(<span class="built_in">NSString</span> *)text</span><br><span class="line">								 targetCode:(<span class="built_in">NSString</span> *)targetCode</span><br><span class="line">									 callBack:(<span class="keyword">void</span>(^)(<span class="built_in">NSString</span> *objStr))callBack&#123;</span><br><span class="line">	<span class="built_in">NSString</span> *urlStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"https://translation.googleapis.com/language/translate/v2?key=%@"</span>,API_KEY];</span><br><span class="line">	<span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString: urlStr];</span><br><span class="line">	<span class="built_in">NSMutableURLRequest</span> *request = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:URL];</span><br><span class="line">	[request addValue:[[<span class="built_in">NSBundle</span> mainBundle] bundleIdentifier] forHTTPHeaderField:<span class="string">@"X-Ios-Bundle-Identifier"</span>];</span><br><span class="line">	<span class="built_in">NSString</span> *contentType = <span class="string">@"application/json"</span>;</span><br><span class="line">	[request addValue:contentType forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</span><br><span class="line"><span class="comment">// q: 原文本  tagret: 目标语言的代码 zh-cn,en-us...等</span></span><br><span class="line">	<span class="built_in">NSDictionary</span> *requestDictionary = @&#123;  <span class="string">@"q"</span> : text, <span class="string">@"target"</span> : targetCode &#125;;</span><br><span class="line">	<span class="built_in">NSError</span> *error;</span><br><span class="line">	<span class="built_in">NSData</span> *requestData = [<span class="built_in">NSJSONSerialization</span> dataWithJSONObject:requestDictionary options:<span class="number">0</span> error:&amp;error];</span><br><span class="line">	[request setHTTPBody:requestData];</span><br><span class="line">	[request setHTTPMethod:<span class="string">@"POST"</span>];</span><br><span class="line">	<span class="built_in">NSURLSessionTask</span> *task =</span><br><span class="line">	[[<span class="built_in">NSURLSession</span> sharedSession]</span><br><span class="line">	 dataTaskWithRequest:request</span><br><span class="line">	 completionHandler:</span><br><span class="line">	 ^(<span class="built_in">NSData</span> *data, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">		 <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(),</span><br><span class="line">										^&#123;</span><br><span class="line">											<span class="built_in">NSString</span> *stringResult = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">											<span class="built_in">NSLog</span>(<span class="string">@"RESULT: %@ "</span>, stringResult);</span><br><span class="line">											!callBack? : callBack(stringResult);</span><br><span class="line">										&#125;);</span><br><span class="line">	 &#125;];</span><br><span class="line">	[task resume];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="google-语音合成"><a href="#google-语音合成" class="headerlink" title="google 语音合成"></a>google 语音合成</h1><ul>
<li>合成是免费的 , 然后是这个接口  <code>http://translate.google.com/translate_tts?ie=UTF-8&amp;client=tw-ob&amp;ttsspeed=1</code></li>
<li>参数组成<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;基地址</span><br><span class="line">BASE_URL &#x3D; @&quot;http:&#x2F;&#x2F;translate.google.com&#x2F;translate_tts?ie&#x3D;UTF-8&amp;client&#x3D;tw-ob&amp;ttsspeed&#x3D;1&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;拼接规则和get请求类似</span><br><span class="line">total   &#x2F;&#x2F;标准为100个字符为一组 然后total是总共多少组 </span><br><span class="line">idx    &#x2F;&#x2F;下标,第几组</span><br><span class="line">textlen  &#x2F;&#x2F;所有文字的计数,就是这个字符串的长度</span><br><span class="line">q     &#x2F;&#x2F;合成的文字内容,中文的话需要转编码utf-8最为合适</span><br><span class="line">tl  &#x2F;&#x2F;语言，跟识别的语言一致</span><br></pre></td></tr></table></figure>
主要参数介绍:<br><code>ie</code>: 输入参数编码 <code>input-encode</code> 一般为<code>utf-8</code><br><code>oe</code>: 输入参数编码 <code>output-encode</code> 一般为<code>utf-8</code><br><code>ttsspeed</code>: 合成的语速<br><code>tl</code>: 目标语言代码 <code>target language</code><br><code>hl</code>: 当地语言代码 <code>home language</code></li>
</ul>
<p>url编码前:<br><code>http://translate.google.com/translate_tts?ie=UTF-8&amp;client=tw-ob&amp;ttsspeed=1&amp;total=1&amp;idx=1&amp;textlen=6&amp;q=某某某是傻逼&amp;tl=zh-cn</code><br>url编码后:<br><code>http://translate.google.com/translate_tts?ie=UTF-8&amp;client=tw-ob&amp;ttsspeed=1&amp;total=1&amp;idx=1&amp;textlen=6&amp;q=%E9%99%88%E8%89%AF%E8%89%AF%E6%98%AF%E5%82%BB%E9%80%BC&amp;tl=zh-cn</code></p>
<h3 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;MARK:- 文本 转 语音在线合成</span><br><span class="line">- (void)synthesisAudioWithTranslateWithText:(NSString *)text&#123;</span><br><span class="line">    NSString *baseUrl &#x3D; @&quot;http:&#x2F;&#x2F;translate.google.com&#x2F;translate_tts?ie&#x3D;UTF-8&amp;client&#x3D;tw-ob&amp;ttsspeed&#x3D;1&quot;;</span><br><span class="line"> &#x2F;&#x2F;url编码</span><br><span class="line">    NSCharacterSet *encodeUrlSet &#x3D; [NSCharacterSet URLQueryAllowedCharacterSet];</span><br><span class="line">    NSString *encodeContent &#x3D; [text stringByAddingPercentEncodingWithAllowedCharacters:encodeUrlSet];</span><br><span class="line">    NSString *urlStr &#x3D; [NSString stringWithFormat:@&quot;%@&amp;total&#x3D;1&amp;idx&#x3D;1&amp;textlen&#x3D;%ld&amp;q&#x3D;%@&amp;tl&#x3D;%@&quot;,baseUrl,text.length,encodeContent,self.targetCode];</span><br><span class="line">    NSURL *url &#x3D; [NSURL URLWithString: urlStr];</span><br><span class="line">      &#x2F;&#x2F;播放拼接的链接 </span><br><span class="line">	UIWebView *web &#x3D; [[UIWebView alloc] init];</span><br><span class="line">	web.hidden &#x3D; YES;</span><br><span class="line">	[self.view addSubview: web];</span><br><span class="line">	NSURLRequest *req &#x3D; [[NSURLRequest alloc] initWithURL:url];</span><br><span class="line">	[web loadRequest: req];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主流的几种语言的代码对照表"><a href="#主流的几种语言的代码对照表" class="headerlink" title="主流的几种语言的代码对照表:"></a>主流的几种语言的代码对照表:</h3><table>
<thead>
<tr>
<th align="center">国家</th>
<th align="center">languageCode</th>
</tr>
</thead>
<tbody><tr>
<td align="center">🇨🇳中文(简体)</td>
<td align="center"><code>zh-cn</code></td>
</tr>
<tr>
<td align="center">🇨🇳中文(繁体)</td>
<td align="center"><code>zh-tw</code></td>
</tr>
<tr>
<td align="center">🇺🇸英文(美式)</td>
<td align="center"><code>en-us</code></td>
</tr>
<tr>
<td align="center">🇬🇧英文(英式)</td>
<td align="center"><code>en-gb</code></td>
</tr>
<tr>
<td align="center">🇯🇵日语</td>
<td align="center"><code>ja</code></td>
</tr>
<tr>
<td align="center">🇰🇷韩语</td>
<td align="center"><code>ko</code></td>
</tr>
<tr>
<td align="center">🇷🇺俄语</td>
<td align="center"><code>ru</code></td>
</tr>
<tr>
<td align="center">🇪🇸西班牙语</td>
<td align="center"><code>es</code></td>
</tr>
<tr>
<td align="center">🇫🇷法语</td>
<td align="center"><code>fr</code></td>
</tr>
<tr>
<td align="center">🇩🇪德语</td>
<td align="center"><code>de</code></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>效率</tag>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title>项目中添加静态库工程</title>
    <url>/hexo-github-action/2020/04/12/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E5%BA%93%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p> 在项目中添加静态库工程🏭 (方便随时修改)</p>
<a id="more"></a>
<h2 id="具体操作步骤如下"><a href="#具体操作步骤如下" class="headerlink" title="具体操作步骤如下:"></a>具体操作步骤如下:</h2><h3 id="1-创建静态库工程"><a href="#1-创建静态库工程" class="headerlink" title="1. 创建静态库工程"></a>1. 创建静态库工程</h3><p>在<code>Xcode</code>里<code>common + shift + N</code>再选择如下图指示,然后创建一个<code>MyLibs</code>的工程</p>
<p><img src="https://github.com/WangGuibin/MyFilesRepo/blob/master/images/staticlib1.png?raw=true" alt=""></p>
<p>如图:</p>
<p><img src="https://github.com/WangGuibin/MyFilesRepo/blob/master/images/staticlib2.png?raw=true" alt=""></p>
<h3 id="2-把静态库放到根路径下-然后再Header-search-path指定路径"><a href="#2-把静态库放到根路径下-然后再Header-search-path指定路径" class="headerlink" title="2. 把静态库放到根路径下,然后再Header search path指定路径"></a>2. 把静态库放到根路径下,然后再<code>Header search path</code>指定路径</h3><p><img src="https://github.com/WangGuibin/MyFilesRepo/blob/master/images/staticlib3.png?raw=true" alt=""></p>
<h3 id="3-添加静态库-a文件"><a href="#3-添加静态库-a文件" class="headerlink" title="3. 添加静态库.a文件"></a>3. 添加静态库<code>.a</code>文件</h3><p><img src="https://github.com/WangGuibin/MyFilesRepo/blob/master/images/staticlib4.png?raw=true" alt=""></p>
<h3 id="4-导入头文件-调用代码-查看调试效果"><a href="#4-导入头文件-调用代码-查看调试效果" class="headerlink" title="4. 导入头文件,调用代码,查看调试效果"></a>4. 导入头文件,调用代码,查看调试效果</h3><p><img src="https://github.com/WangGuibin/MyFilesRepo/blob/master/images/staticlib5.png?raw=true" alt=""></p>
<h3 id="5-修改MyLibs-m里的方法实现-然后再编译观察改变的效果"><a href="#5-修改MyLibs-m里的方法实现-然后再编译观察改变的效果" class="headerlink" title="5.  修改MyLibs.m里的方法实现,然后再编译观察改变的效果"></a>5.  修改<code>MyLibs.m</code>里的方法实现,然后再编译观察改变的效果</h3><p><img src="https://github.com/WangGuibin/MyFilesRepo/blob/master/images/staticlib6.png?raw=true" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>这样做的好处有</p>
<ol>
<li>静态库可以提升编译效率</li>
<li>以工程方式打入可以一改静态库不能修改调试的痛点</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>CSS学习笔记</title>
    <url>/hexo-github-action/2017/09/26/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近学习CSS的一些知识点的总结</p>
<a id="more"></a>

<h1 id="选择器的使用"><a href="#选择器的使用" class="headerlink" title="选择器的使用"></a>选择器的使用</h1><ul>
<li><p>类选择器和id选择器用法类似,类选择器可以选择多个标签,标签也可以拥有多个类选择器,类还可以继承,以及伪类等使用,而id不同,id是标签唯一的标识,id选择器可以指向多个标签,但是一个标签只能对应一个id。</p>
</li>
<li><p>css样式的优先级, 外部 <code>&lt;</code> 内嵌 <code>&lt;</code> 内联, 也就是谁离控制的标签距离越近(按文档流的方向)就听谁的,谁的样式就好使,不然都得被后来者居上,覆盖之。 </p>
</li>
<li><p><code>*{ … }</code>  通用选择器  </p>
</li>
<li><p><code>food &gt;li</code>子类选择器</p>
</li>
<li><p>伪类选择符 鼠标滑过 显示的效果样式..</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:hover&#123;color:red;&#125;</span><br></pre></td></tr></table></figure>
<!-- more -->
</li>
<li><p>段落缩进</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p&#123;text-indent:2em;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>行高(行间距)  : 设置垂直居中一般就用到这个货~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p&#123;line-height:1.5em;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文字间隔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line">    letter-spacing:50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>布局属性text-align (left,center,right) 与iOS差不多</p>
</li>
<li><p>常用的块状元素有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>常用的内联元素有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>常用的内联块状元素有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img&gt;、&lt;input&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>将div等块元素转换成内联元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> div&#123;display:inline;&#125;</span><br><span class="line">&lt;div style&#x3D;&quot;color:red&quot;&gt;我是谁&lt;&#x2F;div&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>盒子模型<br>填充也可分为上、右、下、左(顺时针)。如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;padding:20px 10px 15px 30px;&#125;</span><br></pre></td></tr></table></figure>
<p>顺序一定不要搞混。可以分开写上面代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">   padding-top:20px;</span><br><span class="line">   padding-right:10px;</span><br><span class="line">   padding-bottom:15px;</span><br><span class="line">   padding-left:30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这上右下左也是醉了 和苹果的(上左下右)刚好相反      一个顺时针  一个逆时针<br>如果上、右、下、左的填充都为<code>10px</code>;可以这么写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;padding:10px;&#125;</span><br></pre></td></tr></table></figure>
<p>如果上下填充一样为<code>10px</code>，左右一样为<code>20px</code>，可以这么写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;padding:10px 20px;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>想要让多个块级元素单行显示咋办</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:  inline--block;</span><br></pre></td></tr></table></figure></li>
<li><p>水平居中的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标准流,文本居中即可</span><br><span class="line">定位流中设置  position: relative;     left: (100% -- 元素宽度)&#x2F;2 ;</span><br><span class="line">浮动流中设置  margin:  0  auto;</span><br></pre></td></tr></table></figure></li>
<li><p>盒子模型定位技巧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display: block;</span><br><span class="line">包括内边距(padding)和外边距(margin)以及边框(boder)</span><br><span class="line"> display: flex; 支持flex-box布局属性灵活弹性布局</span><br><span class="line"></span><br><span class="line">1. flex-direction： 主轴的方向（即项目的排列方向）。 【box-orient】</span><br><span class="line">2. flex-wrap： 如果一条轴线排不下，如何换行。 【box-lines】</span><br><span class="line">3. flex-flow： flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap</span><br><span class="line">4. justify-content： 项目在主轴上的对齐方式。【box-pack】</span><br><span class="line">5. align-items： 项目在交叉轴上如何对齐。【box-align】</span><br><span class="line">6. align-content： 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</span><br></pre></td></tr></table></figure>
</li>
<li><p>定位<br><code>absolute</code>:表里如一，移动了就是移动了。<br><code>relative</code>:只是表面显示移动了，但实际还在文档流中原有位置，别的元素无法占据。<br><code>fixed</code>:传说中的右下角悬浮小广告。<br><code>Relative</code>与<code>Absolute</code>组合使用：子元素定位时，它的前辈元素必须设置有<code>position</code>属性，从而子元素使用<code>absolute</code>进行定位<br>结合 <code>left</code> <code>top</code> <code>right</code> <code>bottom</code>可以灵活各种布局的定位</p>
</li>
</ul>
<h1 id="清除浮动的小技巧"><a href="#清除浮动的小技巧" class="headerlink" title="清除浮动的小技巧"></a>清除浮动的小技巧</h1><h3 id="1-父级div定义-height"><a href="#1-父级div定义-height" class="headerlink" title="1. 父级div定义 height"></a>1. 父级div定义 height</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span> </span><br><span class="line"><span class="css"><span class="selector-class">.div1</span>&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span><span class="attribute">height</span>:<span class="number">200px</span>;&#125; </span></span><br><span class="line"><span class="css"><span class="selector-class">.div2</span>&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>&#125; </span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span> </span><br><span class="line">div2 </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>原理：</strong><code>父级div手动定义height，就解决了父级div无法自动获取到高度的问题。</code> </li>
<li><strong>优点：</strong>`简单、代码少、容易掌握 ``</li>
<li><strong>缺点：</strong><code>只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题</code></li>
<li><strong>建议：</strong><code>不推荐使用，只建议高度固定的布局时使用</code></li>
</ul>
<h3 id="2-结尾处加空div标签-clear-both"><a href="#2-结尾处加空div标签-clear-both" class="headerlink" title="2. 结尾处加空div标签 clear:both"></a>2. 结尾处加空div标签 clear:both</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt; </span><br><span class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red&#125; </span><br><span class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>&#125; </span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="comment">/*清除浮动代码*/</span> </span><br><span class="line"><span class="selector-class">.clearfloat</span>&#123;<span class="attribute">clear</span>:both&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">&lt;div class="div1"&gt; </span><br><span class="line">&lt;div class="left"&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class="right"&gt;Right&lt;/div&gt; </span><br><span class="line">&lt;div class="clearfloat"&gt;&lt;/div&gt; </span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;div class="div2"&gt; </span><br><span class="line"><span class="selector-tag">div2</span> </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>原理：</strong><code>添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度</code></li>
<li><strong>优点：</strong><code>简单、代码少、浏览器支持好、不容易出现怪问题</code></li>
<li><strong>缺点：</strong><code>不少初学者不理解原理；如果页面浮动布局多，就要增加很多空div，让人感觉很不好</code></li>
<li><strong>建议：</strong><code>不推荐使用，但此方法是以前主要使用的一种清除浮动方法</code></li>
</ul>
<h3 id="3-父级div定义-伪类-after-和-zoom"><a href="#3-父级div定义-伪类-after-和-zoom" class="headerlink" title="3. 父级div定义 伪类:after 和 zoom"></a>3. 父级div定义 伪类:after 和 zoom</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt; </span><br><span class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;&#125; </span><br><span class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>&#125; </span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="comment">/*清除浮动代码*/</span> </span><br><span class="line"><span class="selector-class">.clearfloat</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">clear</span>:both;<span class="attribute">content</span>:<span class="string">""</span>;<span class="attribute">visibility</span>:hidden;<span class="attribute">height</span>:<span class="number">0</span>&#125; </span><br><span class="line"><span class="selector-class">.clearfloat</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">&lt;div class="div1 clearfloat"&gt; </span><br><span class="line">&lt;div class="left"&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class="right"&gt;Right&lt;/div&gt; </span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;div class="div2"&gt; </span><br><span class="line"><span class="selector-tag">div2</span> </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>原理：</strong><code>IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题</code></li>
<li><strong>优点：</strong><code>浏览器支持好、不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等</code></li>
<li><strong>缺点：</strong><code>代码多、不少初学者不理解原理，要两句代码结合使用才能让主流浏览器都支持。</code></li>
<li><strong>建议：</strong><code>推荐使用，建议定义公共类，以减少CSS代码。</code></li>
</ul>
<h3 id="4-父级div定义-overflow-hidden"><a href="#4-父级div定义-overflow-hidden" class="headerlink" title="4. 父级div定义 overflow:hidden"></a>4. 父级div定义 overflow:hidden</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt; </span><br><span class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span><span class="attribute">width</span>:<span class="number">98%</span>;<span class="attribute">overflow</span>:hidden&#125; </span><br><span class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">98%</span>&#125; </span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">&lt;div class="div1"&gt; </span><br><span class="line">&lt;div class="left"&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class="right"&gt;Right&lt;/div&gt; </span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;div class="div2"&gt; </span><br><span class="line"><span class="selector-tag">div2</span> </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>原理：</strong><code>必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度</code></li>
<li><strong>优点：</strong><code>简单、代码少、浏览器支持好</code></li>
<li><strong>缺点：</strong><code>不能和position配合使用，因为超出的尺寸的会被隐藏。</code> </li>
<li><strong>建议：</strong><code>只推荐没有使用position或对overflow:hidden理解比较深的朋友使用。</code></li>
</ul>
<h3 id="5-父级div定义-overflow-auto"><a href="#5-父级div定义-overflow-auto" class="headerlink" title="5. 父级div定义 overflow:auto"></a>5. 父级div定义 overflow:auto</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt; </span><br><span class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span><span class="attribute">width</span>:<span class="number">98%</span>;<span class="attribute">overflow</span>:auto&#125; </span><br><span class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">margin-top</span>:<span class="number">10px</span>;<span class="attribute">width</span>:<span class="number">98%</span>&#125; </span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">&lt;div class="div1"&gt; </span><br><span class="line">&lt;div class="left"&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class="right"&gt;Right&lt;/div&gt; </span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;div class="div2"&gt; </span><br><span class="line"><span class="selector-tag">div2</span> </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>原理：</strong><code>必须定义width或zoom:1，同时不能定义height，使用overflow:auto时，浏览器会自动检查浮动区域的高度</code></li>
<li><strong>优点：</strong><code>简单、代码少、浏览器支持好</code></li>
<li><strong>缺点：</strong><code>内部宽高超过父级div时，会出现滚动条。</code> </li>
<li><strong>建议：</strong><code>不推荐使用，如果你需要出现滚动条或者确保你的代码不会出现滚动条就使用吧。</code></li>
</ul>
<h3 id="6-父级div-也一起浮动"><a href="#6-父级div-也一起浮动" class="headerlink" title="6. 父级div 也一起浮动"></a>6. 父级div 也一起浮动</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt; </span><br><span class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span><span class="attribute">width</span>:<span class="number">98%</span>;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">float</span>:left&#125; </span><br><span class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">width</span>:<span class="number">98%</span>;<span class="comment">/*解决代码*/</span><span class="attribute">clear</span>:both&#125; </span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">&lt;div class="div1"&gt; </span><br><span class="line">&lt;div class="left"&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class="right"&gt;Right&lt;/div&gt; </span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;div class="div2"&gt; </span><br><span class="line"><span class="selector-tag">div2</span> </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>原理：</strong>`所有代码一起浮动，就变成了一个整体 ``</li>
<li><strong>优点：</strong><code>没有优点</code></li>
<li><strong>缺点：</strong><code>会产生新的浮动问题。</code></li>
<li><strong>建议：</strong><code>不推荐使用，只作了解。</code></li>
</ul>
<h3 id="7-父级div定义-display-table"><a href="#7-父级div定义-display-table" class="headerlink" title="7. 父级div定义 display:table"></a>7. 父级div定义 display:table</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt; </span><br><span class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="comment">/*解决代码*/</span><span class="attribute">width</span>:<span class="number">98%</span>;<span class="attribute">display</span>:table;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;&#125; </span><br><span class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">width</span>:<span class="number">98%</span>;&#125; </span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">&lt;div class="div1"&gt; </span><br><span class="line">&lt;div class="left"&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class="right"&gt;Right&lt;/div&gt; </span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;div class="div2"&gt; </span><br><span class="line"><span class="selector-tag">div2</span> </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>原理：</strong><code>将div属性变成表格</code></li>
<li><strong>优点：</strong><code>没有优点</code></li>
<li><strong>缺点：</strong><code>会产生新的未知问题。</code></li>
<li><strong>建议：</strong><code>不推荐使用，只作了解。</code></li>
</ul>
<h3 id="8-结尾处加-br标签-clear-both"><a href="#8-结尾处加-br标签-clear-both" class="headerlink" title="8. 结尾处加 br标签 clear:both"></a>8. 结尾处加 br标签 clear:both</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt; </span><br><span class="line"><span class="selector-class">.div1</span>&#123;<span class="attribute">background</span>:<span class="number">#000080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;<span class="attribute">zoom</span>:<span class="number">1</span>&#125; </span><br><span class="line"><span class="selector-class">.div2</span>&#123;<span class="attribute">background</span>:<span class="number">#800080</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid red;<span class="attribute">height</span>:<span class="number">100px</span>&#125; </span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">20%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">width</span>:<span class="number">30%</span>;<span class="attribute">height</span>:<span class="number">80px</span>;<span class="attribute">background</span>:<span class="number">#DDD</span>&#125; </span><br><span class="line"><span class="selector-class">.clearfloat</span>&#123;<span class="attribute">clear</span>:both&#125; </span><br><span class="line">&lt;/style&gt; </span><br><span class="line">&lt;div class="div1"&gt; </span><br><span class="line">&lt;div class="left"&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class="right"&gt;Right&lt;/div&gt; </span><br><span class="line">&lt;br class="clearfloat" /&gt; </span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;div class="div2"&gt; </span><br><span class="line"><span class="selector-tag">div2</span> </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>原理：</strong><code>父级div定义zoom:1来解决IE浮动问题，结尾处加 br标签 clear:both</code></li>
<li><strong>建议：</strong><code>不推荐使用，只作了解。</code></li>
</ul>
]]></content>
      <tags>
        <tag>学习总结</tag>
        <tag>CSS</tag>
        <tag>前端</tag>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS字符串的一些处理总结</title>
    <url>/hexo-github-action/2019/04/18/iOS%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><strong>最近比较忙,一直陷入业务的泥沼不可自拔,很少有时间独立思考作作总结,因为平时上班遇到问题就是打开浏览器各种搜寻轮子,百分之八九十的问题也能解决,但是对于个人成长还是感觉有所缓慢,最近开始总结项目的点点滴滴,需要开始写写博客了,那就从基础的笔记写起吧,熟能生巧,由浅入深,这是一个良性的开端。</strong></p>
<a id="more"></a>

<h4 id="1-汉字转拼音-用的系统的API-CFStringTransform"><a href="#1-汉字转拼音-用的系统的API-CFStringTransform" class="headerlink" title="1. 汉字转拼音,用的系统的API CFStringTransform"></a>1. 汉字转拼音,用的系统的API <code>CFStringTransform</code></h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">///MARK:- 汉字转拼音 是否需要声调</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)hanziTransformPinyin:(<span class="built_in">NSString</span> *)chinese</span><br><span class="line">                     needVoiceTone:(<span class="built_in">BOOL</span>)needTone&#123;</span><br><span class="line">    <span class="comment">//将NSString装换成NSMutableString</span></span><br><span class="line">    <span class="built_in">NSMutableString</span> *pinyin = [chinese mutableCopy];</span><br><span class="line">    <span class="comment">//将汉字转换为拼音(带音标)</span></span><br><span class="line">    <span class="keyword">if</span> (needTone) &#123;</span><br><span class="line">        <span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)pinyin, <span class="literal">NULL</span>, kCFStringTransformMandarinLatin, <span class="literal">NO</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//去掉拼音的音标</span></span><br><span class="line">        <span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)pinyin, <span class="literal">NULL</span>, kCFStringTransformMandarinLatin, <span class="literal">NO</span>);</span><br><span class="line">        <span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)pinyin, <span class="literal">NULL</span>, kCFStringTransformStripCombiningMarks, <span class="literal">NO</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSString</span> *pinYinStr = pinyin;</span><br><span class="line">    <span class="comment">//去除掉首尾的空白字符和换行字符</span></span><br><span class="line">    pinYinStr = [pinYinStr stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> whitespaceAndNewlineCharacterSet]];</span><br><span class="line">    <span class="comment">//去除掉其它位置的空白字符和换行字符</span></span><br><span class="line">    pinYinStr = [pinYinStr stringByReplacingOccurrencesOfString:<span class="string">@"\r"</span> withString:<span class="string">@""</span>];</span><br><span class="line">    pinYinStr = [pinYinStr stringByReplacingOccurrencesOfString:<span class="string">@"\n"</span> withString:<span class="string">@""</span>];</span><br><span class="line">    pinYinStr = [pinYinStr stringByReplacingOccurrencesOfString:<span class="string">@" "</span> withString:<span class="string">@""</span>];</span><br><span class="line"><span class="comment">//    NSLog(@"去掉空白字符和换行字符的pinyin: %@", pinYinStr);</span></span><br><span class="line"><span class="comment">//    [pinYinStr capitalizedString];//首字母大写</span></span><br><span class="line">    <span class="keyword">return</span> pinYinStr;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-纯英文输入-记得之前记录过设置安全键盘可以实现限制输入中文和emoji表情的另类实现-即设置输入框的属性secureTextEntry-根据键盘的弹出和隐藏动态切换-但是有一点小小的瑕疵-在支持touchID的手机-键盘上方会出现一个小圆圈-就是类似钥匙串的玩意儿-点击之后-验证touchID-然后会看到自己以往在iCloud记录的账户密码-安全以及UI方面不是很符合要求-在这里介绍另一种实现方式"><a href="#2-纯英文输入-记得之前记录过设置安全键盘可以实现限制输入中文和emoji表情的另类实现-即设置输入框的属性secureTextEntry-根据键盘的弹出和隐藏动态切换-但是有一点小小的瑕疵-在支持touchID的手机-键盘上方会出现一个小圆圈-就是类似钥匙串的玩意儿-点击之后-验证touchID-然后会看到自己以往在iCloud记录的账户密码-安全以及UI方面不是很符合要求-在这里介绍另一种实现方式" class="headerlink" title="2. 纯英文输入,记得之前记录过设置安全键盘可以实现限制输入中文和emoji表情的另类实现,即设置输入框的属性secureTextEntry ,根据键盘的弹出和隐藏动态切换,但是有一点小小的瑕疵(在支持touchID的手机,键盘上方会出现一个小圆圈,就是类似钥匙串的玩意儿,点击之后,验证touchID,然后会看到自己以往在iCloud记录的账户密码.... 安全以及UI方面不是很符合要求),在这里介绍另一种实现方式"></a>2. 纯英文输入,记得之前记录过设置安全键盘可以实现<a href="https://www.jianshu.com/p/82c5a1ea8763" target="_blank" rel="noopener">限制输入中文和emoji表情的另类实现</a>,即设置输入框的属性<code>secureTextEntry</code> ,根据键盘的弹出和隐藏动态切换,但是有一点小小的瑕疵(<code>在支持touchID的手机,键盘上方会出现一个小圆圈,就是类似钥匙串的玩意儿,点击之后,验证touchID,然后会看到自己以往在iCloud记录的账户密码.... 安全以及UI方面不是很符合要求</code>),在这里介绍另一种实现方式</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)textField:(<span class="built_in">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class="built_in">NSRange</span>)range replacementString:(<span class="built_in">NSString</span> *)string&#123;</span><br><span class="line"><span class="comment">//指定输入的字符内容</span></span><br><span class="line"><span class="built_in">NSString</span> * kLetterVerifyInput = <span class="string">@"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">        <span class="built_in">NSCharacterSet</span> *cs = [[<span class="built_in">NSCharacterSet</span> characterSetWithCharactersInString:kLetterVerifyInput] invertedSet];<span class="comment">//与英文取反的集合</span></span><br><span class="line">        <span class="built_in">NSString</span> *filtered = [[string componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:<span class="string">@""</span>];<span class="comment">//过滤并拼接起来</span></span><br><span class="line">        <span class="keyword">return</span> [string isEqualToString:filtered]; <span class="comment">//如果匹配了这个非英文集合 则不会出现在输入框里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-利用正则过滤字符"><a href="#3-利用正则过滤字符" class="headerlink" title="3. 利用正则过滤字符"></a>3. 利用正则过滤字符</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据正则，过滤特殊字符</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)filterCharactor:(<span class="built_in">NSString</span> *)string withRegex:(<span class="built_in">NSString</span> *)regexStr&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *searchText = string;</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">NSRegularExpression</span> *regex = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:regexStr options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:&amp;error];</span><br><span class="line">    <span class="built_in">NSString</span> *result = [regex stringByReplacingMatchesInString:searchText options:<span class="built_in">NSMatchingReportCompletion</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, searchText.length) withTemplate:<span class="string">@""</span>];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-只能输入中文和只输入英文的处理-标点符号之类的需要自己额外处理一下"><a href="#4-只能输入中文和只输入英文的处理-标点符号之类的需要自己额外处理一下" class="headerlink" title="4. 只能输入中文和只输入英文的处理(标点符号之类的需要自己额外处理一下)"></a>4. 只能输入中文和只输入英文的处理(<code>标点符号之类的需要自己额外处理一下</code>)</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听处理输入的字符串 把不符合要求的字符串替换掉</span></span><br><span class="line"> @weakify(<span class="keyword">self</span>);</span><br><span class="line">  [<span class="keyword">self</span>.nameTextfield.rac_textSignal subscribeNext:^(<span class="built_in">NSString</span> * _Nullable x) &#123;</span><br><span class="line">      @strongify(<span class="keyword">self</span>);</span><br><span class="line">      <span class="keyword">if</span>(!x.length)&#123;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">self</span>.selectedBtn.tag == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">//中文</span></span><br><span class="line">          <span class="keyword">if</span> (![<span class="built_in">NSString</span> isChineseCharacter:x]) &#123;</span><br><span class="line">              <span class="comment">//过滤非中文字符</span></span><br><span class="line">              <span class="keyword">self</span>.nameTextfield.text = [<span class="keyword">self</span> filterCharactor:x withRegex:<span class="string">@"[^\u4e00-\u9fa5]"</span>];</span><br><span class="line">              <span class="keyword">return</span> ;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//英文</span></span><br><span class="line">          <span class="built_in">NSString</span> *lastStr = [x substringWithRange:<span class="built_in">NSMakeRange</span>(x.length<span class="number">-1</span>, <span class="number">1</span>)];</span><br><span class="line">          <span class="keyword">if</span> (![kLetterVerifyInput containsString:lastStr]) &#123;</span><br><span class="line">              <span class="keyword">self</span>.nameTextfield.text = [x substringToIndex: x.length - <span class="number">1</span>];</span><br><span class="line">              <span class="keyword">return</span> ;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">self</span>.nameTextfield.text = [<span class="keyword">self</span>.nameTextfield.text removeWhiteSpacesFromString];<span class="comment">//移除空格</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">self</span>.nameTextfield.text.length &gt; <span class="number">10</span>) &#123;<span class="comment">//限制输入的长度</span></span><br><span class="line">          <span class="keyword">self</span>.nameTextfield.text = [<span class="keyword">self</span>.nameTextfield.text substringToIndex:<span class="number">10</span>];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;];</span><br></pre></td></tr></table></figure>

<h4 id="5-一些判断纯中文-纯英文-纯数字的正则的方法"><a href="#5-一些判断纯中文-纯英文-纯数字的正则的方法" class="headerlink" title="5. 一些判断纯中文,纯英文,纯数字的正则的方法"></a>5. 一些判断纯中文,纯英文,纯数字的正则的方法</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//限制中文输入 判断是否中文</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)isChineseCharacter:(<span class="built_in">NSString</span>*)source &#123;</span><br><span class="line">    <span class="comment">//参考了 https://www.jianshu.com/p/b40b3c618fec</span></span><br><span class="line">    <span class="built_in">NSString</span> *regex = <span class="string">@"^[\\u4E00-\\u9FEA]+$"</span>;</span><br><span class="line">    <span class="keyword">return</span> ([source rangeOfString:regex options:<span class="built_in">NSRegularExpressionSearch</span>].length&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//严格限制英文输入</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)isEnglishCharacter:(<span class="built_in">NSString</span>*)source &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *upperRegex = <span class="string">@"^[\\u0041-\\u005A]+$"</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *lowerRegex = <span class="string">@"^[\\u0061-\\u007A]+$"</span>;</span><br><span class="line">    <span class="built_in">BOOL</span> isEnglish = (([source rangeOfString:upperRegex options:<span class="built_in">NSRegularExpressionSearch</span>].length&gt;<span class="number">0</span>) || ([source rangeOfString:lowerRegex options:<span class="built_in">NSRegularExpressionSearch</span>].length&gt;<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> isEnglish;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断数字</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)isNumber:(<span class="built_in">NSString</span>*)source &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *regex = <span class="string">@"^[\\u0030-\\u0039]+$"</span>;</span><br><span class="line">    <span class="keyword">return</span> ([source rangeOfString:regex options:<span class="built_in">NSRegularExpressionSearch</span>].length&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-URL含有中文或者百分号-有时候需要根据业务需求编码或者解码-如下"><a href="#6-URL含有中文或者百分号-有时候需要根据业务需求编码或者解码-如下" class="headerlink" title="6. URL含有中文或者百分号%,有时候需要根据业务需求编码或者解码,如下:"></a>6. URL含有中文或者百分号<code>%</code>,有时候需要根据业务需求编码或者解码,如下:</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下是添加的NSString的category方法</span></span><br><span class="line"><span class="comment">///MARK:- URL包含中文转码 编码/Encode</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)urlEncodeUTF8String&#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">9.0</span>, *)) &#123;</span><br><span class="line">        <span class="built_in">NSString</span>  *newUrlString = [<span class="keyword">self</span> stringByAddingPercentEncodingWithAllowedCharacters:[<span class="built_in">NSCharacterSet</span> URLQueryAllowedCharacterSet]];</span><br><span class="line">        <span class="keyword">return</span> newUrlString;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">NSString</span>  *newUrlString = [<span class="keyword">self</span> stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="keyword">return</span> newUrlString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///MARK:- URL包含中文百分号的形式 需要转成中文 解码/Decode</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)urlDecodeUTF8String&#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">9.0</span>, *)) &#123;</span><br><span class="line">        <span class="built_in">NSString</span>  *newUrlString = [<span class="keyword">self</span> stringByRemovingPercentEncoding];</span><br><span class="line">        <span class="keyword">return</span> newUrlString;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">NSString</span> *newUrlString = [<span class="keyword">self</span> stringByReplacingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="keyword">return</span> newUrlString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-解析URL的参数-即问好后面的参数键值对-入参是-url-query-值得注意的是如果urlString含有中文的话-调用-url-query-是读不出数据-null-我认为采用字符串截取比较安全的做法-不用转来转去-我也是这样做的"><a href="#7-解析URL的参数-即问好后面的参数键值对-入参是-url-query-值得注意的是如果urlString含有中文的话-调用-url-query-是读不出数据-null-我认为采用字符串截取比较安全的做法-不用转来转去-我也是这样做的" class="headerlink" title="7.   解析URL的参数 即问好后面的参数键值对,入参是 [url query] 值得注意的是如果urlString含有中文的话,调用[url query]是读不出数据(null), 我认为采用字符串截取比较安全的做法,不用转来转去,我也是这样做的"></a>7.   解析URL的参数 即问好后面的参数键值对,入参是 <code>[url query]</code> 值得注意的是如果urlString含有中文的话,调用<code>[url query]</code>是读不出数据<code>(null)</code>, 我认为采用字符串截取比较安全的做法,不用转来转去,我也是这样做的</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 扫二维码或者什么操作获取一段URLString 即</span></span><br><span class="line">    <span class="keyword">if</span> (![URLString containsString:<span class="string">@"?"</span>]) &#123;</span><br><span class="line">          <span class="comment">// 没问号 做其他处理</span></span><br><span class="line">         <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 有问号去解析参数</span></span><br><span class="line">      <span class="built_in">NSInteger</span> location = [URLString rangeOfString:<span class="string">@"?"</span>].location + <span class="number">1</span>;</span><br><span class="line">     <span class="built_in">NSString</span> *query = [URLString substringFromIndex: location];</span><br><span class="line">    获取到query 自然就可以获取到参数字典</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSDictionary</span>*)dictionaryFromQuery:(<span class="built_in">NSString</span>*)query&#123;</span><br><span class="line">    <span class="built_in">NSCharacterSet</span>* delimiterSet = [<span class="built_in">NSCharacterSet</span> characterSetWithCharactersInString:<span class="string">@"&amp;"</span>];<span class="comment">//分割键值对</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span>* pairs = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    <span class="built_in">NSScanner</span>* scanner = [[<span class="built_in">NSScanner</span> alloc] initWithString:query];</span><br><span class="line">    <span class="keyword">while</span> (![scanner isAtEnd]) &#123;</span><br><span class="line">        <span class="built_in">NSString</span>* pairString = <span class="literal">nil</span>;</span><br><span class="line">        [scanner scanUpToCharactersFromSet:delimiterSet intoString:&amp;pairString];</span><br><span class="line">        [scanner scanCharactersFromSet:delimiterSet intoString:<span class="literal">NULL</span>];</span><br><span class="line">        <span class="built_in">NSArray</span>* kvPair = [pairString componentsSeparatedByString:<span class="string">@"="</span>]; <span class="comment">//提取键值</span></span><br><span class="line">        <span class="keyword">if</span> (kvPair.count == <span class="number">2</span>) &#123;<span class="comment">//字典一个键 一个值</span></span><br><span class="line">            <span class="built_in">NSString</span>* key = [[kvPair objectAtIndex:<span class="number">0</span>] stringByRemovingPercentEncoding];</span><br><span class="line">            <span class="built_in">NSString</span>* value = [[kvPair objectAtIndex:<span class="number">1</span>] stringByRemovingPercentEncoding];</span><br><span class="line">            [pairs setObject:value forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSDictionary</span> dictionaryWithDictionary:pairs];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-提取字符串中的数字部分-局限是会把所有数字都提取出来-可以自己使用逗号分隔-数组切割区分-因为我当时的需求是一串字符串中有且只有一串连续的数字-所有全部提取出来就是了"><a href="#8-提取字符串中的数字部分-局限是会把所有数字都提取出来-可以自己使用逗号分隔-数组切割区分-因为我当时的需求是一串字符串中有且只有一串连续的数字-所有全部提取出来就是了" class="headerlink" title="8. 提取字符串中的数字部分 (局限是会把所有数字都提取出来 可以自己使用逗号分隔,数组切割区分,因为我当时的需求是一串字符串中有且只有一串连续的数字  所有全部提取出来就是了)"></a>8. 提取字符串中的数字部分 (<code>局限是会把所有数字都提取出来 可以自己使用逗号分隔,数组切割区分,因为我当时的需求是一串字符串中有且只有一串连续的数字  所有全部提取出来就是了</code>)</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)getNumberFromString&#123;</span><br><span class="line">    <span class="built_in">NSCharacterSet</span> *nonDigitCharacterSet = [[<span class="built_in">NSCharacterSet</span> decimalDigitCharacterSet] invertedSet];</span><br><span class="line">    <span class="keyword">return</span>[[<span class="keyword">self</span> componentsSeparatedByCharactersInSet:nonDigitCharacterSet] componentsJoinedByString:<span class="string">@""</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-全角标点符号转半角符号"><a href="#9-全角标点符号转半角符号" class="headerlink" title="9.  全角标点符号转半角符号"></a>9.  全角标点符号转半角符号</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)full2HalfWithNSString:(<span class="built_in">NSString</span> *)string &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == string || [<span class="string">@""</span> isEqual:string]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">@""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *convertedString = [string mutableCopy];</span><br><span class="line">    <span class="built_in">CFStringTransform</span>((<span class="built_in">CFMutableStringRef</span>)convertedString, <span class="literal">NULL</span>, kCFStringTransformFullwidthHalfwidth, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">NSString</span> *newString = [<span class="built_in">NSString</span> stringWithString:convertedString];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"　"</span> withString:<span class="string">@" "</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"‘"</span> withString:<span class="string">@"'"</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"’"</span> withString:<span class="string">@"'"</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"`"</span> withString:<span class="string">@"'"</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"‚"</span> withString:<span class="string">@","</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"，"</span> withString:<span class="string">@","</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"；"</span> withString:<span class="string">@";"</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"｡"</span> withString:<span class="string">@"."</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"？"</span> withString:<span class="string">@"?"</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"！"</span> withString:<span class="string">@"!"</span>];</span><br><span class="line">    newString = [newString stringByReplacingOccurrencesOfString:<span class="string">@"--"</span> withString:<span class="string">@"—"</span>];</span><br><span class="line">    <span class="keyword">return</span> newString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>学习总结</tag>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记</title>
    <url>/hexo-github-action/2017/10/11/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>有些情况下是有很多转义字符的,可以这样写,好处是可以省去写繁琐的反斜杠...</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">r''' "哈哈哈哈哈😄",\\\\ 6666%%%% "U" "u" '''</span></span><br></pre></td></tr></table></figure>
<p>打印中文, u’’’…. ‘’’<a href="link"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">u'我就能打中文,怎么了'</span>);//单行</span><br><span class="line">//我就能打中文,怎么了 </span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">u'''静夜思</span></span><br><span class="line"><span class="string">床前明月光，</span></span><br><span class="line"><span class="string">疑是地上霜。</span></span><br><span class="line"><span class="string">举头望明月，</span></span><br><span class="line"><span class="string">低头思故乡。'''</span>)///多行</span><br><span class="line"></span><br><span class="line">静夜思</span><br><span class="line">床前明月光，</span><br><span class="line">疑是地上霜。</span><br><span class="line">举头望明月，</span><br><span class="line">低头思故乡。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="一些基本数据类型的互相转换"><a href="#一些基本数据类型的互相转换" class="headerlink" title="一些基本数据类型的互相转换"></a>一些基本数据类型的互相转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">int(x [,base ])         将x转换为一个整数    </span><br><span class="line">long(x [,base ])        将x转换为一个长整数    </span><br><span class="line">float(x )               将x转换到一个浮点数    </span><br><span class="line">complex(real [,imag ])  创建一个复数    </span><br><span class="line">str(x )                 将对象 x 转换为字符串    </span><br><span class="line">repr(x )                将对象 x 转换为表达式字符串    </span><br><span class="line">eval(str )              用来计算在字符串中的有效Python表达式,并返回一个对象    </span><br><span class="line">tuple(s )               将序列 s 转换为一个元组    </span><br><span class="line">list(s )                将序列 s 转换为一个列表    </span><br><span class="line">chr(x )                 将一个整数转换为一个字符    </span><br><span class="line">unichr(x )              将一个整数转换为Unicode字符    </span><br><span class="line">ord(x )                 将一个字符转换为它的整数值    </span><br><span class="line">hex(x )                 将一个整数转换为一个十六进制字符串    </span><br><span class="line">oct(x )                 将一个整数转换为一个八进制字符串   </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">chr(<span class="number">65</span>)=<span class="string">'A'</span></span><br><span class="line">ord(<span class="string">'A'</span>)=<span class="number">65</span></span><br><span class="line"> </span><br><span class="line">int(<span class="string">'2'</span>)=<span class="number">2</span>;</span><br><span class="line">str(<span class="number">2</span>)=<span class="string">'2'</span></span><br></pre></td></tr></table></figure>


<h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><ul>
<li><p>缩进请严格按照Python的习惯写法：<code>4个空格</code>，不要使用Tab，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。<code>如果你在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车</code></p>
</li>
<li><p>if - else</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="number">55</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'passed'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'failed'</span></span><br></pre></td></tr></table></figure></li>
<li><p>if - elif - else 多分支判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="number">85</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'excellent'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'good'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'passed'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'failed'</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="循环语句相关"><a href="#循环语句相关" class="headerlink" title="循环语句相关"></a>循环语句相关</h3><p>for循环遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [<span class="number">75</span>, <span class="number">92</span>, <span class="number">59</span>, <span class="number">68</span>]</span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> L:</span><br><span class="line">    sum += num    </span><br><span class="line"><span class="keyword">print</span> sum / <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>while循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//求<span class="number">100</span>以内的奇数和</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span>: </span><br><span class="line">        sum += x</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/**利用 <span class="string">"while True"</span> 无限循环配合 <span class="string">"break"</span> 语句，计算 <span class="number">1</span> + <span class="number">2</span> + <span class="number">4</span> + <span class="number">8</span> + <span class="number">16</span> + ... 的前<span class="number">20</span>项的和。*/</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="keyword">if</span> n &gt; <span class="number">20</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  sum += x</span><br><span class="line">  x *= <span class="number">2</span></span><br><span class="line">  n += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure>

<p>///break 和continue</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    sum += x</span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure>

<p>//对100以内的两位数，请使用一个两重循环打印出所有十位数数字比个位数数字小的数，例如，23（2 &lt; 3）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [ <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> ]:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> [ <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> ]:</span><br><span class="line">         <span class="keyword">if</span> x &lt; y :</span><br><span class="line">             <span class="keyword">print</span> x*<span class="number">10</span> + y</span><br></pre></td></tr></table></figure>


<h3 id="python的-list-操作"><a href="#python的-list-操作" class="headerlink" title="python的 list 操作"></a>python的 list 操作</h3><p>创建和访问都很简单,其中有一个特殊一点就是-1下标代表最后一个元素,以此类推..</p>
<p>插入操作: append(item)和 insert (index,item)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line">L.insert(<span class="number">0</span>,<span class="string">'WGB'</span>)</span><br><span class="line"><span class="keyword">print</span> L</span><br><span class="line"></span><br><span class="line">L.append(<span class="string">'666'</span>)</span><br><span class="line"><span class="keyword">print</span> L</span><br><span class="line"></span><br><span class="line">L.insert(<span class="number">-1</span>,<span class="string">"888888888"</span>)</span><br><span class="line"><span class="keyword">print</span> L</span><br></pre></td></tr></table></figure>
<p>删除操作: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Paul'</span>,<span class="string">'P'</span>,<span class="string">'PAPP'</span>,<span class="string">'PAD'</span>,<span class="string">'Pel'</span>,<span class="string">'PB'</span>,<span class="string">'PLL'</span>,<span class="string">'PCCl'</span>,<span class="string">'Jaul'</span>,<span class="string">'OOl'</span>,<span class="string">'Qaul'</span>, <span class="string">'Bart'</span>]</span><br><span class="line">L.pop() //默认是移除最后一个</span><br><span class="line"><span class="keyword">print</span> L</span><br><span class="line">L.pop(<span class="number">0</span>) //第<span class="number">1</span>项</span><br><span class="line"><span class="keyword">print</span> L</span><br><span class="line">L.pop(<span class="number">1</span>)//第<span class="number">2</span>项</span><br><span class="line"><span class="keyword">print</span> L</span><br><span class="line">L.pop(<span class="number">2</span>)//第<span class="number">3</span>项</span><br><span class="line"><span class="keyword">print</span> L</span><br><span class="line">L.pop(<span class="number">3</span>)//第<span class="number">4</span>项</span><br><span class="line"><span class="keyword">print</span> L</span><br></pre></td></tr></table></figure>
<p>替换操作: </p>
<ol>
<li>把之前的元素删掉,再添加新元素取代它</li>
<li>直接访问下标,修改它的值</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line">L.pop(<span class="number">1</span>)</span><br><span class="line">L.insert(<span class="number">1</span>,<span class="string">'Job'</span>)</span><br><span class="line"><span class="keyword">print</span> L</span><br><span class="line">L[<span class="number">1</span>] = <span class="string">"iOS"</span></span><br><span class="line"><span class="keyword">print</span> L</span><br><span class="line">//[<span class="string">'Adam'</span>, <span class="string">'Job'</span>, <span class="string">'Bart'</span>]</span><br><span class="line">//[<span class="string">'Adam'</span>, <span class="string">'iOS'</span>, <span class="string">'Bart'</span>]</span><br></pre></td></tr></table></figure>


<h3 id="dict-和-set的操作"><a href="#dict-和-set的操作" class="headerlink" title="dict 和 set的操作"></a>dict 和 set的操作</h3><p>和其他他语言一样,key是唯一的且不能为空,查找速度快,键值访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict的第一个特点是查找速度快，无论dict有10个元素还是10万个元素，查找速度都一样。而list的查找速度随着元素增加而逐渐下降。</span><br><span class="line">不过dict的查找速度快不是没有代价的，dict的缺点是占用内存大，还会浪费很多内容，list正好相反，占用内存小，但是查找速度慢。</span><br><span class="line">由于dict是按 key 查找，所以，在一个dict中，key不能重复。</span><br></pre></td></tr></table></figure>

<ul>
<li>通过键值访问修改value或者添加元素</li>
</ul>
<p>set([1,2,3,4]) 就是set( )里面包装一个list,但是元素不能重复,和其他语言类似,用来排重还是阔以的<br>set 用 in操作符来判断是不是自己元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; set([&#39;adam&#39;,&#39;bart&#39;])</span><br><span class="line">print &#39;adam&#39; in s &#x2F;&#x2F;True</span><br><span class="line">print &#39;bart&#39; in s &#x2F;&#x2F;True</span><br><span class="line">print &#39;Bart&#39; in s &#x2F;&#x2F;False</span><br></pre></td></tr></table></figure>

<p>判断月份是不是对的,如果使用if-else将会很繁琐</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">months &#x3D; set([&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;])</span><br><span class="line">x1 &#x3D; &#39;Feb&#39;</span><br><span class="line">x2 &#x3D; &#39;Sun&#39;</span><br><span class="line"></span><br><span class="line">if x1 in months:</span><br><span class="line">    print &#39;x1: ok&#39;</span><br><span class="line">else:</span><br><span class="line">    print &#39;x1: error&#39;</span><br><span class="line"></span><br><span class="line">if x2 in months:</span><br><span class="line">    print &#39;x2: ok&#39;</span><br><span class="line">else:</span><br><span class="line">    print &#39;x2: error&#39;</span><br></pre></td></tr></table></figure>

<p>遍历set </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;请用 for 循环遍历如下的set，打印出 name: score 来。</span><br><span class="line">s &#x3D; set([(&#39;Adam&#39;, 95), (&#39;Lisa&#39;, 85), (&#39;Bart&#39;, 59)])</span><br><span class="line">for t in s:</span><br><span class="line">    print t[0],&quot;:&quot;,t[1]</span><br><span class="line">    </span><br><span class="line">&#x2F;** log: *&#x2F;</span><br><span class="line"></span><br><span class="line">Lisa : 85</span><br><span class="line">Adam : 95</span><br><span class="line">Bart : 59</span><br></pre></td></tr></table></figure>

<p>set也有add和remove操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;不能添加重复的元素,否则为无效操作</span><br><span class="line">&gt;&gt;&gt; s &#x3D; set([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; s.add(4)</span><br><span class="line">&gt;&gt;&gt; print s</span><br><span class="line">set([1, 2, 3, 4])</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;移除操作针对已有的元素进行删除,移除不存在的元素时会报错</span><br><span class="line">&gt;&gt;&gt; s &#x3D; set([1, 2, 3, 4])</span><br><span class="line">&gt;&gt;&gt; s.remove(4)</span><br><span class="line">&gt;&gt;&gt; print s</span><br><span class="line">set([1, 2, 3])</span><br></pre></td></tr></table></figure>

<h3 id="python-网络请求相关"><a href="#python-网络请求相关" class="headerlink" title="python 网络请求相关"></a>python 网络请求相关</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urlopen一般可以接受三个参数：</span><br><span class="line">urlopen(url, data, timeout)</span><br><span class="line"></span><br><span class="line">第一个参数url即为URL</span><br><span class="line">第二个参数data是访问URL时要传送的数据，默认为None</span><br><span class="line">第三个timeout是设置超时时间，默认为 socket._GLOBAL_DEFAULT_TIMEOUT</span><br></pre></td></tr></table></figure>

<p>修改请求头: 找到Google Chrome打开开发者工具,找到network , 然后刷新网页,查看请求头,把请求头copy出来进行调试  或者直接 浏览器打开<br><code>http://httpbin.org/headers</code> 测试header的一个工具站点.<br>将headers组装进Request对象中 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span>  urllib.request <span class="keyword">import</span>  Request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,en;q=0.6"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">req = Request(<span class="string">'http://httpbin.org/headers'</span>,headers=headers)</span><br><span class="line">resp=urllib.request.urlopen(req)</span><br><span class="line"><span class="keyword">print</span> (resp.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<h4 id="使用Get方法访问"><a href="#使用Get方法访问" class="headerlink" title="使用Get方法访问"></a>使用Get方法访问</h4><p>携带一些信息访问一些网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  urllib.request</span><br><span class="line"><span class="keyword">import</span>  urllib.parse</span><br><span class="line"></span><br><span class="line">query = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">'q'</span> : <span class="string">"火影忍者"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">base_url=<span class="string">"https://www.bing.com/search?"</span></span><br><span class="line"></span><br><span class="line">url = base_url + urllib.parse.urlencode(query=query)</span><br><span class="line"></span><br><span class="line">html = urllib.request.urlopen(url).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>


<h4 id="POST访问"><a href="#POST访问" class="headerlink" title="POST访问"></a>POST访问</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span>  Request</span><br><span class="line"></span><br><span class="line">data = urllib.parse.urlencode(&#123;</span><br><span class="line">    <span class="string">"q"</span>:<span class="string">"python"</span>,</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"wgb"</span>,</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"two click 666"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">"http://httpbin.org/post"</span></span><br><span class="line">req = Request(base_url,data=bytes(data,<span class="string">"utf-8"</span>))</span><br><span class="line">html = urllib.request.urlopen(req).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.xicidaili.com" target="_blank" rel="noopener">用于测试: 国内免费代理IP</a></p>
<h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://122.72.32.74:80'</span>,</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure>

<h4 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">cookies &#x3D; http.cookiejar.CookieJar()</span><br><span class="line">handler &#x3D; urllib.request.HTTPCookieProcessor(cookies)</span><br><span class="line">opener &#x3D; urllib.request.build_opener(handler)</span><br><span class="line">response &#x3D; opener.open(&#39;http:&#x2F;&#x2F;www.baidu.com&#39;)</span><br><span class="line">for cookie in cookie:</span><br><span class="line">    print(cookie.name + &quot;&#x3D;&quot;+ cookie.value)</span><br></pre></td></tr></table></figure>

<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul>
<li><p>URLError</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.error</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    response &#x3D; urllib.request.urlopen(&#39;http:&#x2F;&#x2F;nd.com&#39;) # 不存在</span><br><span class="line">except urllib.error.URLError as e:</span><br><span class="line">    print(e.reason)</span><br><span class="line">else:</span><br><span class="line">    html &#x3D; response.read().decode(&#39;utf-8&#39;)</span><br><span class="line">    print(html)</span><br></pre></td></tr></table></figure>
</li>
<li><p>HTTPError</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.error</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    response &#x3D; urllib.request.urlopen(&#39;http:&#x2F;&#x2F;nd.com&#39;) # 不存在</span><br><span class="line">except urllib.error.HttpError as e:</span><br><span class="line">    print(e.reason)</span><br><span class="line">else:</span><br><span class="line">    html &#x3D; response.read().decode(&#39;utf-8&#39;)</span><br><span class="line">    print(html)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="正则的使用import-re"><a href="#正则的使用import-re" class="headerlink" title="正则的使用import re"></a>正则的使用<code>import re</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"> print(re.match(<span class="string">"123"</span>,<span class="string">"123wqwfsdoonsnssms"</span>).group())<span class="comment">#从起始位置开始匹配,没有在起始位置则none</span></span><br><span class="line">print(re.search(<span class="string">"123"</span>,<span class="string">"23sdd123kkkddl"</span>).span())<span class="comment"># 返回第一个匹配结果的范围</span></span><br></pre></td></tr></table></figure>

<h4 id="re-compile函数"><a href="#re-compile函数" class="headerlink" title="re.compile函数"></a>re.compile函数</h4><p> 有时候，我们可能会在代码中大量重复使用相同的模式，这时我们可以将正则字符串编译成正则对象，以便于复用该匹配模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string  &#x3D; &quot;fjfjkks12345skisnn56777kkjsns #$%fi~~&#96;&#96;&#96;&#96;&quot;</span><br><span class="line">pattern &#x3D; re.compile(&#39;(\d+)&#39;)</span><br><span class="line"># result &#x3D; re.search(pattern,string)</span><br><span class="line"># print(result.group())</span><br><span class="line"></span><br><span class="line">result &#x3D; re.findall(pattern,string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h4 id="爬取糗事百科的段子"><a href="#爬取糗事百科的段子" class="headerlink" title="爬取糗事百科的段子~"></a>爬取糗事百科的段子~</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span>  urllib.request</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span>  urllib.request <span class="keyword">import</span>  Request</span><br><span class="line"></span><br><span class="line">user_agent = [<span class="string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Mobile Safari/537.36'</span>,</span><br><span class="line">              <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span></span><br><span class="line">              ]</span><br><span class="line">headers = &#123; <span class="string">"User-Agent"</span> : random.choice(user_agent)&#125;</span><br><span class="line"></span><br><span class="line">urlString = <span class="string">"https://www.qiushibaike.com/"</span></span><br><span class="line">request = Request(urlString,headers=headers)</span><br><span class="line">htmlString = urllib.request.urlopen(request).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># print(htmlString)</span></span><br><span class="line">pattern = re.compile(<span class="string">'&lt;div\s*?class="content".*?&lt;span&gt;(.*?)&lt;/span&gt;'</span>,re.S)</span><br><span class="line">result = re.findall(pattern,htmlString)</span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> result:</span><br><span class="line">    res = re.sub(<span class="string">'&lt;br/&gt;'</span>,<span class="string">''</span>,res)</span><br><span class="line">    res = res.strip()</span><br><span class="line">    print(res+<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="百思不得姐的段子"><a href="#百思不得姐的段子" class="headerlink" title="百思不得姐的段子"></a>百思不得姐的段子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span>  urllib.request</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span>  urllib.request <span class="keyword">import</span>  Request</span><br><span class="line"></span><br><span class="line">user_agent = [<span class="string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Mobile Safari/537.36'</span>,</span><br><span class="line">              <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span></span><br><span class="line">              ]</span><br><span class="line">headers = &#123; <span class="string">"User-Agent"</span> : random.choice(user_agent)&#125;</span><br><span class="line"></span><br><span class="line">urlString = <span class="string">"http://www.budejie.com/text/"</span></span><br><span class="line">request = Request(urlString,headers=headers)</span><br><span class="line">htmlString = urllib.request.urlopen(request).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># print(htmlString)</span></span><br><span class="line">pattern = re.compile(<span class="string">'&lt;a href="/detail-\d+.html"&gt;(.*?)&lt;/a&gt;'</span>,re.S)</span><br><span class="line">result = re.findall(pattern,htmlString)</span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> result:</span><br><span class="line">    res = re.sub(<span class="string">'&lt;br/&gt;'</span>,<span class="string">''</span>,res)</span><br><span class="line">    res = res.strip()</span><br><span class="line">    print(res+<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>

<h6 id="正则技巧是需要取得的内容使用-正则匹配-d-代表一串数字若干-代表除了换行符外的其他任意字符…"><a href="#正则技巧是需要取得的内容使用-正则匹配-d-代表一串数字若干-代表除了换行符外的其他任意字符…" class="headerlink" title="正则技巧是需要取得的内容使用 (.*?)正则匹配, \d+代表一串数字若干, .*?代表除了换行符外的其他任意字符…"></a>正则技巧是需要取得的内容使用 <code>(.*?)</code>正则匹配, <code>\d+</code>代表一串数字若干, <code>.*?</code>代表除了换行符外的其他任意字符…</h6><p><code>玩这个东西,对于正则一定要烂熟于心啊</code></p>
<h4 id="时需要数据组装或者数据改造"><a href="#时需要数据组装或者数据改造" class="headerlink" title="时需要数据组装或者数据改造"></a>时需要数据组装或者数据改造</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span>  urllib.request</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span>  urllib.request <span class="keyword">import</span>  Request</span><br><span class="line"></span><br><span class="line">user_agent = [<span class="string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Mobile Safari/537.36'</span>,</span><br><span class="line">              <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span></span><br><span class="line">              ]</span><br><span class="line">headers = &#123; <span class="string">"User-Agent"</span> : random.choice(user_agent)&#125;</span><br><span class="line"></span><br><span class="line">urlString = <span class="string">"http://www.budejie.com/text/"</span></span><br><span class="line">request = Request(urlString,headers=headers)</span><br><span class="line">htmlString = urllib.request.urlopen(request).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># print(htmlString)</span></span><br><span class="line">pattern1 = re.compile(<span class="string">'&lt;a href="/detail-\d+.html"&gt;(.*?)&lt;/a&gt;'</span>,re.S) <span class="comment"># 获取内容</span></span><br><span class="line">pattern2 = re.compile(<span class="string">'&lt;a href="/user/others-\d+.html" class="u-user-name" target="_blank"&gt;(.*?)&lt;/a&gt;'</span>)<span class="comment">#获取用户名</span></span><br><span class="line"></span><br><span class="line">result1 = re.findall(pattern1,htmlString)</span><br><span class="line">result2 = re.findall(pattern2,htmlString)</span><br><span class="line"></span><br><span class="line"><span class="comment"># index,value in enumerate(l)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># result1 len = 44</span></span><br><span class="line"><span class="comment"># result2 len = 20</span></span><br><span class="line"><span class="comment"># 越界操作了咋办----&gt;反过来写呗 没有名字的不显示不可以嘛</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,nickName <span class="keyword">in</span> enumerate(result2):</span><br><span class="line">    <span class="comment"># print(index,value)</span></span><br><span class="line">    value = result1[index]</span><br><span class="line">    value = re.sub(<span class="string">'&lt;br/&gt;'</span>,<span class="string">''</span>,value)</span><br><span class="line">    value = value.strip()</span><br><span class="line">    print(<span class="string">'作者: '</span> + nickName + <span class="string">"\n"</span> + <span class="string">"段子: "</span> + value + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="几行代码简单生成词云-实践"><a href="#几行代码简单生成词云-实践" class="headerlink" title="几行代码简单生成词云 (实践)"></a>几行代码简单生成词云 (实践)</h2><h4 id="1-准备文本文件-也就是文章或者大量的词语-用于分词系统切割-然后进行分析-词频高的会展示出来字体高亮且加粗加大"><a href="#1-准备文本文件-也就是文章或者大量的词语-用于分词系统切割-然后进行分析-词频高的会展示出来字体高亮且加粗加大" class="headerlink" title="1. 准备文本文件,也就是文章或者大量的词语,用于分词系统切割,然后进行分析,词频高的会展示出来字体高亮且加粗加大"></a>1. 准备文本文件,也就是文章或者大量的词语,用于分词系统切割,然后进行分析,词频高的会展示出来字体高亮且加粗加大</h4><h4 id="2-pycharm里使用pip包管理工具-类似于iOS中的cocoapods般的存在-先安装几个库matplotlib-wordcloud-jieba"><a href="#2-pycharm里使用pip包管理工具-类似于iOS中的cocoapods般的存在-先安装几个库matplotlib-wordcloud-jieba" class="headerlink" title="2. pycharm里使用pip包管理工具,类似于iOS中的cocoapods般的存在, 先安装几个库matplotlib,wordcloud,jieba"></a>2. pycharm里使用pip包管理工具,类似于iOS中的cocoapods般的存在, 先安装几个库<code>matplotlib</code>,<code>wordcloud</code>,<code>jieba</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo brew install pip ///安装pip</span><br><span class="line">sudo easy_install pip ///以上两种方式均可</span><br></pre></td></tr></table></figure>
<h4 id="3-开始写代码"><a href="#3-开始写代码" class="headerlink" title="3. 开始写代码"></a>3. 开始写代码</h4><ul>
<li>把第三方库引入</li>
<li>读取文本</li>
<li>切割文本即分词</li>
<li>设置词云属性</li>
<li>渲染文本为词云</li>
<li>展示即完成</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">text_from_file_with_apath = open(<span class="string">'/Users/wangguibin/Desktop/ciyun.txt'</span>).read()</span><br><span class="line"></span><br><span class="line">wordlist_after_jieba = jieba.cut(text_from_file_with_apath, cut_all=<span class="literal">True</span>)</span><br><span class="line">wl_space_split = <span class="string">" "</span>.join(wordlist_after_jieba)</span><br><span class="line"></span><br><span class="line">my_wordcloud = WordCloud(background_color = <span class="string">'white'</span>,    <span class="comment"># 设置背景颜色</span></span><br><span class="line">                font_path = <span class="string">'/Library/Fonts/Songti.ttc'</span>,<span class="comment"># 设置字体格式，如不设置显示不了中文</span></span><br><span class="line">                max_font_size = <span class="number">50</span>,            <span class="comment"># 设置字体最大值</span></span><br><span class="line">                random_state = <span class="number">10</span>,            <span class="comment"># 设置有多少种随机生成状态，即有多少种配色方案</span></span><br><span class="line">                ).generate(wl_space_split)</span><br><span class="line"></span><br><span class="line">plt.imshow(my_wordcloud)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p> <strong>先写这么多,后续有时间继续探索,人生苦短,我用python</strong></p>
]]></content>
      <tags>
        <tag>学习总结</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>我的git笔记</title>
    <url>/hexo-github-action/2017/09/26/%E6%88%91%E7%9A%84git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h5 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1. 创建版本库"></a>1. 创建版本库</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">mkdir gitDemo /<span class="regexp">/创建一个文件夹</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">pwd /</span><span class="regexp">/查看当前路径 /</span>Users/wangguibin/Desktop/gitDemo</span><br><span class="line"></span><br><span class="line">git init /<span class="regexp">/创建一个版本库</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/Initialized empty Git repository in /</span>Users/wangguibin/Desktop/gitDemo/.git/</span><br><span class="line"></span><br><span class="line">ls -ah /<span class="regexp">/查看当前目录中的隐藏文件 .git</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/.	..	.git</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">touch readme.txt /</span><span class="regexp">/创建一个文本</span></span><br><span class="line"><span class="regexp">vi readme.txt /</span><span class="regexp">/修改文本内容</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h5 id="2-修改的文件或者创建的新文件提交到版本仓库"><a href="#2-修改的文件或者创建的新文件提交到版本仓库" class="headerlink" title="2. 修改的文件或者创建的新文件提交到版本仓库"></a>2. 修改的文件或者创建的新文件提交到版本仓库</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git add  readme.txt /<span class="regexp">/添加到版本库</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/一般添加成功不会有任何提示</span></span><br><span class="line"><span class="regexp">git commit -m "first update readme file git is 666" /</span><span class="regexp">/ -m 后面的字符串是log日志信息,提交了啥改了啥说明一下,便于管理</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">提交成功有以下提示信息: </span></span><br><span class="line"><span class="regexp">[master (root-commit) 4acf248] first update readme file git is 666</span></span><br><span class="line"><span class="regexp"> 1 file changed, 5 insertions(+)</span></span><br><span class="line"><span class="regexp"> create mode 100644 readme.txt</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">(PS.可以一次添加多个文件,一次性提交)</span></span><br><span class="line"><span class="regexp">****************************************</span></span><br><span class="line"><span class="regexp">$ git add file1.txt</span></span><br><span class="line"><span class="regexp">$ git add file2.txt file3.txt</span></span><br><span class="line"><span class="regexp">$ git commit -m "add 3 files."</span></span><br><span class="line"><span class="regexp">**********************************************</span></span><br><span class="line"><span class="regexp"> 错误❌示范</span></span><br><span class="line"><span class="regexp"> git commit -a "提交readme.txt的最近更新"</span></span><br><span class="line"><span class="regexp">fatal: Paths with -a does not make sense.</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">正确✅姿势</span></span><br><span class="line"><span class="regexp">git commit -a -m "提交readme.txt的最近更新"</span></span><br><span class="line"><span class="regexp">[master ec855f8] 提交readme.txt的最近更新</span></span><br><span class="line"><span class="regexp"> 1 file changed, 5 insertions(+)</span></span><br></pre></td></tr></table></figure>

<h5 id="3-查看是否有更改未提交的情况git-status"><a href="#3-查看是否有更改未提交的情况git-status" class="headerlink" title="3. 查看是否有更改未提交的情况git status"></a>3. 查看是否有更改未提交的情况<code>git status</code></h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git diff readme.txt<span class="comment">///查看文件被修改部分内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///没有更改,没有需要添加提交的地方</span></span><br><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line"><span class="comment">///需要添加和提交, 666.txt这个文件被修改了 ,没有提交</span></span><br><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   <span class="number">666.</span>txt</span><br><span class="line"></span><br><span class="line"><span class="function">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">///直接提交就好啦,不过这个 "git commit -a"操作也是可以的提交所有 , -m 是message的缩写,后面接一段说明文字</span></span></span><br><span class="line">git add 666.txt</span><br><span class="line">git commit -m <span class="string">"修改了666.txt"</span></span><br><span class="line">[master <span class="number">1</span>a46406] 修改了<span class="number">666.</span>txt</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br><span class="line"> </span><br><span class="line">git <span class="built_in">log</span> <span class="comment">//查看提交的日志</span></span><br></pre></td></tr></table></figure>
<h5 id="4-版本回退"><a href="#4-版本回退" class="headerlink" title="4. 版本回退"></a>4. 版本回退</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳到哪一个版本,秒秒钟的事,切一下头指针就ok,类似于链表的操作</span></span><br><span class="line">git log --pretty=oneline <span class="comment">//查看节点id和提交信息</span></span><br><span class="line">ec855f8114fced47737b61e8abfaa9fb5949a1ac (HEAD -&gt; master) 提交readme.txt的最近更新</span><br><span class="line"><span class="number">1</span>a46406038a5f50bd48a19daa38c599a6ff92fb6 修改了<span class="number">666.</span>txt</span><br><span class="line"><span class="number">6</span>b064208d5b992866cc1cc21cfd1b416e6b22258 commit <span class="number">666.</span>txt</span><br><span class="line"><span class="number">4</span>acf24867379120ae1fdfcc9521b0996ad863ae2 first update readme file git is <span class="number">666</span></span><br><span class="line"></span><br><span class="line">目前HEAD-&gt;master指向了<span class="string">"提交最近更新"</span>,就是我刚刚提交的</span><br><span class="line">下面那几个越往下,提交的时间越早...</span><br><span class="line"> git reset --hard HEAD^ <span class="comment">//回滚上一个版本,回滚到上上个则 HEAD^^,以此类推往回回滚100次则很难数得清楚^的个数可以写成 HEAD~100 这样</span></span><br><span class="line">git reset --hard commit_id <span class="comment">///提交id不用填写完整,前面几位就可以</span></span><br><span class="line"></span><br><span class="line">git reflog <span class="comment">///查看commit_id和提交历史记录</span></span><br><span class="line">git reflog</span><br><span class="line">ec855f8 (HEAD -&gt; master) HEAD@&#123;<span class="number">0</span>&#125;: commit: 提交readme.txt的最近更新</span><br><span class="line"><span class="number">1</span>a46406 HEAD@&#123;<span class="number">1</span>&#125;: commit: 修改了<span class="number">666.</span>txt</span><br><span class="line"><span class="number">6</span>b06420 HEAD@&#123;<span class="number">2</span>&#125;: commit: commit <span class="number">666.</span>txt</span><br><span class="line"><span class="number">4</span>acf248 HEAD@&#123;<span class="number">3</span>&#125;: commit (initial): first update readme file git is <span class="number">666</span></span><br></pre></td></tr></table></figure>

<h5 id="5-工作区和暂存区-跟踪修改"><a href="#5-工作区和暂存区-跟踪修改" class="headerlink" title="5. 工作区和暂存区,跟踪修改"></a>5. 工作区和暂存区,跟踪修改</h5><p><img src="http://wangguibin.github.io/post-images/1560698439826.png" alt=""><br><strong>git是如何操作的? 如图,先把修改的文件add到暂存区,然后再执行 git commit,比如有几个文件做了修改,你这个时候可以修改一个就执行add和commit操作,也可以先全部add完再执行一次commit, 建议是开发一个小模块,创建或者修改完就add进去,快下班的时候或者休息的时候翻篇的时候,就执行一次commit操作,不然这个容易忘记,还有模块与模块之间,开发周期与开发周期时间和时机的不同, 尽可能开发一部分就提交一部分,免得积攒大量的任务.. 节点多意味着更加灵活,后续想滚到哪里就滚到哪里…</strong></p>
<h5 id="6-撤销修改"><a href="#6-撤销修改" class="headerlink" title="6. 撤销修改"></a>6. 撤销修改</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">场景<span class="number">1</span>：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。</span><br><span class="line"></span><br><span class="line">场景<span class="number">2</span>：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景<span class="number">1</span>，第二步按场景<span class="number">1</span>操作。</span><br><span class="line"></span><br><span class="line">场景<span class="number">3</span>：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库</span><br></pre></td></tr></table></figure>
<h5 id="7-生成ssh-key"><a href="#7-生成ssh-key" class="headerlink" title="7.  生成ssh key"></a>7.  生成ssh key</h5><p><a href="http://blog.csdn.net/makenothing/article/details/8450417" target="_blank" rel="noopener">参考博客</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 检查是否有ssh key</span></span><br><span class="line"> cd ~/.ssh 查看这个目录下的文件</span><br><span class="line"> <span class="comment">///2. 生成key</span></span><br><span class="line"> ssh-keygen -t rsa -C <span class="string">"you email@email.com"</span> 或者去掉 －t rsa</span><br><span class="line"> <span class="comment">///3. 拷贝公钥,设置好对应的key github或者使用的站点</span></span><br><span class="line"> cat ~/.ssh/id_rsa.pub  查看并拷贝到到git添加设置key</span><br><span class="line"><span class="comment">///或者用命令添加到剪贴板</span></span><br><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment">///4. 测试一下这个ssh能不能使用</span></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h5 id="8-拉取远程库"><a href="#8-拉取远程库" class="headerlink" title="8.  拉取远程库"></a>8.  拉取远程库</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">///刻隆下来</span></span><br><span class="line"><span class="comment">///1.cd 到要存储的目录下</span></span><br><span class="line"><span class="comment">///2. 执行 git clone + 链接 </span></span><br><span class="line">git clone https:<span class="comment">//github.com/WangGuibin/WGBTagViewDemo.git</span></span><br><span class="line"><span class="comment">////git fetch</span></span><br><span class="line">git fetch：相当于是从远程获取最新版本到本地，不会自动merge</span><br><span class="line">git fetch origin master</span><br><span class="line">git <span class="built_in">log</span> -p master..origin/master</span><br><span class="line">git merge origin/master</span><br><span class="line"></span><br><span class="line">git fetch origin master:tmp</span><br><span class="line">git diff tmp </span><br><span class="line">git merge tmp</span><br><span class="line"><span class="comment">////git pull</span></span><br><span class="line">git pull：相当于是从远程获取最新版本并merge到本地</span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line">`git pull origin master`</span><br><span class="line">上述命令其实相当于git fetch 和 git merge</span><br><span class="line">在实际使用中，git fetch更安全一些</span><br><span class="line">因为在merge前，我们可以查看更新情况，然后再决定是否合并</span><br><span class="line"></span><br><span class="line">gfo master ：temp</span><br><span class="line">gd temp 比較 </span><br><span class="line">gm temp 合并遠程分支</span><br><span class="line">gbd “temp” 刪掉臨時分支</span><br></pre></td></tr></table></figure>
<h5 id="9-推送到远程库"><a href="#9-推送到远程库" class="headerlink" title="9.  推送到远程库"></a>9.  推送到远程库</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/springbarley/archive/2012/11/03/2752984.html" target="_blank" rel="noopener">git删除,分支,打tag,拉取和推送远程库参考命令</a></p>
<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Git鼓励大量使用分支：</span><br><span class="line"></span><br><span class="line">查看分支：git branch</span><br><span class="line"></span><br><span class="line">创建分支：git branch &lt;name&gt; 或者 git switch branchName</span><br><span class="line"></span><br><span class="line">切换分支：git checkout &lt;name&gt; 或者 git switch branchName</span><br><span class="line"></span><br><span class="line">创建+切换分支：git checkout -b &lt;name&gt; 或者 git switch -c branchName</span><br><span class="line"></span><br><span class="line">合并某分支到当前分支：git merge &lt;name&gt; </span><br><span class="line">(使用 git merge branchName -m <span class="string">"xxx"</span> --no-ff 其中--no-ff </span><br><span class="line">Git默认会用Fast forward模式，但这种模式下，删除分支后，</span><br><span class="line">会丢掉分支信息,强制禁用Fast forward模式，</span><br><span class="line">加上--no-ff就可以查看完整的分支历史信息，不受分支删除影响。)</span><br><span class="line"></span><br><span class="line">删除分支：git branch -d &lt;name&gt;</span><br><span class="line"></span><br><span class="line">删除远程分支: </span><br><span class="line">git push origin --delete branchName 或者</span><br><span class="line">git branch -r -d origin/dev &amp;&amp; git push origin <span class="symbol">:dev</span> 或者</span><br><span class="line">git push origin -d &lt;branch name&gt; 其中 </span><br><span class="line">git push origin <span class="symbol">:branchName</span> 原型是 git push origin <span class="symbol">master:</span>branchName </span><br><span class="line">将本地的master分支推送到远程的branchName</span><br></pre></td></tr></table></figure>
<h3 id="打tag"><a href="#打tag" class="headerlink" title="打tag"></a>打tag</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">命令git tag &lt;name&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id；</span><br><span class="line"></span><br><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">"blablabla..."</span>可以指定标签信息；</span><br><span class="line"></span><br><span class="line">git tag -s &lt;tagname&gt; -m <span class="string">"blablabla..."</span>可以用PGP签名标签；</span><br><span class="line"></span><br><span class="line">命令git tag可以查看所有标签。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令git push origin &lt;tagname&gt;可以推送一个本地标签；</span><br><span class="line"></span><br><span class="line">命令git push origin --tags可以推送全部未推送过的本地标签；</span><br><span class="line"></span><br><span class="line">命令git tag -d &lt;tagname&gt;可以删除一个本地标签；</span><br><span class="line"></span><br><span class="line">命令git push origin <span class="symbol">:refs/tags/&lt;tagname&gt;</span>可以删除一个远程标签。</span><br><span class="line"></span><br><span class="line">git tag <span class="comment">#查看已有tag</span></span><br><span class="line">git tag tagName <span class="comment">#当前分支最新节点的tag</span></span><br><span class="line"><span class="comment"># 指定节点打tag并添加release note信息  </span></span><br><span class="line">git tag -a v<span class="number">0</span>.<span class="number">1</span> -m <span class="string">"version 0.1 released"</span> <span class="number">1094</span>adb</span><br><span class="line">git tag -d &lt;tagname&gt; <span class="comment">#删除本地标签</span></span><br><span class="line">git show &lt;tagname&gt; <span class="comment">#可以看到说明文字：</span></span><br><span class="line">git push origin v1.<span class="number">0</span> <span class="comment">#推送指定本地标签</span></span><br><span class="line">git push origin --tags <span class="comment">#一次性全部推</span></span><br><span class="line">git push origin <span class="symbol">:refs/tags/v0</span>.<span class="number">9</span> <span class="comment">#删除指定的远程标签</span></span><br><span class="line">git push origin <span class="symbol">:&lt;branch&gt;/&lt;tag&gt;</span> <span class="comment">#删除指定的远程标签 注意冒号 : 必不可少, 后面跟远程库的分支名/标签名</span></span><br></pre></td></tr></table></figure>

<h3 id="记录一次实战操作步骤"><a href="#记录一次实战操作步骤" class="headerlink" title="记录一次实战操作步骤"></a>记录一次实战操作步骤</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/ cd Desktop 进入桌面创建一个文件夹</span></span><br><span class="line"><span class="regexp"> mkdir WGBGitTest</span></span><br><span class="line"><span class="regexp"> cd  WGBGitTest /</span><span class="regexp">/ 进入文件夹</span></span><br><span class="line"><span class="regexp"> git init /</span><span class="regexp">/实例化git</span></span><br><span class="line"><span class="regexp"> touch wgb.txt /</span><span class="regexp">/创建文件,编辑文件,查看文件....</span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/添加到暂存区</span></span><br><span class="line"><span class="regexp"> git add . 或者 git add wgb.txt</span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/提交给git</span></span><br><span class="line"><span class="regexp"> git commit -m"logMsg"</span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/打上tag</span></span><br><span class="line"><span class="regexp"> git tag tagName</span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/推送远端</span></span><br><span class="line"><span class="regexp"> git push origin tagName</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/ 开分支 从旧的分支分一个旁路分支进行操作 并切换到子分支进行开发</span></span><br><span class="line"><span class="regexp"> git checkout -b  newBranchName</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/ 切换到子分支进行开发</span></span><br><span class="line"><span class="regexp"> git checkout  branchName</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/ 此时子分支拥有当前master的一切的基础上进行修改,肆意妄为,改动一大波之后,按部就班提交代码到git</span></span><br><span class="line"><span class="regexp"> git add XXX  /</span> git commit -m<span class="string">"XXX"</span> </span><br><span class="line"> </span><br><span class="line">/<span class="regexp">/ 希望得到master的认可,master看了代码之后觉得ok,同意接受子分支的代码,于是切换回master分支进行分支合并</span></span><br><span class="line"><span class="regexp">git checkout master /</span><span class="regexp">/回到主分支</span></span><br><span class="line"><span class="regexp">git merge --no-ff  branchName /</span><span class="regexp">/合并子分支 加--no-ff 参数显示提交细节,不加的话相当于跳过子分支的提交细节</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 也可删除子分支</span></span><br><span class="line"><span class="regexp">git branch -d branchName</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/一波操作</span></span><br><span class="line"><span class="regexp">git add XXX /git</span> commit -m<span class="string">"XXXX"</span></span><br><span class="line">/<span class="regexp">/ 打上tag</span></span><br><span class="line"><span class="regexp">git tag tagName001</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/查看tag</span></span><br><span class="line"><span class="regexp">git tag</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 删除tag </span></span><br><span class="line"><span class="regexp">git tag -d tagName commitID</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 查看log信息</span></span><br><span class="line"><span class="regexp">git reflog </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 推送远端</span></span><br><span class="line"><span class="regexp">git push origin --tags /</span><span class="regexp">/ 全部未提交的一起上去</span></span><br></pre></td></tr></table></figure>

<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">//</span> 生动形象查看git log</span><br><span class="line">git log --graph 或者</span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line">git add . 或者 git add &lt;filename&gt;</span><br><span class="line"></span><br><span class="line">git commit –m <span class="string">"项目描述"</span></span><br><span class="line"></span><br><span class="line">要关联一个远程库，使用命令</span><br><span class="line">git remote add origin git@server-<span class="symbol">name:</span>path/repo-name.git；</span><br><span class="line"></span><br><span class="line">关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</span><br><span class="line"></span><br><span class="line">此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</span><br><span class="line"></span><br><span class="line">/<span class="regexp">/ 本地分支推送到服务端,并远程建立一个新分支</span></span><br><span class="line"><span class="regexp">  git push origin  branchName :branchName</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/删除分支</span></span><br><span class="line"><span class="regexp">git branch -D branchName (本地)</span></span><br><span class="line"><span class="regexp">git push origin  :branchName</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 删除标签</span></span><br><span class="line"><span class="regexp">git tag -d tagName</span></span><br><span class="line"><span class="regexp">git push origin :refs/tags</span><span class="regexp">/tagName</span></span><br></pre></td></tr></table></figure>

<h3 id="放弃当前本地修改-强制拉取远程库最新的更新"><a href="#放弃当前本地修改-强制拉取远程库最新的更新" class="headerlink" title="放弃当前本地修改,强制拉取远程库最新的更新"></a>放弃当前本地修改,强制拉取远程库最新的更新</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull /<span class="regexp">/可以省略</span></span><br></pre></td></tr></table></figure>



<h3 id="alias-grep-git-调用zsh的插件-git-缩写"><a href="#alias-grep-git-调用zsh的插件-git-缩写" class="headerlink" title="alias | grep git 调用zsh的插件 git 缩写"></a><code>alias | grep git</code> 调用zsh的插件 git 缩写</h3><p><code>ga</code> =<code>git add</code><br><code>gaa</code>=<code>git add --all</code><br><code>gb</code>= <code>git branch</code><br><code>gcam</code>=<code>git commit -a -m</code><br><code>gcb</code>= <code>git checkout -b</code><br><code>gco</code>=<code>git checkout</code><br><code>gm --no-ff</code>=<code>git merge --no-ff</code><br><code>gcmsg</code>=<code>git commit -m</code><br><code>gpoat</code>=<code>git push origin --all &amp;&amp; git push origin --tags</code></p>
<p><code>gfa</code> = <code>git fetch --all --prune</code><br><code>grhh</code>= <code>git reset HEAD --hard</code></p>
<p> <a href="http://blog.jobbole.com/109466/" target="_blank" rel="noopener">深入理解分支的重要性</a><br> <a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">git命令清单</a></p>
<h1 id="Debug-遇到的一些各种各样的问题"><a href="#Debug-遇到的一些各种各样的问题" class="headerlink" title="Debug 遇到的一些各种各样的问题"></a>Debug 遇到的一些各种各样的问题</h1><h5 id="1-clone代码的时候遇到如下报错"><a href="#1-clone代码的时候遇到如下报错" class="headerlink" title="1.  clone代码的时候遇到如下报错"></a>1.  clone代码的时候遇到如下报错</h5><p><code>fatal: Authentication failed for &#39;https://gitee.com/iOSCoder-JJMY/JJYSClient.git/&#39;</code><br><em>重新设置用户名和邮箱即可</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;wangguibin&quot;</span><br><span class="line">git config --global user.email &quot;wangguibin@jjys168.com&quot;</span><br></pre></td></tr></table></figure>

<h5 id="2-如果你在主分支-master-上做了修改-子分支-dev-想要同步主分支的修改-那么有以下两种操作"><a href="#2-如果你在主分支-master-上做了修改-子分支-dev-想要同步主分支的修改-那么有以下两种操作" class="headerlink" title="2. 如果你在主分支(master)上做了修改,子分支(dev)想要同步主分支的修改,那么有以下两种操作:"></a>2. 如果你在主分支(master)上做了修改,子分支(dev)想要同步主分支的修改,那么有以下两种操作:</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一: git merge 合并分支</span></span><br><span class="line">git checkout dev <span class="comment">#切换到子分支 </span></span><br><span class="line">git merge master <span class="comment">#合并主分支 即让主分支覆盖子分支 拥有主分支的当前所有更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二: git rebase 好像也叫合并分支</span></span><br><span class="line">git checkout  dev</span><br><span class="line">git rebase master /<span class="regexp">/ 将 master 上的修改合并到 dev 分支（当前分支）。</span></span><br><span class="line"><span class="regexp">```  </span></span><br><span class="line"><span class="regexp">**`rebase` 会将 `dev `上的历史 `commit` 全部修改，并且用新的提交覆盖之。 看起来就是你的 `dev `分支从一个开始就是在最新的 `master` 上开发的( 新的`master`跑到了你分支的最开始处 )**</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">//</span> 如果提交信息写错了而提交了可以修改,命令如下(进入vim编辑)<span class="symbol">:</span></span><br><span class="line"><span class="string">``</span><span class="string">`ruby</span></span><br><span class="line"><span class="string">git commit --amend</span></span><br></pre></td></tr></table></figure>



<p><a href="https://segmentfault.com/q/1010000003875183" target="_blank" rel="noopener">1. 合并父子分支更新的参考实例</a></p>
<p><a href="https://www.cnblogs.com/marblemm/p/7161614.html" target="_blank" rel="noopener">2. merge与rebase的区分和使用</a></p>
<p><a href="https://backlog.com/git-tutorial/cn/stepup/stepup2_8.html" target="_blank" rel="noopener">3 .猴子🐒都能懂的Git入门教程之使用用rebase</a></p>
<p><a href="https://www.zhihu.com/question/36509119/answer/131495331" target="_blank" rel="noopener">4. 在开发过程中使用git rebase还是git merge，优缺点分别是什么?</a></p>
<p><a href="http://blog.csdn.net/gw569453350game/article/details/52536928" target="_blank" rel="noopener">5. git rebase &amp; merge 将其他分支的修改合并到当前分支</a></p>
<p><a href="https://note.leodev.me/2016/01/08/git-commonly-used-commands/" target="_blank" rel="noopener">6. git常用命令</a></p>
]]></content>
      <tags>
        <tag>效率</tag>
        <tag>工具</tag>
        <tag>学习总结</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>科目一知识点总结</title>
    <url>/hexo-github-action/2020/08/09/%E7%A7%91%E7%9B%AE%E4%B8%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="科目一小技巧总结"><a href="#科目一小技巧总结" class="headerlink" title="科目一小技巧总结"></a>科目一小技巧总结</h1><h3 id="扣1分口诀"><a href="#扣1分口诀" class="headerlink" title="扣1分口诀"></a>扣1分口诀</h3><p>不带证照乱用灯，保险标志未放置。</p>
<p>会车不按规定行，载物超高和超宽。</p>
<a id="more"></a>

<h3 id="扣2分口诀"><a href="#扣2分口诀" class="headerlink" title="扣2分口诀"></a>扣2分口诀</h3><p>交叉路口乱行车，缓行路段超借道。</p>
<p>校车上路违规定，上下学生乱停靠。</p>
<p>行车未系安全带，摩托不戴安全帽。</p>
<p>接打电话危害多，扣掉2分给警告。</p>
<h3 id="扣3分口诀"><a href="#扣3分口诀" class="headerlink" title="扣3分口诀"></a>扣3分口诀</h3><p>车辆体检未定期，高速路上低速行。</p>
<p>两成以下超员载，三成以下超物载。</p>
<p>禁入高速偏驶入，客货车辆超时速。</p>
<p>人行横道不让路，不按规定车道行。</p>
<p>超车逆行不让道，牵引挂车违规定。</p>
<p>故障事故不警告，违反标志和标线。</p>
<h3 id="扣6分口诀"><a href="#扣6分口诀" class="headerlink" title="扣6分口诀"></a>扣6分口诀</h3><p>违反交通信号灯，暂扣期间仍驾驶。</p>
<p>营运客车和校车，超员超速低两成。</p>
<p>应急车道违法占，低能见度违规行。</p>
<p>化学易爆无警示，危险物品超时速。</p>
<p>校车到来不避让，补领驾照还欺瞒。</p>
<h3 id="扣12分口诀"><a href="#扣12分口诀" class="headerlink" title="扣12分口诀"></a>扣12分口诀</h3><p>车型不符用他照，饮酒驾驶事故逃。</p>
<p>校车载人超两成，高速路上超二零。</p>
<p>载客载物超疲劳，行驶时速超五零。</p>
<p>伪造变造牌证照，无牌遮挡还污损。</p>
<p>高速公路违规停，倒车逆行和穿越。</p>
<p>行驶车速超五成，驾驶校车竟无证。</p>
<h1 id="一些辅助记忆的小技巧"><a href="#一些辅助记忆的小技巧" class="headerlink" title="一些辅助记忆的小技巧"></a>一些辅助记忆的小技巧</h1><ol>
<li>假一吊二撤三醉五逃终身；<strong>(驾驶证申请所需时限)</strong></li>
<li>转弯过桥上窄道泥路/路口/人多不好走的路均不能超过<code>30km/h</code>；</li>
<li>左右观察左超车；<strong>(具备超车条件才能超车)</strong></li>
<li>交叉转弯窄路隧道桥梁坡道铁路口<code>50米</code>不能停车,公交站/加油站/消防局附近30米不得停车；<strong>(口5站3)</strong></li>
<li>驾驶证到期<code>90天</code>，变更<code>30天</code>内换。</li>
<li>转弯的机动车让直行的车辆先行，右方道路来车先行，右转弯车让左转弯车先行:<strong>(交叉路口会车原则: 直行&gt; 转弯, 右边直行 &gt; 左边直行,左转弯 &gt; 右转弯 )</strong></li>
<li>驾驶证的有效期为<code>6</code>年，没有扣分记录的第二次换证的为<code>10</code>年。<strong>(六,十,长期)</strong></li>
<li>机动车没有违规行为，只有违法行为。<strong>(交通道路安全法)</strong></li>
<li>交警手势大于交通信号灯。<strong>(信号灯🚥也是人造的,人 &gt; 灯)</strong></li>
<li>高速路同向有2条车道，右道的速度范围为60-100km/h，左道的速度范100-120km/h。如同方向有3条车道，右道的速度范围为60-90km/h，中间的90-110km/h，左道110-120km/h。<strong>(高速车道最低时速划分 两车道: 100km/h 60km/h  三车道: 110km/h 90km/h 60km/h  四车道: 110km/h 90km/h 90km/h 60km/h )</strong></li>
<li>有嫌疑的或未放置检验合格标志，未悬挂机动车号牌，未放置保险标志的，未携带机动车行驶证的都是可依法扣留车辆的。<strong>(是车不安全,所以是扣留车辆)</strong></li>
<li>驾驶证遗失、损毁无法辨认时核发地车辆管理所申请补发。</li>
<li>车速超过每小时<code>100km/h</code>，应当与同车道前车保持<code>100米以上</code>的距离，低于<code>100</code>的，<code>不少于50米</code>。<strong>(安全距离)</strong></li>
<li>续驾驶机动车超过<code>4</code>小时应停车休息，停车休息时间不少于<code>20</code>分钟。<strong>(谨防疲劳驾驶,每4小时休息20分钟)</strong></li>
<li>造成事故致人重伤但<code>没死</code>的处<code>3年以下</code>，造成事故<code>致死</code>的处<code>3-7年</code>，造成事故<code>逃逸后致死</code>的处罚<code>7-15</code>年 <strong>(事故量刑标准)</strong></li>
<li>小型汽车（<code>C1</code>）准驾车型：小型、微型载客汽车以及轻型、微型载货汽车；轻型、微型专项作业车，小型、微型自动挡载客汽车以及轻型、微型自动挡载货汽车，低速载货汽车，三轮汽车。<strong>(除了A2外只要持有大于准驾驶车型驾照的都可以驾驶)</strong></li>
<li>交通信号包括交通信号灯、交通标志、交通标线和交通警察的指挥。</li>
<li>在狭窄的坡路，上坡的一方先行；但下坡的一方已行至中途而上坡的一方未上坡时，下坡的一方先行。</li>
<li>用伪造、变造机动车号牌、行驶证、驾驶证或者使用其他机动车号牌、行驶证的，一次扣12分。<strong>(弄虚作假上路是很危险的)</strong></li>
<li>在行驶中被查获有吸毒注射毒品，在戒毒还没有成功的，注销驾驶证。<strong>(自己都控制不住,又怎么控制车)</strong></li>
<li>被查三年内又重新吸毒，注射毒品者或戒毒未满三年，又吸毒成瘾者，不得申请驾驶证。<strong>(有病就得根治)</strong></li>
<li>只有在没有路灯或者没有照明的情况下才能用远光灯,150米以外无来车或者前车的情况。</li>
<li>200米能见度，最高速60，车距100；100米能见度，最高车速40，车距50，能见度50米，车速20，尽快离开高速路。<strong>(速记: 261 145 520)</strong></li>
<li>无证驾驶就是你全责，属于犯法行为。</li>
<li>不能超车的有对面来回车的，在执行紧急任务的警车、消防车、救护车、工程救险车的，道口、交叉路口、窄桥、弯道、陡坡、隧道、人行横道、市区交通流量大的路段。</li>
<li>机动车驾驶人因服兵役、出国（境）等原因，无法在规定时间内办理驾驶证期满换证，延期期限最长不超过<code>三</code>年。</li>
<li>超过<code>60</code>岁就需要每年提交一次身体检查证明。</li>
<li>扣<code>6</code>分情况有，闯红灯，不避让校车，占用应急车道，驾驶证被扣后继续驾驶的。</li>
<li>红圈白底黑字为最高速度，蓝底白字为最低速度。<strong>(警示牌:红高蓝低黄建议 路面:黄高白低黑建议 )</strong></li>
<li>无论在哪里居住都可以向当地的车管所申请换证。</li>
<li>有道路中心线的道路，城市道路为30km/h，公路为40km/h；同方向只有1条机动车道的道路，城市道路为50km/h，公路为70km/h。</li>
<li>违反交规，不仅要罚钱，还要扣分。<strong>(扣分本身就是罚钱,扣分不会自动消除,需要缴纳罚款,可能还需要接受教育和考试)</strong></li>
<li>在高速公路上发生故障时，警告标志应当设置在故障车来车方向<code>150米以外</code>，车上人员应当迅速转移到右侧路肩上或者应急车道内，并且迅速报警。</li>
<li>小型自动挡汽车（<code>C2</code>）准驾车型：小型、微型自动挡载客汽车以及轻型、微型自动挡载货汽车。</li>
<li>在夜晚路过没有路灯和信号灯的路口，应该交替使用远近光灯，提示周围的车辆，以免发生事故。</li>
<li>对驾驶<code>拼装</code>的机动车上道路行驶的驾驶人，处<code>200元以上2000元以下</code>罚款，并吊销驾驶证。</li>
<li>申请小型汽车、小型自动挡汽车、残疾人专用小型自动挡载客汽车、轻便摩托车准驾车型的，在<code>18周岁以上，70周岁以下</code>。</li>
<li>能见度低，要开启前照灯、示廓灯和后位灯防止出现事故。</li>
<li>看清交警手势，手臂平直，接着他手臂轻轻压低或摆动，这是变道。手臂降低到腰部摆动，那是转弯。</li>
<li>驾驶准考证明有效期为<code>3</code>年。</li>
<li>凡是车辆进入<code>双向行驶隧道</code>,一般都应该开启<code>近光灯</code>,而不要开启<code>远光灯</code>。若是隧道本身没有灯光的,可以变换灯光行驶,但是<code>会车前要转为近光灯</code>。</li>
<li>转向灯操作，上右下左，跟时针一样，顺时针为右转，既往上打，逆时针为左转，既往下打。</li>
<li>从匝道进入高速公路加速车道，在<code>加速车道里</code>迅速将车速提高到每小时60公里以上。</li>
<li>ABS技术的出现，就是大大地<code>降低了侧滑</code>，和原地掉头的现象，保证了行驶的安全。如果，你在使用带ABS的车辆，在刹车时的动作，类似不带ABS的车这样<code>轻轻的踩下去</code>，很可能会<code>不能触发</code>ABS系统，也就起不到ABS的作用了，所以，一般就是要求，<code>刹车动作要果断，一脚就踩到底</code>，保证ABS的正确执行。</li>
<li>驾驶人在道路上驾驶机动车<code>追逐竞驶</code>，情节恶劣的处<code>3年以下</code>有期徒刑。</li>
<li>准驾车型驾驶证的驾驶人，发生交通事故造成人员死亡承担同等以上责任未被吊销机动车驾驶证的，应当在本记分周期结束后<code>三十日内</code>到公安机关交通管理部门接受审验。</li>
<li>进入<code>高速入口</code>需要提前打开<code>左转向灯</code>,提示高速后方直行来车,<code>驶离</code>高速开<code>右转向灯</code>, 进入环岛无需开转向灯,<code>驶离</code>环岛<code>需开右转向灯</code></li>
<li>虚线才能变更车道,需提前开启转向灯,高速公路错过变更车道的只能直行到下一个出口</li>
<li>判断是否酒驾还是醉驾,血液中酒精含量 <code>≥ 20毫克/100ml</code>为酒驾, <code>≥ 80毫克/100ml</code>为醉驾</li>
<li>普通道路逆行扣<code>3</code>分,高速扣<code>12</code>分</li>
</ol>
<h1 id="警告⚠️标志"><a href="#警告⚠️标志" class="headerlink" title="警告⚠️标志"></a>警告⚠️标志</h1><p><img src="http://exp-picture.cdn.bcebos.com/acfda02f4770461812483588b08602214e57762a.jpg" alt="图片资源来自互联网"></p>
<h1 id="指示标志"><a href="#指示标志" class="headerlink" title="指示标志"></a>指示标志</h1><p><img src="http://exp-picture.cdn.bcebos.com/03605157935653bb2cb2b5481d0b31210461712a.jpg" alt="图片资源来自互联网"></p>
<h1 id="禁令标志"><a href="#禁令标志" class="headerlink" title="禁令标志"></a>禁令标志</h1><p><img src="http://exp-picture.cdn.bcebos.com/30601b6104a355e9583c3964d22ae3efe178682a.jpg" alt="图片资源来自互联网"></p>
<p><img src="http://exp-picture.cdn.bcebos.com/586bfdefe07814313e24e3dfdc6699cf0353622a.jpg" alt="图片资源来自互联网"></p>
]]></content>
      <tags>
        <tag>科目一</tag>
        <tag>学车</tag>
      </tags>
  </entry>
  <entry>
    <title>重新入门python爬虫到放弃</title>
    <url>/hexo-github-action/2018/09/12/%E9%87%8D%E6%96%B0%E5%85%A5%E9%97%A8python%E7%88%AC%E8%99%AB%E5%88%B0%E6%94%BE%E5%BC%83/</url>
    <content><![CDATA[<blockquote>
<p>最近项目不忙,乘此机会重新学习了一下python爬虫, 引发了一些思考,以下几点:</p>
</blockquote>
<ol>
<li><p>学习python真的是从众现象一时热吗? 学了有什么用,能改变现状吗? 如果不学又当如何,干点什么事情好呢 </p>
</li>
<li><p>学习python到了现在是个分水岭,几乎各方面的知识都有所涉及,到底是往哪个方向发展呢?</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 数据爬虫 (网络请求,页面解析,设置headers,代理ip,cookies,处理异常,ajax&amp;&amp;JS等动态页面数据的获取,伪装浏览器的访问等… requests,BeautifulSoup,xpath,正则,selenium,phantomJS,scrapy) </li>
<li><input checked="" disabled="" type="checkbox"> 数据分析可视化(pyecharts,Echarts,csv,json等)</li>
<li><input checked="" disabled="" type="checkbox"> web前端 (Django …)</li>
<li><input checked="" disabled="" type="checkbox"> 后端 (数据库+服务器)</li>
<li><input checked="" disabled="" type="checkbox"> 机器学习 (尚未涉及)</li>
<li><input checked="" disabled="" type="checkbox"> 用来写工具/脚本 (用过别人写好的)</li>
<li><input checked="" disabled="" type="checkbox"> 做游戏 (听说吃鸡就是python在做的)</li>
<li><input checked="" disabled="" type="checkbox"> …</li>
</ul>
</li>
</ol>
<ol start="3">
<li>此时此刻,真的有些迷茫 , 但是人总是想着改变,只能说目前没有别的想法 ,学到一个是一个吧 ,但愿能派上用场吧</li>
</ol>
<a id="more"></a>

</br>
</br>
</br>

<p>[TOC]</p>
<h2 id="爬虫技巧"><a href="#爬虫技巧" class="headerlink" title="爬虫技巧"></a>爬虫技巧</h2><p>“人生苦短,我用<code>python</code>“,也许是因为简单,也许是因为效率高… 这门语言已经风靡全球,有些学校已经列为必修课了。</p>
<h3 id="下载器-使用什么框架爬取-必备"><a href="#下载器-使用什么框架爬取-必备" class="headerlink" title="下载器,使用什么框架爬取 (必备)"></a>下载器,使用什么框架爬取 (必备)</h3><h4 id="requests-BeautifulSoup-正则或者xpath也可"><a href="#requests-BeautifulSoup-正则或者xpath也可" class="headerlink" title="requests + BeautifulSoup (正则或者xpath也可)"></a>requests + BeautifulSoup (正则或者xpath也可)</h4><ul>
<li>用传统正则解析<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">'https://www.douban.com/doulist/3936288/'</span></span><br><span class="line">pattern = re.compile(<span class="string">'&lt;div\sclass="title"&gt;\s.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;'</span>,re.S)</span><br><span class="line">user_agent = [</span><br><span class="line">    <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)'</span>,</span><br><span class="line">    <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'start'</span>:i</span><br><span class="line">    &#125;</span><br><span class="line">    data = bytes(urlencode(data),<span class="string">'utf-8'</span>)</span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>:random.choice(user_agent)&#125;</span><br><span class="line">    requ = Request(base_url,data)</span><br><span class="line">    html = urllib.request.urlopen(requ).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    results = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        result = re.sub(<span class="string">'\n'</span>,<span class="string">''</span>,result)</span><br><span class="line">        print(result)</span><br></pre></td></tr></table></figure></li>
<li>用BeautifulSoup解析<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  urllib.request</span><br><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"><span class="keyword">import</span>  random</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span>  Request</span><br><span class="line"><span class="keyword">from</span>  urllib.parse <span class="keyword">import</span>  urlencode</span><br><span class="line"><span class="keyword">from</span>  bs4 <span class="keyword">import</span>  BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base_url = <span class="string">'https://www.douban.com/doulist/3936288/'</span></span><br><span class="line">user_agent = [<span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)'</span>,<span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'start'</span>:i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">data = bytes(urlencode(data),<span class="string">'utf-8'</span>) <span class="comment">#参数打成二进制</span></span><br><span class="line">header = &#123; <span class="string">'User-Agent'</span> : random.choice(user_agent) &#125; <span class="comment">#请求头</span></span><br><span class="line">req = Request(base_url,data,headers=header) <span class="comment"># url + 参数+ 请求头伪装成浏览器</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(req)</span><br><span class="line"><span class="keyword">except</span> urllib.error.HttpError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    html = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># print(html)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####注意以下是骚操作</span></span><br><span class="line">    soup =BeautifulSoup(html,<span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.select(<span class="string">'.title'</span>): <span class="comment">#类访问到div</span></span><br><span class="line">        a = item.select(<span class="string">'a'</span>)[<span class="number">0</span>] <span class="comment">#取到div里的a标签</span></span><br><span class="line">        title = a.get_text() <span class="comment">#获取a标签的文本内容</span></span><br><span class="line">        print(title)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="scrapy-BeautifulSoup-正则或者xpath也可"><a href="#scrapy-BeautifulSoup-正则或者xpath也可" class="headerlink" title="scrapy + BeautifulSoup (正则或者xpath也可)"></a>scrapy + BeautifulSoup (正则或者xpath也可)</h4><p><a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html" target="_blank" rel="noopener">scrapy中文教程</a><br></br></p>
<ul>
<li>BeautifulSoup<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = = response.text</span><br><span class="line">soup =BeautifulSoup(html) <span class="comment"># 原理同上</span></span><br></pre></td></tr></table></figure></li>
<li>正则 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = = response.text</span><br><span class="line">pattern = re.compile(<span class="string">'&lt;div.?class="autho r.?&gt;.?&lt;a.?.?&lt;a.?&gt;(.?).?&lt;div.?class'</span>+ <span class="string">'="content".?title="(.?)"&gt;(.?)(.*?)&lt;div class="stats.?class="number"&gt;(.?)'</span>,re.S)</span><br><span class="line">items = re.findall(pattern,html)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">     	print(item)</span><br></pre></td></tr></table></figure></li>
<li>xpath</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 豆瓣电影Top250</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span>  BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DoubanDianYing</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">            name = <span class="string">'douban'</span></span><br><span class="line">            allow_domains = [<span class="string">'movie.douban.com'</span>]</span><br><span class="line">            datalist = []</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">                    headers = &#123;</span><br><span class="line">                        <span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">251</span>,<span class="number">25</span>):</span><br><span class="line">                        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">0</span>:</span><br><span class="line">                             url = <span class="string">'https://movie.douban.com/top250?start=%d&amp;filter='</span> % page</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                             url = <span class="string">'https://movie.douban.com/top250'</span></span><br><span class="line">                        <span class="keyword">yield</span> scrapy.Request(url,headers=headers)</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">                    <span class="comment"># html = response.text</span></span><br><span class="line">                    <span class="comment"># bs = BeautifulSoup(html)</span></span><br><span class="line">                    <span class="comment"># 练习xpath</span></span><br><span class="line">                    titles = response.xpath(<span class="string">'//div/a/span[1]/text()'</span>).extract()</span><br><span class="line">                    imgs = response.xpath(<span class="string">'//div[@class="pic"]/a/img/@src'</span>).extract()</span><br><span class="line">                    links = response.xpath(<span class="string">'//div[@class="hd"]/a/@href'</span>).extract()</span><br><span class="line">                    actors = response.xpath(<span class="string">'//div[@class="bd"]/p/text()'</span>).extract()</span><br><span class="line">                    descs = response.xpath(<span class="string">'//span[@class="inq"]/text()'</span>).extract()</span><br><span class="line">                    rating = response.xpath(<span class="string">'//div[@class="star"]/span[@class="rating_num"]/text()'</span>).extract()</span><br><span class="line">                    hots = response.xpath(<span class="string">'//div[@class="star"]/span[4]/text()'</span>).extract()</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(imgs)):</span><br><span class="line">                             dic = &#123;&#125;</span><br><span class="line">                             dic[<span class="string">'title'</span>] = titles[index]</span><br><span class="line">                             dic[<span class="string">'img'</span>] = imgs[index]</span><br><span class="line">                             dic[<span class="string">'actors'</span>] = str(actors[index]).strip().replace(<span class="string">"\n"</span>,<span class="string">""</span>)</span><br><span class="line">                             dic[<span class="string">'rating'</span>] = rating[index]</span><br><span class="line">                             dic[<span class="string">'hot'</span>] = hots[index]</span><br><span class="line">                             dic[<span class="string">'link'</span>] = links[index]</span><br><span class="line">                             dic[<span class="string">'desc'</span>] = descs[index]</span><br><span class="line">                             self.datalist.append(dic)</span><br><span class="line">                    <span class="keyword">if</span> len(self.datalist) == <span class="number">250</span>:</span><br><span class="line">                        <span class="keyword">with</span> open(<span class="string">'dataSource.json'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                            json.dump(self.datalist, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h4 id="selenium-phantomJS-python3"><a href="#selenium-phantomJS-python3" class="headerlink" title="selenium + phantomJS + python3"></a>selenium + phantomJS + python3</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.PhantomJS()</span><br><span class="line">driver.get(<span class="string">'网址'</span>)</span><br><span class="line">html = driver.page_source <span class="comment"># 解析原理同上</span></span><br></pre></td></tr></table></figure>
<p>另外它也支持自己的解析语法: </br><br><em>参考博客</em> </br><br><code>参考崔庆才的博客</code><a href="https://cuiqingcai.com/2577.html" target="_blank" rel="noopener">https://cuiqingcai.com/2577.html</a> </br><br><code>参考知乎selenium文章</code><a href="https://zhuanlan.zhihu.com/p/29435831" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29435831</a></br><br><code>参考selenium博客</code><a href="https://cuiqingcai.com/2599.html" target="_blank" rel="noopener">https://cuiqingcai.com/2599.html</a></br><br><code>selenium+python+PhantomJS的使用</code><a href="http://www.cnblogs.com/jinxiao-pu/p/6677782.html#_label0" target="_blank" rel="noopener">http://www.cnblogs.com/jinxiao-pu/p/6677782.html#_label0</a></br></p>
<h3 id="目标网站即URL-必须"><a href="#目标网站即URL-必须" class="headerlink" title="目标网站即URL (必须)"></a>目标网站即URL (必须)</h3><ul>
<li><p>爬什么,心里得有数吧!</p>
<h3 id="代理ip-可选"><a href="#代理ip-可选" class="headerlink" title="代理ip(可选)"></a>代理ip(可选)</h3></li>
<li><p>网上一搜免费的代理ip一大堆,但是都不是很稳定的,用于学习还是可以满足的,商用的话还是建议花钱买稳定的好</p>
<h3 id="使用cookies-可选"><a href="#使用cookies-可选" class="headerlink" title="使用cookies (可选)"></a>使用cookies (可选)</h3></li>
<li><p>参考<a href="http://www.wangguibin.club/#/posts/python学习笔记" target="_blank" rel="noopener">python学习笔记</a> 有提到代理ip怎么设置 headers怎么设置 cookies的读写删除</p>
</li>
<li><p>使用selenium管理cookies</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cookies</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'name'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="如何处理AJAX和JS渲染的内容"><a href="#如何处理AJAX和JS渲染的内容" class="headerlink" title="如何处理AJAX和JS渲染的内容?"></a>如何处理AJAX和JS渲染的内容?</h3><ul>
<li>ajax 无非就是表单提交网络请求, 只要找到对应的标签节点和js函数,使用selenium的JS行为操作一番,把结果获取到进行解析即可</li>
<li>JS同理</br>

</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行JS</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("To Bottom")'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="如何绕过反爬虫机制"><a href="#如何绕过反爬虫机制" class="headerlink" title="如何绕过反爬虫机制?"></a>如何绕过反爬虫机制?</h3><ul>
<li>这里的反爬虫机制其实就是我们爬取数据的时候伪装成用户操作的行为一样就ok,频率和使用的硬件等信息要相似,验证码之类,或者弹窗之类的一般先模仿浏览器打开然后操作一步一步进行推进,最后到达想要的页面进行操作获取页面的数据 </li>
</ul>
<p><a href="https://github.com/WangGuibin/PythonLife" target="_blank" rel="noopener">平时操练的代码已经托管在github上了</a></p>
]]></content>
      <tags>
        <tag>效率</tag>
        <tag>工具</tag>
        <tag>学习总结</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS音频流混音实践</title>
    <url>/hexo-github-action/2021/08/31/iOS%E9%9F%B3%E9%A2%91%E6%B5%81%E6%B7%B7%E9%9F%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><strong>背景:</strong></p>
<blockquote>
<p> xx项目某个业务流程的某个功能,需要采集用户的操作全过程(录屏+录音),初看需求时,想到<code>ReplayKit</code>是最切合需求的,因为ReplayKit系统录屏自带三路数据分别是视频帧数据<code>CMSampleBuffer</code>, <code>App</code>音频<code>PCM CMSampleBuffer</code>,麦克风音频<code>PCM CMSampleBuffer</code>,如此一来需求瞬间就解决了,但是后来因为麦克风权限被另一个三方通话<code>VoIP</code>功能的<code>SDK</code>抢占了,所以麦克风数据只能由他们提供,并且授权弹窗老是被用户拒绝,所以<code>ReplayKit</code>录屏方案被领导否了,另外<code>App</code>内部播放的声音也是一样需求业务方提供,如此一来,录屏获取图像可以换成定时器(<code>CADisplayLink</code>)+截图(绘制图层获取<code>UIImage</code>转<code>CVPixelBuffer</code>)生成视频的方案,而音频推流只能通过混音才能保证音画同步~</p>
</blockquote>
<a id="more"></a>

<h4 id="定时器-截图实现录屏功能的核心代码"><a href="#定时器-截图实现录屏功能的核心代码" class="headerlink" title="定时器 + 截图实现录屏功能的核心代码"></a>定时器 + 截图实现录屏功能的核心代码</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">///MARK:- 起一个CADisplayLink定时器 通过CGImageRef =&gt; CVPixelBufferRef </span></span><br><span class="line">- (<span class="keyword">void</span>)snapshotWithImage &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">//通过Graphics context拿到截屏图片</span></span><br><span class="line">        <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="keyword">self</span>.recordView.bounds.size, <span class="literal">NO</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">//这种方式生成的视频可以录制到动画 但是局限性也很明显比如视频和相机预览的图层无法捕捉到以及系统的一些组件(键盘...等)也无法录制到</span></span><br><span class="line">        [<span class="keyword">self</span>.recordView drawViewHierarchyInRect:<span class="keyword">self</span>.recordView.bounds afterScreenUpdates:<span class="literal">NO</span>];</span><br><span class="line">        <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">        <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">        <span class="comment">//UIImage 对象获取 CGImageRef</span></span><br><span class="line">        <span class="built_in">CGImageRef</span> imgRef = image.CGImage;</span><br><span class="line">        <span class="comment">// CGImage =&gt; bitmap</span></span><br><span class="line">        <span class="built_in">NSDictionary</span> *options = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class="line">                                 [<span class="built_in">NSNumber</span> numberWithBool:<span class="literal">YES</span>], kCVPixelBufferCGImageCompatibilityKey,</span><br><span class="line">                                 [<span class="built_in">NSNumber</span> numberWithBool:<span class="literal">YES</span>], kCVPixelBufferCGBitmapContextCompatibilityKey,</span><br><span class="line">                                 <span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">        CVPixelBufferRef pixelBuffer = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">CGFloat</span> frameWidth = <span class="built_in">CGImageGetWidth</span>(imgRef);</span><br><span class="line">        <span class="built_in">CGFloat</span> frameHeight = <span class="built_in">CGImageGetHeight</span>(imgRef);</span><br><span class="line">        <span class="comment">//创建CVPixelBuffer</span></span><br><span class="line">        CVReturn status = CVPixelBufferCreate(kCFAllocatorDefault,</span><br><span class="line">                                              frameWidth,</span><br><span class="line">                                              frameHeight,</span><br><span class="line">                                              kCVPixelFormatType_32ARGB,</span><br><span class="line">                                              (__bridge <span class="built_in">CFDictionaryRef</span>) options,</span><br><span class="line">                                              &amp;pixelBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSParameterAssert</span>(status == kCVReturnSuccess &amp;&amp; pixelBuffer != <span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">//上锁</span></span><br><span class="line">        CVPixelBufferLockBaseAddress(pixelBuffer, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获得基地址</span></span><br><span class="line">        <span class="keyword">void</span> *pxdata = CVPixelBufferGetBaseAddress(pixelBuffer);</span><br><span class="line">        <span class="built_in">NSParameterAssert</span>(pxdata != <span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">//获取设备的颜色通道</span></span><br><span class="line">        <span class="built_in">CGColorSpaceRef</span> rgbColorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">        <span class="comment">//创建bitmap</span></span><br><span class="line">        <span class="built_in">CGContextRef</span> context = <span class="built_in">CGBitmapContextCreate</span>(pxdata,</span><br><span class="line">                                                     frameWidth,</span><br><span class="line">                                                     frameHeight,</span><br><span class="line">                                                     <span class="number">8</span>,</span><br><span class="line">                                                     CVPixelBufferGetBytesPerRow(pixelBuffer),</span><br><span class="line">                                                     rgbColorSpace,</span><br><span class="line">                                                     (<span class="built_in">CGBitmapInfo</span>)kCGImageAlphaNoneSkipFirst);</span><br><span class="line">        <span class="built_in">NSParameterAssert</span>(context);</span><br><span class="line">        <span class="comment">//transform调整</span></span><br><span class="line">        <span class="built_in">CGContextConcatCTM</span>(context, <span class="built_in">CGAffineTransformIdentity</span>);</span><br><span class="line">        <span class="comment">// 画图</span></span><br><span class="line">        <span class="built_in">CGContextDrawImage</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,frameWidth,frameHeight),imgRef);</span><br><span class="line">        <span class="comment">//释放</span></span><br><span class="line">        <span class="built_in">CGColorSpaceRelease</span>(rgbColorSpace);</span><br><span class="line">        <span class="comment">//回调出去 推流处理或者显示 此处也可利用`AVAssetWriter`写入本地视频文件</span></span><br><span class="line">      <span class="keyword">if</span> (pixelBuffer != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            !<span class="keyword">self</span>.screenRecordCallback? : <span class="keyword">self</span>.screenRecordCallback(pixelBuffer);</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">//释放上下文</span></span><br><span class="line">        <span class="built_in">CGContextRelease</span>(context);</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">        CVPixelBufferUnlockBaseAddress(pixelBuffer, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//释放buffer</span></span><br><span class="line">        CVPixelBufferRelease(pixelBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="混音的前提条件"><a href="#混音的前提条件" class="headerlink" title="混音的前提条件"></a>混音的前提条件</h4><p>混音原理介绍可参考 <a href="https://zhuanlan.zhihu.com/p/42110735" target="_blank" rel="noopener">使用这个混音技术，你也能与爱豆隔空对唱</a></p>
<blockquote>
<p>并非任何两路音频流都可以直接混合。两路音视频流，必须符合以下条件才能混合：</p>
<ul>
<li>格式相同，要解压成 PCM 格式。</li>
<li>采样率相同，要转换成相同的采样率。主流采样率包括：16k Hz、32k Hz、44.1k Hz 和 48k Hz。</li>
<li>帧长相同，帧长由编码格式决定，PCM 没有帧长的概念，开发者自行决定帧长。为了和主流音频编码格式的帧长保持一致，推荐采用 20ms 为帧长。</li>
<li>位深（Bit-Depth）或采样格式 (Sample Format) 相同，承载每个采样点数据的 bit 数目要相同。</li>
<li>声道数相同，必须同样是单声道或者双声道 (立体声)。这样，把格式、采样率、帧长、位深和声道数对齐了以后，两个音频流就可以混合了。</li>
</ul>
<p>在混音之前，还需要做回声消除、噪音抑制和静音检测等处理。回声消除和噪音抑制属于语音前处理范畴的工作。在编码之前，采集、语音前处理、混音之前的处理、混音和混音之后的处理应该按顺序进行。静音抑制（VAD，Voice Activity Detect）可做可不做。对于终端混音，是要把采集到的主播声音和从音频文件中读到的伴奏声音混合。如果主播停顿一段时间不发出声音，通过 VAD 检测到了，那么这段时间不混音，直接采用伴奏音乐的数据就好了。然而，为了简单起见，也可以不做 VAD。主播不发声音的期间，继续做混音也可以（主播的声音为零振幅）。</p>
</blockquote>
<h4 id="混音算法"><a href="#混音算法" class="headerlink" title="混音算法"></a>混音算法</h4><p>​    参考一个C++的<a href="https://github.com/cugxchen/MuxerAudio" target="_blank" rel="noopener">repo代码</a></p>
<ol>
<li><p>叠加法: 这种方法数据量比较大,容易溢出 <code>y = a + b + c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; channels; ++i)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//叠加法</span></span><br><span class="line">  sumBuf[i] = LimAmp(Sum(buf1[i], buf2[i], buf3[i], buf4[i]));</span><br><span class="line">&#125;</span><br><span class="line">fwrite(sumBuf, <span class="keyword">sizeof</span>(Int16), NUM, pMux);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>加权平均法: 这种方法两路数据问题不大,随着音源数量增加,声音质量会降低 <code>y = (a + b + c)/3</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; channels; ++i)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//加权平均法</span></span><br><span class="line">  sumBuf[i] = LimAmp(AAW(buf1[i], buf2[i], buf3[i], buf4[i]));<span class="comment">//从打印看没有溢出的</span></span><br><span class="line">&#125;</span><br><span class="line">fwrite(sumBuf, <span class="keyword">sizeof</span>(Int16), NUM, pMux);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>自定义权重法: 设定比重,哪个声音大就比重加大一些 <code>y = (sgn(a)*a^2 + sgn(b)*b^2 + sgn(c)*c^2)/(abs(a) + abs(b) + abs(c))</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; channels; ++i)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//自对齐权重法</span></span><br><span class="line">  sumBuf[i] = LimAmp(ASW(buf1[i], buf2[i], buf3[i], buf4[i]));</span><br><span class="line">&#125;</span><br><span class="line">fwrite(sumBuf, <span class="keyword">sizeof</span>(Int16), NUM, pMux);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>归一化 参考<a href="https://blog.csdn.net/jeffasd/article/details/77335874" target="_blank" rel="noopener">改进型归一化混音算法</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pcmAudioMix</span><span class="params">(SInt16 *bufferA, SInt16 *bufferB, UInt32 bufferLength)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * sourseFile[<span class="number">2</span>];</span><br><span class="line">    sourseFile[<span class="number">0</span>] = (<span class="keyword">char</span> *)bufferA;</span><br><span class="line">    sourseFile[<span class="number">1</span>] = (<span class="keyword">char</span> *)bufferB;</span><br><span class="line">    Mix(sourseFile, <span class="number">2</span>, (<span class="keyword">char</span> *)bufferB, bufferLength);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Mix</span><span class="params">(<span class="keyword">char</span> **buffers,<span class="keyword">int</span> number,<span class="keyword">char</span> *mix_buf, UInt32 bufferLength)</span></span>&#123;</span><br><span class="line">    <span class="comment">//归一化混音</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> MAX = <span class="number">32767</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> MIN = <span class="number">-32768</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> output;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bufferLength; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; number; j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> *<span class="built_in">point</span> = buffers[j];</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mixTemp = *(short *)(<span class="built_in">point</span> + i*<span class="number">2</span>);</span><br><span class="line">                temp += (<span class="keyword">int</span>)(mixTemp);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp += *(short *)(<span class="built_in">point</span> + i*<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output = (<span class="keyword">int</span>)(temp * f);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (output &gt; MAX)&#123;</span><br><span class="line">            f = (<span class="keyword">double</span>)MAX / (<span class="keyword">double</span>)(output);</span><br><span class="line">            output = MAX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (output &lt; MIN)&#123;</span><br><span class="line">            f = (<span class="keyword">double</span>)MIN / (<span class="keyword">double</span>)(output);</span><br><span class="line">            output = MIN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            f += ((<span class="keyword">double</span>)<span class="number">1</span> - f) / (<span class="keyword">double</span>)<span class="number">32</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *(short *)(mix_buf + i*<span class="number">2</span>) = (short)output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>目前也是采用的该算法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    FILE * fp1;</span><br><span class="line">    FILE * fp2;</span><br><span class="line">    FILE * fpmix;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">4</span>*<span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">int</span> channels = <span class="number">2</span>;<span class="comment">//双声道</span></span><br><span class="line">    <span class="comment">//本地pcm文件读取流的方式进行混合 在线的流得根据实际场景去处理</span></span><br><span class="line">    <span class="built_in">NSString</span> *path1 = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"mic"</span> ofType:<span class="string">@"pcm"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *path2 = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"audio"</span> ofType:<span class="string">@"pcm"</span>];</span><br><span class="line">    <span class="comment">// 输出混合后的pcm文件的地址</span></span><br><span class="line">    <span class="built_in">NSString</span> *mix_path = [[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject] stringByAppendingPathComponent:<span class="string">@"mix.pcm"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打开FP读写</span></span><br><span class="line">    fp1 = fopen([path1 UTF8String],<span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp1 == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        printf(<span class="string">"Open FILE1 failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fp2 = fopen([path2 UTF8String],<span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp2 == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        printf(<span class="string">"Open FILE2 failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fpmix = fopen([mix_path UTF8String],<span class="string">"wb"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fpmix == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        printf(<span class="string">"Open MIX_FILE failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">short</span> *src_data1, *src_data2, *mix_data;</span><br><span class="line">    <span class="comment">//初始化分配内存空间</span></span><br><span class="line">    src_data1 = (<span class="keyword">short</span> *)malloc(size);</span><br><span class="line">    <span class="keyword">if</span> (src_data1 == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        printf(<span class="string">"Malloc data1 failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    src_data2 = (<span class="keyword">short</span> *)malloc(size);</span><br><span class="line">    <span class="keyword">if</span> (src_data2 == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        printf(<span class="string">"Malloc data2 failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mix_data = (<span class="keyword">short</span> *)malloc(size);</span><br><span class="line">    <span class="keyword">if</span> (mix_data == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        printf(<span class="string">"Malloc mix_data failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret1,ret2;</span><br><span class="line">    <span class="comment">//定义二维数组为数据源格式</span></span><br><span class="line">    <span class="keyword">char</span> *sourse_data[<span class="number">2</span>];</span><br><span class="line">    printf(<span class="string">"开始混音!!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环读取文件流数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        ret1 = fread(src_data1, <span class="number">1</span>, size, fp1);</span><br><span class="line">        ret2 = fread(src_data2, <span class="number">1</span>, size, fp2);</span><br><span class="line">        </span><br><span class="line">        sourse_data[<span class="number">0</span>] = (<span class="keyword">char</span> *)src_data1;</span><br><span class="line">        sourse_data[<span class="number">1</span>] = (<span class="keyword">char</span> *)src_data2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ret1 &gt; <span class="number">0</span> &amp;&amp; ret2 &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//调用混音</span></span><br><span class="line">            Mix(sourse_data, channels,(<span class="keyword">char</span> *)mix_data, size);</span><br><span class="line">            fwrite(mix_data, <span class="number">1</span>, size, fpmix);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( (ret1 &gt; <span class="number">0</span>) &amp;&amp; (ret2 == <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="comment">//ret2已读完 把ret1继续读完写入</span></span><br><span class="line">            fwrite(src_data1, <span class="number">1</span>, ret1, fpmix);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( (ret2 &gt; <span class="number">0</span>) &amp;&amp; (ret1 == <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="comment">//ret1已读完 把ret2继续读完写入</span></span><br><span class="line">            fwrite(src_data2, <span class="number">1</span>, ret2, fpmix);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( (ret1 == <span class="number">0</span>) &amp;&amp; (ret2 == <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="comment">//数据为空 或者均读取完</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"混合完毕!!\n"</span>);</span><br><span class="line">    </span><br><span class="line">    free(src_data1);</span><br><span class="line">    free(src_data2);</span><br><span class="line">    free(mix_data);</span><br><span class="line">    </span><br><span class="line">    fclose(fp1);</span><br><span class="line">    fclose(fp2);</span><br><span class="line">    fclose(fpmix);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="5">
<li><p>github找的一个<code>a+b-ab</code>的一个实现,不明觉厉就是了~</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MY_INT16_MAX   32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MY_INT16_MIN  -32768</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 混音算法</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> short <span class="title">TPMixSamples</span><span class="params">(short a, short b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> result = a &lt; <span class="number">0</span> &amp;&amp; b &lt; <span class="number">0</span> ? ((<span class="keyword">int</span>)a + (<span class="keyword">int</span>)b) - (((<span class="keyword">int</span>)a * (<span class="keyword">int</span>)b) / MY_INT16_MIN) : ( a &gt; <span class="number">0</span> &amp;&amp; b &gt; <span class="number">0</span> ? ((<span class="keyword">int</span>)a + (<span class="keyword">int</span>)b) - (((<span class="keyword">int</span>)a * (<span class="keyword">int</span>)b)/MY_INT16_MAX) : a + b);</span><br><span class="line"> <span class="keyword">return</span> result &gt; MY_INT16_MAX ? MY_INT16_MAX : (result &lt; MY_INT16_MIN ? MY_INT16_MIN : result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="常用的相关代码块"><a href="#常用的相关代码块" class="headerlink" title="常用的相关代码块"></a>常用的相关代码块</h4><ul>
<li><code>ASDB</code> 音频格式描述结构体</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">AudioStreamBasicDescription inputFormat = &#123;<span class="number">0</span>&#125;; <span class="comment">//结构体初始化</span></span><br><span class="line">inputFormat.mSampleRate = <span class="number">44100</span>;<span class="comment">//采样率,每秒钟的采样频率</span></span><br><span class="line">inputFormat.mFormatID = kAudioFormatLinearPCM;<span class="comment">//格式类型</span></span><br><span class="line">inputFormat.mFormatFlags = kAudioFormatFlagIsSignedInteger | kAudioFormatFlagsNativeEndian | kAudioFormatFlagIsPacked;<span class="comment">//大小端等标识</span></span><br><span class="line">inputFormat.mChannelsPerFrame = <span class="number">2</span>;<span class="comment">//声道数</span></span><br><span class="line">inputFormat.mFramesPerPacket = <span class="number">1</span>;<span class="comment">//一个数据包一帧</span></span><br><span class="line">inputFormat.mBitsPerChannel = <span class="number">16</span>;<span class="comment">//采样位数或位深度</span></span><br><span class="line">inputFormat.mBytesPerFrame = inputFormat.mBitsPerChannel / <span class="number">8</span> * inputFormat.mChannelsPerFrame;<span class="comment">//每帧多少个字节</span></span><br><span class="line">inputFormat.mBytesPerPacket = inputFormat.mBytesPerFrame * inputFormat.mFramesPerPacket;<span class="comment">//一个包几个字节</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>音频<code>CMSampleBufferRef</code>转<code>NSData</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)pushAudioBuffer:(<span class="built_in">CMSampleBufferRef</span>)sampleBuffer &#123;</span><br><span class="line">    AudioBufferList audioBufferList;</span><br><span class="line">    <span class="built_in">CMBlockBufferRef</span> blockBuffer;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer</span>(sampleBuffer, <span class="literal">NULL</span>, &amp;audioBufferList, <span class="keyword">sizeof</span>(audioBufferList), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;blockBuffer);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> y=<span class="number">0</span>; y&lt;audioBufferList.mNumberBuffers; y++ ) &#123;</span><br><span class="line">        AudioBuffer audioBuffer = audioBufferList.mBuffers[y];</span><br><span class="line">        <span class="keyword">void</span>* audio = audioBuffer.mData;</span><br><span class="line">        <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithBytes:audio length:audioBuffer.mDataByteSize];</span><br><span class="line">        [<span class="keyword">self</span> pushAudio:data];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CFRelease</span>(blockBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>NSData</code>转<code>CMSampleBufferRef</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">-(AudioStreamBasicDescription)getASBD&#123;</span><br><span class="line">  	<span class="keyword">int</span> channels = <span class="number">2</span>;</span><br><span class="line">    AudioStreamBasicDescription format = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    format.mSampleRate = <span class="number">44100</span>;</span><br><span class="line">    format.mFormatID = kAudioFormatLinearPCM;</span><br><span class="line">    format.mFormatFlags =  kAudioFormatFlagIsSignedInteger | kAudioFormatFlagsNativeEndian | kAudioFormatFlagIsPacked;</span><br><span class="line">    format.mChannelsPerFrame = channels;</span><br><span class="line">    format.mBitsPerChannel = <span class="number">16</span>;</span><br><span class="line">    format.mFramesPerPacket = <span class="number">1</span>;</span><br><span class="line">    format.mBytesPerFrame = format.mBitsPerChannel / <span class="number">8</span> * format.mChannelsPerFrame;</span><br><span class="line">    format.mBytesPerPacket = format.mBytesPerFrame * format.mFramesPerPacket;</span><br><span class="line">    format.mReserved = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> format;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CMSampleBufferRef</span>)convertAudioSampleWithData:(<span class="built_in">NSData</span> *)audioData&#123;</span><br><span class="line">    <span class="keyword">int</span> channels = <span class="number">2</span>;</span><br><span class="line">    AudioBufferList audioBufferList;</span><br><span class="line">    audioBufferList.mNumberBuffers = <span class="number">1</span>;</span><br><span class="line">    audioBufferList.mBuffers[<span class="number">0</span>].mNumberChannels = channels;</span><br><span class="line">    audioBufferList.mBuffers[<span class="number">0</span>].mDataByteSize = audioData.length;</span><br><span class="line">    audioBufferList.mBuffers[<span class="number">0</span>].mData = audioData.bytes;</span><br><span class="line">    </span><br><span class="line">    AudioStreamBasicDescription asbd = [<span class="keyword">self</span> getASBD];</span><br><span class="line">    <span class="built_in">CMSampleBufferRef</span> buff = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">CMFormatDescriptionRef</span> format = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">CMSampleTimingInfo</span> timing = &#123;<span class="built_in">CMTimeMake</span>(<span class="number">1</span>,<span class="number">44100</span>), kCMTimeZero, kCMTimeInvalid &#125;;</span><br><span class="line">    OSStatus error = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(format == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      error = <span class="built_in">CMAudioFormatDescriptionCreate</span>(kCFAllocatorDefault, &amp;asbd, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;format);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    error = <span class="built_in">CMSampleBufferCreate</span>(kCFAllocatorDefault, <span class="literal">NULL</span>, <span class="literal">false</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, format, len/(<span class="number">2</span>*channels), <span class="number">1</span>, &amp;timing, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;buff);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"CMSampleBufferCreate returned error: %ld"</span>, (<span class="keyword">long</span>)error);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error = <span class="built_in">CMSampleBufferSetDataBufferFromAudioBufferList</span>(buff, kCFAllocatorDefault, kCFAllocatorDefault, <span class="number">0</span>, &amp;audioBufferList);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"CMSampleBufferSetDataBufferFromAudioBufferList returned error: %ld"</span>, (<span class="keyword">long</span>)error);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>​    其实<code>iOS</code>底层<code>AudioUnit</code>框架可以通过输入输出不同的<code>bus</code>进行混音  <code>可参考</code><a href="https://www.jianshu.com/p/f8bb0cc1075e" target="_blank" rel="noopener">AUGraph结合RemoteI/O Unit与Mixer Unit</a>, 但是局限在于需要调用硬件接口,则需要麦克风权限以及扬声器都需设置相关的音频会话 <a href="https://blog.csdn.net/ByteDanceTech/article/details/114325538" target="_blank" rel="noopener">AVAudioSession</a> ,如果是本地文件+麦克风录音用系统提供的就OK了</p>
<p>业务场景较为复杂且数据源分散由不同的<code>SDK</code>提供,这时就只能做数据层的处理了,避免各个<code>SDK</code>之间相互抢占系统音频会话的设置权限. </p>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul>
<li><a href="https://blog.csdn.net/dxpqxb/article/details/78329403" target="_blank" rel="noopener">音频混音的算法实现</a></li>
<li><a href="https://blog.csdn.net/TopsLuo/article/details/72769800" target="_blank" rel="noopener">简单的混音算法</a></li>
<li><a href="https://github.com/AgoraIO/Advanced-Video/tree/master/iOS%26macOS/Agora-Screen-Sharing/Agora-Screen-Sharing-iOS-Broadcast" target="_blank" rel="noopener">声网基于ReplayKit的两路音频流重采样以及混音代码</a></li>
<li><a href="https://blog.csdn.net/u011270282/article/details/51792071" target="_blank" rel="noopener">byte*与CMSampleBufferRef互相转换</a></li>
<li><a href="https://www.jianshu.com/p/ca2cb00418a7" target="_blank" rel="noopener">PCM音频数据调整音量</a></li>
<li><a href="https://www.jianshu.com/p/57dd36e704be" target="_blank" rel="noopener">播放PCM</a></li>
<li><a href="https://www.cnblogs.com/junhuawang/p/7920989.html" target="_blank" rel="noopener">AVAudioSession详解</a></li>
</ul>
]]></content>
      <tags>
        <tag>音视频</tag>
        <tag>音频处理</tag>
        <tag>踩坑记录</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS基础知识总结</title>
    <url>/hexo-github-action/2020/03/23/iOS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="OC"><a href="#OC" class="headerlink" title="OC"></a>OC</h2><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h5 id="内存管理的原理和原则"><a href="#内存管理的原理和原则" class="headerlink" title="内存管理的原理和原则"></a>内存管理的原理和原则</h5><ul>
<li>基本数据类型(<code>int</code>,<code>float</code>,<code>double</code>,<code>enum</code>,<code>struct</code>,<code>union</code>等)和C语言的类型存储在栈区,由系统分配释放</li>
<li>继承自<code>NSObject</code>的类属于<code>OC</code>类型,都遵循内存管理原则</li>
<li>谁创建,谁释放(<code>MRC</code>程序员管理,<code>ARC</code>系统封装了编译时插入<code>retain</code>和<code>release</code> 自动释放池等自动管理内存)</li>
<li><code>OC</code>方法调用的本质其实是给对象发送消息,需要引用时发送<code>retain</code>引用计数加<code>1</code>,释放时发送<code>release</code>引用计数减<code>1</code>,每个<code>OC</code>对象都有一个<code>retainCount</code>计数器占有<code>4</code>个字节</li>
<li><code>MRC</code> 设置<code>setter</code>需要判断,存在旧值,则需要先把旧值释放<code>release</code>,然后新值<code>retain</code>之后赋值</li>
</ul>
<a id="more"></a>


<h5 id="内存管理中容易出现的问题和概念"><a href="#内存管理中容易出现的问题和概念" class="headerlink" title="内存管理中容易出现的问题和概念"></a>内存管理中容易出现的问题和概念</h5><ul>
<li><p>内存泄漏: 开辟了内存空间创建了对象却没有得到真正的使用,也没有得到释放并常驻在内存中,造成对内存的浪费(不用的记得释放,养成合理使用内存的习惯,才能有效避免类似问题)</p>
</li>
<li><p>悬垂指针(也叫迷途指针): 就是指针指向的那块内存已经销毁(对象已经释放了),但是引用它的指针还在,然后指针自己也不知道指向的是什么鬼👻了,对象释放时需要顺带也要把引用它的指针也置为 <code>nil</code> (<code>OC</code>中任何对象给<code>nil</code>发消息都不会有反应的)</p>
</li>
<li><p>野指针: 还没有初始化的指针</p>
</li>
<li><p>僵尸对象: 一个已经被释放的对象</p>
</li>
<li><p>空指针: nil,NULL </p>
</li>
<li><p>一个NSObject占用多少内存？<a href="https://blog.csdn.net/a_horse/article/details/82532304" target="_blank" rel="noopener">查看OC对象占用至少多少字节</a></p>
<blockquote>
<p>1、系统分配了16个字节给NSObject对象（可以通过malloc_size函数得到）<br>2、但NSObject对象内部只使用了8个字节空间（在64bit环境下，可以通过class_getInstanceSize函数获得）</p>
</blockquote>
</li>
</ul>
<h3 id="OC中的几个小常识"><a href="#OC中的几个小常识" class="headerlink" title="OC中的几个小常识"></a>OC中的几个小常识</h3><h5 id="import-include-class的区别在哪里"><a href="#import-include-class的区别在哪里" class="headerlink" title="#import , #include,@class的区别在哪里?"></a><code>#import</code> , <code>#include</code>,<code>@class</code>的区别在哪里?</h5><ul>
<li><code>#include</code>是<code>C</code>语言中的导入头文件的方式,会出现重复导入的情况</li>
<li><code>#import</code>是``#include`的改进版,针对同一个头文件只会导入一次,避免递归导入问题</li>
<li><code>@class</code> 类的声明,可以避免循环导入互相引用头文件报错的问题,还有就是提高编译效率,如果头文件链式引用的话容易出现重复编译的问题(可优化编译耗时)</li>
</ul>
<h5 id="static-extern-const的使用"><a href="#static-extern-const的使用" class="headerlink" title="static,extern,const的使用"></a><code>static</code>,<code>extern</code>,<code>const</code>的使用</h5><p><code>static</code>可以修饰</p>
<ul>
<li>静态局部变量:  <em>保证局部变量永远只初始化一次，在程序的运行过程中永远有且只有一份内存， 生命周期类似全局变量了，但是作用域不变。</em></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//push到这个页面,页面添加按钮点击进行累加操作 点两下pop页面,再次进入继续点击按钮累加 观察控制台打印</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"计数: %d"</span>,count);</span><br><span class="line"><span class="comment">// 控制台打印结果如下: </span></span><br><span class="line"><span class="comment">//第一次进入该页面点击打印</span></span><br><span class="line">计数: <span class="number">1</span></span><br><span class="line">计数: <span class="number">2</span></span><br><span class="line"><span class="comment">//第二次进入该页面点击打印</span></span><br><span class="line">计数: <span class="number">3</span></span><br><span class="line">计数: <span class="number">4</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>修饰静态全局变量:  <em>使全局变量的作用域仅限于当前文件内部，即当前文件内部才能访问该全局变量</em> </p>
<p>例如单例:</p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> ShareManager *_manager = <span class="literal">nil</span>;</span><br><span class="line">+ (ShareManager *)shareInstance&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_manager) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">        <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">            _manager = [[ShareManager alloc] init];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修饰静态函数: <em><code>static</code>修饰的函数叫静态函数,外部文件无法访问这个函数,函数当前文件可以访问</em></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> hello()&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"你好!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>extern</code> 外部引用的意思,其实是用于修饰外部全局变量的关键字,在<code>iOS</code>中被定义了多种别名,其实本质还是<code>extern</code>,当然自己开发的时候也可以自定义别名,可以增加代码可读性.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FOUNDATION_EXPORT</span><br><span class="line">FOUNDATION_EXTERN</span><br><span class="line">UIKIT_EXTERN</span><br></pre></td></tr></table></figure>

<h5 id="OC中-property的几个关键字用法-iOS面试之-property"><a href="#OC中-property的几个关键字用法-iOS面试之-property" class="headerlink" title="OC中@property的几个关键字用法 iOS面试之@property"></a>OC中<code>@property</code>的几个关键字用法 <a href="https://juejin.im/post/5c105c7ce51d4562d138086f?utm_source=gold_browser_extension" target="_blank" rel="noopener">iOS面试之@property</a></h5><details>
<summary>查看代码示例 show the code</summary>
<pre><code class="java">
// @property = iVar + setter + getter
// 默认是atomic原子的 读写线程安全但耗性能  一般设置nonatomic是非原子的 节省开销
//基本数据类型
@property (nonatomic,assign) int age;
@property (nonatomic,assign) float distance;
@property (nonatomic,assign) double aValue;
@property (nonatomic,assign) NSInteger count1;
@property (nonatomic,assign) NSUInteger count2;
@property (nonatomic,assign) CGFloat number1;
//枚举类型
@property (nonatomic,assign) NSTextAlignment align;
//结构体
@property (nonatomic,assign) CGSize size;
@property (nonatomic,assign) CGRect frame;
//代理委托
@property (nonatomic,assign) id<HelloDelegate> assignDelegate;
@property (nonatomic,weak) id<HelloDelegate> weakDelegate;
//弱引用属性
@property (nonatomic,weak) ShareManager *weakManager;
//IB拉线视图
@property (nonatomic,weak) IBOutlet UIView *testView;
//字符串
@property (nonatomic,copy) NSString *name;
//block/闭包
@property (nonatomic,copy) dispatch_block_t block;
//强引用对象
@property (nonatomic,strong) NSArray *arr;
@property (nonatomic,strong) NSMutableArray *arrM;
@property (nonatomic,strong) NSDictionary *dic;
@property (nonatomic,strong) NSMutableArray *dicM;
@property (nonatomic,strong) ShareManager  *strongManager;
//默认是readwrite 对于外部引用是可读可写 设置readonly是只读
@property (nonatomic,strong,readonly) ShareManager  *strongManager2;
</code></pre>
</details>
----------------------------

<h5 id="NSObject中类方法load和initialize-load和initialize"><a href="#NSObject中类方法load和initialize-load和initialize" class="headerlink" title="NSObject中类方法load和initialize load和initialize"></a><code>NSObject</code>中类方法<code>load</code>和<code>initialize</code> <a href="http://blog.y500.me/initialize-vs-load/" target="_blank" rel="noopener">load和initialize</a></h5><blockquote>
<p>这两个类方法会在类被使用时主动调用，但是调用时机和调用顺序却截然不同。</p>
</blockquote>
<ul>
<li><code>initialize</code>方法是在该类接收到第一个消息之前调用.</li>
<li>父类的 <code>initialize</code> 方法先于子类的 <code>initialize</code> 方法调用.</li>
<li>如果子类中没有实现 <code>initialize</code> 方法，或者子类显示调用父类实现<code>[super initialize]</code>, 那么则会调用其父类的实现。也就是说，父类的 <code>initialize</code> 可能会被调用多次。</li>
<li>在应用程序生命周期里，<code>runtime</code> 只会向每个类发送一次 <code>initialize</code> 消息. 所以如果category中实现了<code>initialize</code>方法，那么原来类中的则不会被调用.</li>
<li><code>load</code>在类或者<code>category</code>被添加到<code>runtime</code>的时候调用，该调用发生在main函数之前</li>
<li>父类<code>load</code>方法先于子类调用，类本身<code>load</code>方法先于<code>category</code>中调用。</li>
<li>不需要在<code>load</code>和<code>initialize</code>方法中显式的去调用父类的方法。</li>
</ul>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><h3 id="一些常见的知识点"><a href="#一些常见的知识点" class="headerlink" title="一些常见的知识点"></a>一些常见的知识点</h3><h5 id="UIView和CALayer的区别"><a href="#UIView和CALayer的区别" class="headerlink" title="UIView和CALayer的区别?"></a>UIView和CALayer的区别?</h5><p>view: 负责用户交互,事件响应</p>
<p>layer: 负责绘制展示内容,隐式动画</p>
<h5 id="如何高效绘制圆角"><a href="#如何高效绘制圆角" class="headerlink" title="如何高效绘制圆角?"></a>如何高效绘制圆角?</h5><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//采用贝塞尔曲线绘制 上下左右四个角 可大可小/可有可无/易于控制 </span></span><br><span class="line">    <span class="comment">//可选枚举</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UIRectCorner</span>) &#123;</span><br><span class="line">        <span class="built_in">UIRectCornerTopLeft</span>     = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">        <span class="built_in">UIRectCornerTopRight</span>    = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">        <span class="built_in">UIRectCornerBottomLeft</span>  = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">        <span class="built_in">UIRectCornerBottomRight</span> = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">        <span class="built_in">UIRectCornerAllCorners</span>  = ~<span class="number">0</span>UL</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">UIBezierPath</span> *maskPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="keyword">self</span>.bounds byRoundingCorners:(<span class="built_in">UIRectCornerAllCorners</span>) cornerRadii:<span class="built_in">CGSizeMake</span>(<span class="number">10</span>, <span class="number">10</span>)];</span><br><span class="line">    <span class="built_in">CAShapeLayer</span> *maskLayer = [[<span class="built_in">CAShapeLayer</span> alloc] init];</span><br><span class="line">    maskLayer.frame = <span class="keyword">self</span>.bounds;</span><br><span class="line">    maskLayer.path = maskPath.CGPath;</span><br><span class="line">    <span class="keyword">self</span>.layer.mask = maskLayer;</span><br></pre></td></tr></table></figure>



<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h5 id="更新布局"><a href="#更新布局" class="headerlink" title="更新布局"></a>更新布局</h5><ul>
<li><code>layoutIfNeeded</code>强制更新布局</li>
<li><code>setNeedsDisplay</code>重绘,适用于需要重写<code>drawRect:</code>绘制的视图</li>
<li><code>updateConstraintsIfNeeded</code>标记需要更新约束,然后调用<code>layoutIfNeeded</code>才会生效</li>
</ul>
<h5 id="纯代码"><a href="#纯代码" class="headerlink" title="纯代码"></a>纯代码</h5><ul>
<li>系统AutoLayout <ul>
<li><a href="https://www.jianshu.com/p/c476f797fedc" target="_blank" rel="noopener">iOS 自动布局总结篇</a></li>
</ul>
</li>
<li>frame布局<ul>
<li><a href="https://www.jianshu.com/p/98c8e18d7fea" target="_blank" rel="noopener">参考</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>PS：bounds与frame有一定区别。<br>bounds只用来描述视图的尺寸，就像一页A4纸，不论把它放在桌子上还是地板上，它的bounds都不发生变化。<br>frame除了能够描述视图的尺寸外还能描述视图的位置。再如A4纸，从桌子上挪到地板上，它的frame就发生变化了</p>
</blockquote>
<ul>
<li><p>Masonry约束布局</p>
<ul>
<li><a href="https://www.jianshu.com/p/587efafdd2b3" target="_blank" rel="noopener">参考一</a> </li>
<li><a href="http://tutuge.me/2017/03/12/autolayout-example-with-masonry5/" target="_blank" rel="noopener">参考二</a></li>
</ul>
</li>
<li><p>StackView布局</p>
<ul>
<li><a href="https://www.jianshu.com/p/19fbf3ee2840" target="_blank" rel="noopener">参考</a></li>
</ul>
</li>
<li><p>基于YogaKit的Flexbox布局</p>
<ul>
<li><a href="https://www.cnblogs.com/baitongtong/p/11778738.html" target="_blank" rel="noopener">iOS - FlexBox 布局之 YogaKit</a></li>
</ul>
</li>
<li><p>其他第三方布局库</p>
<ul>
<li><a href="https://github.com/gsdios/SDAutoLayout" target="_blank" rel="noopener">SDAutoLayout</a></li>
<li><a href="https://github.com/youngsoft/MyLinearLayout" target="_blank" rel="noopener">MyLayout</a></li>
</ul>
</li>
</ul>
<h5 id="IB拉线"><a href="#IB拉线" class="headerlink" title="IB拉线"></a>IB拉线</h5><p> XIB结合代码</p>
<p>StoryBoard结合代码</p>
<blockquote>
<p>利用<code>IB_DESIGNABLE</code>和<code>IBInspectable</code>修饰,然后再重写setter,在IB面板上即可出现添加可勾选☑️的属性列表,此方法适用自定义类,不建议在category中设置,category的话是比较耗性能,时不时爆个红~ </p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">IB_DESIGNABLE</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WGBCustomButton</span> : <span class="title">UIButton</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) IBInspectable <span class="built_in">CGFloat</span> space;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) IBInspectable <span class="built_in">CGFloat</span>   borderWidth;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) IBInspectable  <span class="built_in">UIColor</span> * borderColor;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) IBInspectable <span class="built_in">CGFloat</span>  radius;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) IBInspectable  <span class="built_in">UIColor</span> *bgColor;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) IBInspectable  <span class="built_in">BOOL</span>  buttonHighlighted;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) IBInspectable  <span class="built_in">UIColor</span> *selectedBgColor;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) IBInspectable  <span class="built_in">UIColor</span> *normalBgColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>



<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><code>UIViewController</code>生命周期</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化构造方法</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithNibName:(<span class="built_in">NSString</span> *)nibNameOrNil bundle:(<span class="built_in">NSBundle</span> *)nibBundleOrNil &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IB编译后解码</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:aDecoder]) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IB加载完成</span></span><br><span class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</span><br><span class="line">    [<span class="keyword">super</span> awakeFromNib];</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载视图 </span></span><br><span class="line">- (<span class="keyword">void</span>)loadView &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    <span class="keyword">self</span>.view = [[<span class="built_in">UIView</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//视图加载完成</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//视图将要出现</span></span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将要布局子视图</span></span><br><span class="line">- (<span class="keyword">void</span>)viewWillLayoutSubviews &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    [<span class="keyword">super</span> viewWillLayoutSubviews];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子视图布局(可能会被多次调用)</span></span><br><span class="line">- (<span class="keyword">void</span>)layoutSubviews&#123;</span><br><span class="line">    [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line">    	<span class="comment">//此处能够获取准确frame</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子视图已经布局完毕</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLayoutSubviews &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    [<span class="keyword">super</span> viewDidLayoutSubviews];</span><br><span class="line">    	<span class="comment">//此处能够获取准确frame</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//视图已经出现</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    [<span class="keyword">super</span> viewDidAppear:animated];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//视图将要消失</span></span><br><span class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//视图已经消失</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidDisappear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    [<span class="keyword">super</span> viewDidDisappear:animated];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出现内存警告  //模拟内存警告:点击模拟器-&gt;hardware-&gt; Simulate Memory Warning</span></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图被销毁</span></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台打印如下:</span></span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">41.577</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController initWithCoder:]</span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">41.579</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController awakeFromNib]</span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">41.581</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController loadView]</span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">46.485</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController viewDidLoad]</span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">46.486</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController viewWillAppear:]</span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">46.487</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController viewWillLayoutSubviews]</span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">46.488</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController viewDidLayoutSubviews]</span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">46.488</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController viewWillLayoutSubviews]</span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">46.488</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController viewDidLayoutSubviews]</span><br><span class="line"><span class="number">18</span>:<span class="number">03</span>:<span class="number">46.490</span> ViewControllerLifeCircle[<span class="number">32254</span>:<span class="number">401790</span>] -[ViewController viewDidAppear:]</span><br><span class="line"><span class="number">19</span>:<span class="number">03</span>:<span class="number">13.308</span> ViewControllerLifeCircle[<span class="number">32611</span>:<span class="number">427962</span>] -[ViewController viewWillDisappear:]</span><br><span class="line"><span class="number">19</span>:<span class="number">03</span>:<span class="number">14.683</span> ViewControllerLifeCircle[<span class="number">32611</span>:<span class="number">427962</span>] -[ViewController viewDidDisappear:]</span><br><span class="line"><span class="number">19</span>:<span class="number">03</span>:<span class="number">14.683</span> ViewControllerLifeCircle[<span class="number">32611</span>:<span class="number">427962</span>] -[ViewController dealloc]</span><br><span class="line"><span class="number">19</span>:<span class="number">12</span>:<span class="number">05.927</span> ViewControllerLifeCircle[<span class="number">32611</span>:<span class="number">427962</span>] -[ViewController didReceiveMemoryWarning]</span><br></pre></td></tr></table></figure>



<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h5 id="UIView动画-UIView动画UIView-Animation总结"><a href="#UIView动画-UIView动画UIView-Animation总结" class="headerlink" title="UIView动画  UIView动画UIView Animation总结"></a>UIView动画  <a href="http://www.cocoachina.com/articles/19794" target="_blank" rel="noopener">UIView动画UIView Animation总结</a></h5><ul>
<li>常用的块动画</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 参数一 : 时长  </span></span><br><span class="line"><span class="comment">/// 参数二 : 执行动画块</span></span><br><span class="line"><span class="comment">/// 参数三 : 动画结束时回调</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> animations:^&#123;</span><br><span class="line">  <span class="comment">//做动画: 修改视图大小位置,透明度,颜色,transform等属性</span></span><br><span class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">  <span class="comment">//动画结束回调</span></span><br><span class="line">&#125;];       </span><br><span class="line"><span class="comment">/// 参数一 : 时长</span></span><br><span class="line"><span class="comment">/// 参数二 : 延时几秒执行</span></span><br><span class="line"><span class="comment">/// 参数三 : 动画函数枚举</span></span><br><span class="line"><span class="comment">/// 参数四 : 执行动画块</span></span><br><span class="line"><span class="comment">/// 参数五 : 动画结束时回调</span></span><br><span class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> delay:<span class="number">1.0</span> options:(<span class="built_in">UIViewAnimationOptionAllowUserInteraction</span>) animations:^&#123;</span><br><span class="line">  <span class="comment">//执行动画</span></span><br><span class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">  <span class="comment">//动画结束回调</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Spring</code>弹性动画</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 参数一: 执行时长</span></span><br><span class="line">    <span class="comment">/// 参数二: 延时几秒执行</span></span><br><span class="line">    <span class="comment">/// 参数三: 阻尼值 0~1之间取值 值越小弹性越大</span></span><br><span class="line">    <span class="comment">/// 参数四: 初始速度 默认为0 值越大 动画执行的越快</span></span><br><span class="line">    <span class="comment">/// 参数五: 动画执行曲线函数</span></span><br><span class="line">    <span class="comment">/// 参数六: 执行动画块</span></span><br><span class="line">    <span class="comment">/// 参数七: 动画结束时回调</span></span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.25</span> delay:<span class="number">0.0</span> usingSpringWithDamping:<span class="number">0.5</span> initialSpringVelocity:<span class="number">10</span> options:(<span class="built_in">UIViewAnimationOptionCurveEaseInOut</span>) animations:^&#123;</span><br><span class="line">        <span class="comment">//执行动画</span></span><br><span class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">        <span class="comment">//动画结束</span></span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>

<ul>
<li>视图转场动画</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *aView = <span class="literal">nil</span>;<span class="comment">//替换项目中实际的view</span></span><br><span class="line"><span class="built_in">UIView</span> *bView = <span class="literal">nil</span>;<span class="comment">//替换项目中实际的view</span></span><br><span class="line"><span class="comment">//从一个视图过渡到另一个视图</span></span><br><span class="line">[<span class="built_in">UIView</span> transitionFromView:aView toView:bView duration:<span class="number">0.25</span> options:(<span class="built_in">UIViewAnimationOptionCurveLinear</span>) completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">    <span class="comment">//转场结束</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//单个视图向右翻转转场</span></span><br><span class="line">[<span class="built_in">UIView</span> transitionWithView:aView duration:<span class="number">0.25</span> options:(<span class="built_in">UIViewAnimationOptionTransitionFlipFromRight</span>) animations:^&#123;</span><br><span class="line">    <span class="comment">//转场过程中 做一些改变</span></span><br><span class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">    <span class="comment">//转场结束</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h5 id="核心动画"><a href="#核心动画" class="headerlink" title="核心动画"></a>核心动画</h5><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><blockquote>
<p> 超文本传输协议,是一种建立在TCP上的无状态连接，整个基本的工作流程是客户端发送一个HTTP请求，说明客户端想要访问的资源和请求的动作，服务端收到请求之后，服务端开始处理请求，并根据请求做出相应的动作访问服务器资源，最后通过发送HTTP响应把结果返回给客户端</p>
</blockquote>
<p> <a href="https://www.cnblogs.com/an-wen/p/11180076.html" target="_blank" rel="noopener">HTTP协议超级详解</a></p>
<h5 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h5><p>工作中只用过一次,用于检测CDN回源,主要是获取Header中的字段值进行判断是否上报</p>
<h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><p>参数拼接到URL上是暴露的,相对于POST来说不安全(POST将参数放到body里),传输数据量小,受限于URL最大长度<a href="https://www.baidu.com/link?url=6QrTUOfAvDPuZo5IiUykxyECWlRjatZHflDTimgeKB3MMnAPlomQOXj1IKlsAwHrxAlGKixhByKSNZFXsYf4Q3eKbrqJ8d9wh5Zq1YJMdGu&wd=&eqid=ae2e0e330015c461000000055e7575ff" target="_blank" rel="noopener"><em>URL最大长度</em>问题 </a>   表单默认请求方式数据集必须为ASCII,执行效率比POST高</p>
<h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><p>安全,参数不可见(放到body中),数据类型没有限制, 可传输的数据容量大(<a href="https://www.cnblogs.com/zxj159/articles/2428376.html" target="_blank" rel="noopener">GET和POST可传递的值到底有多大？</a>) </p>
<h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h3><p>tcp是长连接,能够保证传输数据的完整性</p>
<p>udp是发出去就不管的,容易丢包</p>
<p> <a href="https://www.cnblogs.com/williamjie/p/9390164.html" target="_blank" rel="noopener">TCP和UDP的最完整的区别</a></p>
<h3 id="Socket-WebSocket"><a href="#Socket-WebSocket" class="headerlink" title="Socket/WebSocket"></a>Socket/WebSocket</h3><p>socket: <code>应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口，提供一套调用TCP/IP协议的API</code></p>
<p>websocket: <code>一种双向通信协议。在建立连接后，WebSocket服务器端和客户端都能主动向对方发送或接收数据，就像Socket一样；(而http服务端不能主动联系客户端，只能有客户端发起,太被动啦) ,只要建立一次HTTP请求，就可以连续不断的得到服务器推送的消息，节省带宽和服务器端的压力~</code></p>
<h3 id="WebServer模拟本地接口请求数据"><a href="#WebServer模拟本地接口请求数据" class="headerlink" title="WebServer模拟本地接口请求数据"></a>WebServer模拟本地接口请求数据</h3><p><a href="https://www.cnblogs.com/wgb1234/p/12514220.html#/cnblog/works/article/12466122" target="_blank" rel="noopener">盘点Mac上搭建本地WebServer的几种方式 </a></p>
<h3 id="三次握手🤝-四次挥手👋"><a href="#三次握手🤝-四次挥手👋" class="headerlink" title="三次握手🤝/四次挥手👋"></a>三次握手🤝/四次挥手👋</h3><p><strong>三次握手(通道的建立):</strong>   </p>
<blockquote>
<p>（1）在建立通道时，客户端首先要向服务端发送一个SYN同步信号。</p>
<p>（2）服务端在接收到这个信号之后会向客户端发出SYN同步信号和ACK确认信号。</p>
<p>（3）当服务端的ACK和SYN到达客户端后，客户端与服务端之间的这个“通道”就会被建立起来。</p>
</blockquote>
<p>PS. 以上整个过程有点像叫人开门的感觉, 大声呼喊听得见吗? 听得见的话就把门打开, 然后对方清晰听到后把门开开,即成功建立连接,要是没听见(没连接上)或者没有听清楚(ack丢失了),那就得加大分贝多喊几次(反复发送ack直到确认) … </p>
<p><strong>四次挥手(通道的关闭):</strong></p>
<blockquote>
<p>（1）在数据传输完毕之后，客户端会向服务端发出一个FIN终止信号。</p>
<p>（2）服务端在收到这个信号之后会向客户端发出一个ACK确认信号。</p>
<p>（3）如果服务端此后也没有数据发给客户端时服务端会向客户端发送一个FIN终止信号。</p>
<p>（4）客户端在收到这个信号之后会回复一个Ack确认信号，在服务端接收到这个信号之后，服务端与客户端的通道也就关闭了。</p>
</blockquote>
<p>PS. 以上过程有点像黑帮交易验货~  到达交易约定地点之后,由甲方提出要验货,乙方听到后点了点头,然后让小弟把大箱子搬了出来,甲方打开之后验货没有问题,然后叫小弟把装钱的箱子提了上来交给乙方, 乙方清点之后也没有问题,银货两讫,各自退散~ </p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><ol>
<li>手机里每一个App就一个独立的进程,负责运行的程序内存分配,每个进程有独立的虚拟的内存空间, 线程是CPU执行任务的基本单元,是进程执行任务的路径</li>
<li>队列: 串行和并行, 串行是一个任务接着一个任务执行,并行是指在不同队列即多个CPU同时执行不同的任务 (多核才有可能实现真正的并行)</li>
<li>并发: 单核情况下,单位时间内多个任务快速切换执行,造成同时执行的假象(异步执行任务才有并发一说)</li>
<li>同步和异步: 分配了一堆任务,同步是指阻塞式的一个任务执行完再执行下一个任务, 异步是指分不同优先级调度任务顺序来执行任务</li>
<li>主线程和子线程: 每个进程必有一条线程即主线程,异步才会开子线程</li>
</ol>
<h5 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h5><ol>
<li>创建队列</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 队列类型</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数：队列名称</span></span><br><span class="line"><span class="comment">// 第二个参数：队列类型</span></span><br><span class="line">dispatch_queue_create(<span class="keyword">const</span> <span class="keyword">char</span> *label, dispatch_queue_attr_t attr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 队列类型</span></span><br><span class="line"><span class="comment">  // 串行队列标识：本质就是NULL，但建议不要写成NULL，可读性不好</span></span><br><span class="line"><span class="comment">  DISPATCH_QUEUE_SERIAL</span></span><br><span class="line"><span class="comment">  // 并行队列标识</span></span><br><span class="line"><span class="comment">  DISPATCH_QUEUE_CONCURRENT</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一条自定义并行队列</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"myQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建全局并发队列</span></span><br><span class="line"><span class="comment">// 第一个参数：队列优先级 默认填0</span></span><br><span class="line"><span class="comment">// 第二个参数：保留参数，暂时无用，填0即可</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局并发队列的优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_QUEUE_PRIORITY_HIGH 2               <span class="comment">// 高</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_QUEUE_PRIORITY_DEFAULT 0            <span class="comment">// 默认(中)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_QUEUE_PRIORITY_LOW (-2)             <span class="comment">// 低</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN <span class="comment">// 后台</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建串行队列（队列类型传递DISPATCH_QUEUE_SERIAL或者NULL）</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"serialQueue"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="comment">// 主队列(特殊的串行队列)中的任务，都会放到主线程中执行</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</span><br></pre></td></tr></table></figure>

<p>常用的几种:</p>
<ul>
<li><code>dispatch_once_t</code> 一次性代码块</li>
<li><code>dispatch_after和dispatch_time_t</code> 设置延时或者倒计时</li>
<li><code>dispatch_barrier_async</code> 栅栏函数,拦截之前任务执行完才让执行下一个</li>
<li><code>dispatch_group</code> 分组处理多任务统一回调问题</li>
<li><code>dispatch_semaphore_t</code> 信号量,线程同步,防止资源抢占</li>
</ul>
<p><a href="https://www.jianshu.com/p/77c5051aede2" target="_blank" rel="noopener">OC高级-GCD使用总结</a></p>
<p><a href="https://juejin.im/post/5a90de68f265da4e9b592b40" target="_blank" rel="noopener">iOS多线程：『GCD』详尽总结</a></p>
<h5 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h5><p><a href="https://www.jianshu.com/p/8ccf51bdbb2f" target="_blank" rel="noopener">OC高级-NSOperation 和 NSOperationQueue</a></p>
<p> <a href="https://www.cnblogs.com/zhanglinfeng/p/4980087.html" target="_blank" rel="noopener">iOS 多线程之NSOperation篇举例详解</a></p>
<h2 id="设计模式-参考"><a href="#设计模式-参考" class="headerlink" title="设计模式  参考"></a>设计模式  <a href="https://github.com/Binlogo/Design-Patterns-In-Swift-CN" target="_blank" rel="noopener">参考</a></h2><h2 id="性能优化-参考"><a href="#性能优化-参考" class="headerlink" title="性能优化 参考"></a>性能优化 <a href="https://www.jianshu.com/p/b8346c1a4145" target="_blank" rel="noopener">参考</a></h2><h2 id="本地持久化方案"><a href="#本地持久化方案" class="headerlink" title="本地持久化方案"></a>本地持久化方案</h2><h5 id="本地数据库sqlite3-0-FMDB"><a href="#本地数据库sqlite3-0-FMDB" class="headerlink" title="本地数据库sqlite3.0+FMDB"></a>本地数据库sqlite3.0+FMDB</h5><ul>
<li><a href="https://www.cnblogs.com/guohai-stronger/p/9251131.html" target="_blank" rel="noopener">SQLite与FMDB的使用</a></li>
</ul>
<h5 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h5><details>
<summary> 查看归档相关代码 show the code </summary>
<pre> <code class="objectivec">
#import &ltFoundation/Foundation.h&gt
#import "YYModel.h"<br>
@interface Person : NSObject&ltNSCoding, NSCopying&gt
@property (nonatomic,copy) NSString *name;
@property (nonatomic,copy) NSString *age;
@end<br><br>#import "Person.h"
@implementation Person
//重写以下几个方法 
- (void)encodeWithCoder:(NSCoder*)aCoder {
    [self yy_modelEncodeWithCoder:aCoder];
}
- (id)initWithCoder:(NSCoder*)aDecoder
{
    self = [super init];
    return [self yy_modelInitWithCoder:aDecoder];
}
- (id)copyWithZone:(NSZone*)zone {
    return [self yy_modelCopy];
}
- (NSUInteger)hash {
    return [self yy_modelHash];
}
- (BOOL)isEqual:(id)object {
    return [self yy_modelIsEqual:object];
}
@end<br><br>#import &ltUIKit/UIKit.h&gt<br>
@interface ViewController : UIViewController
@end<br><br>#import "ViewController.h"
#import "Person.h"
<br>#define KDocumentPath [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES) lastObject]<br><br>#define kPersonInfoPath [KDocumentPath stringByAppendingPathComponent:@"personInfo.archiver"]
<br>@interface ViewController ()<br>
@end
<br>
@implementation ViewController
- (void)viewDidLoad {
    [super viewDidLoad];
<br>
//先存档  然后屏蔽这段代码  看看是否归档到了本地
//    NSMutableArray *dataArray =[NSMutableArray array];
//
//    for (NSInteger i = 10; i &lt 20 ; i++) {
//        Person * p =[Person new];
//        p.name = [NSString stringWithFormat:@"name==-%ld",i];
//        p.age = [NSString stringWithFormat:@"+++%ld岁",i];
//        [dataArray addObject:p];
//    }
//
//    BOOL ret =  [NSKeyedArchiver archiveRootObject:dataArray toFile:kPersonInfoPath];
//
//    if (ret) {
//        NSLog(@"归档成功");
//    }else{
//        NSLog(@"归档失败");
//    }
    NSArray *arr =[NSKeyedUnarchiver unarchiveObjectWithFile:kPersonInfoPath];
    for (Person *p in arr) {
        NSLog(@"名字%@,年龄%@", p.name,p.age);
    }
}
@end
</code>
</pre>
</details>
-------

<h5 id="keychain"><a href="#keychain" class="headerlink" title="keychain"></a>keychain</h5><p>这个需要绑定唯一标识,不会因为应用卸载而消除,可以重置系统或者手动删除</p>
<h5 id="写文件到沙盒"><a href="#写文件到沙盒" class="headerlink" title="写文件到沙盒"></a>写文件到沙盒</h5><ul>
<li>Document目录,一般持久化的数据都存储在这个目录,iCloud会自动备份Document中的所有文件,一般重要的文件存储在这里</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *documentPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>,<span class="built_in">NSUserDomainMask</span>,<span class="literal">YES</span>).firstObject;</span><br></pre></td></tr></table></figure>

<ul>
<li>tmp临时目录,临时文件夹里面的文件，由系统回收， 如磁盘内存不足，重启手机，应用进程杀掉，都会清除临时文件,系统自动管理该目录的文件</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *tmpDir = <span class="built_in">NSTemporaryDirectory</span>();</span><br></pre></td></tr></table></figure>



<ul>
<li><p>Library 存储默认设置或者一些状态信息</p>
<ul>
<li>Library/Caches 缓存目录,iCloud不会备份,系统不会自动清除,需要写代码去清除 </li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *cacheDir =[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastobject];</span><br></pre></td></tr></table></figure>

<ul>
<li>Library/Preferences 存储偏好设置 NSUserDefaults</li>
</ul>
</li>
</ul>
<h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><ul>
<li>黑魔法方法交换实现</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例方法交换</span></span><br><span class="line">+ (<span class="keyword">void</span>)wgb_swizzleInstanceMethodWithClass:(Class)originClass</span><br><span class="line">                          OriginMethod:(SEL)originMethod</span><br><span class="line">                         swappedMethod:(SEL)swappedMethod &#123;</span><br><span class="line">    </span><br><span class="line">    SEL originalSelector = originMethod;</span><br><span class="line">    SEL swappedSelector = swappedMethod;</span><br><span class="line">    </span><br><span class="line">    Method originalMethod = class_getInstanceMethod(originClass, originalSelector);</span><br><span class="line">    Method newMethod = class_getInstanceMethod(originClass, swappedSelector);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">BOOL</span> didAddMethod = class_addMethod(originClass, originalSelector, method_getImplementation(newMethod), method_getTypeEncoding(newMethod));</span><br><span class="line">    <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">        class_replaceMethod(originClass, swappedSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        method_exchangeImplementations(originalMethod, newMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类方法交换</span></span><br><span class="line">+ (<span class="keyword">void</span>)wgb_swizzleClassMethodWithClass:(Class)originClass</span><br><span class="line">                       OriginMethod:(SEL)originMethod</span><br><span class="line">                      swappedMethod:(SEL)swappedMethod &#123;</span><br><span class="line">    SEL originalSelector = originMethod;</span><br><span class="line">    SEL swappedSelector = swappedMethod;</span><br><span class="line">    </span><br><span class="line">    Method originalMethod = class_getClassMethod(originClass, originalSelector);</span><br><span class="line">    Method newMethod = class_getClassMethod(originClass, swappedSelector);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">BOOL</span> didAddMethod = class_addMethod(originClass, originalSelector, method_getImplementation(newMethod), method_getTypeEncoding(newMethod));</span><br><span class="line">    <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">        class_replaceMethod(originClass, swappedSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        method_exchangeImplementations(originalMethod, newMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>category中生成关联对象</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">NSInteger</span> totalScore; </span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)setTotalScore:(<span class="built_in">NSInteger</span>)totalScore&#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(totalScore), @(totalScore), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSInteger</span>)totalScore&#123;</span><br><span class="line">    <span class="keyword">id</span> value = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">    <span class="keyword">return</span> [value integerValue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>字典转模型</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithDict:(<span class="built_in">NSDictionary</span> *)dict &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">self</span> init]) &#123;</span><br><span class="line">        <span class="comment">//(1)获取类的属性及属性对应的类型</span></span><br><span class="line">        <span class="built_in">NSMutableArray</span> * keys = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        <span class="built_in">NSMutableArray</span> * attributes = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 例子</span></span><br><span class="line"><span class="comment">         * name = value3 attribute = T@"NSString",C,N,V_value3</span></span><br><span class="line"><span class="comment">         * name = value4 attribute = T^i,N,V_value4</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">        objc_property_t * properties = class_copyPropertyList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;outCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class="line">            objc_property_t property = properties[i];</span><br><span class="line">            <span class="comment">//通过property_getName函数获得属性的名字</span></span><br><span class="line">            <span class="built_in">NSString</span> * propertyName = [<span class="built_in">NSString</span> stringWithCString:property_getName(property) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">            [keys addObject:propertyName];</span><br><span class="line">            <span class="comment">//通过property_getAttributes函数可以获得属性的名字和@encode编码</span></span><br><span class="line">            <span class="built_in">NSString</span> * propertyAttribute = [<span class="built_in">NSString</span> stringWithCString:property_getAttributes(property) encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">            [attributes addObject:propertyAttribute];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//立即释放properties指向的内存</span></span><br><span class="line">        free(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2)根据类型给属性赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> * key <span class="keyword">in</span> keys) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([dict valueForKey:key] == <span class="literal">nil</span>) <span class="keyword">continue</span>;</span><br><span class="line">            [<span class="keyword">self</span> setValue:[dict valueForKey:key] forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消息动态转发</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)safePerformAction:(SEL)action target:(<span class="built_in">NSObject</span> *)target params:(<span class="built_in">NSDictionary</span> *)params</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMethodSignature</span>* methodSig = [target methodSignatureForSelector:action];</span><br><span class="line">    <span class="keyword">if</span>(methodSig == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* retType = [methodSig methodReturnType];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="keyword">void</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="built_in">NSInteger</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        <span class="built_in">NSInteger</span> result = <span class="number">0</span>;</span><br><span class="line">        [invocation getReturnValue:&amp;result];</span><br><span class="line">        <span class="keyword">return</span> @(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="built_in">BOOL</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        <span class="built_in">BOOL</span> result = <span class="number">0</span>;</span><br><span class="line">        [invocation getReturnValue:&amp;result];</span><br><span class="line">        <span class="keyword">return</span> @(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="built_in">CGFloat</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        <span class="built_in">CGFloat</span> result = <span class="number">0</span>;</span><br><span class="line">        [invocation getReturnValue:&amp;result];</span><br><span class="line">        <span class="keyword">return</span> @(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="built_in">NSUInteger</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        <span class="built_in">NSUInteger</span> result = <span class="number">0</span>;</span><br><span class="line">        [invocation getReturnValue:&amp;result];</span><br><span class="line">        <span class="keyword">return</span> @(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></span><br><span class="line">    <span class="keyword">return</span> [target performSelector:action withObject:params];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现<code>NSCoding</code>自动归档和解档</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">        Ivar * ivars = class_copyIvarList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;outCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class="line">            Ivar ivar = ivars[i];</span><br><span class="line">            <span class="built_in">NSString</span> * key = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">            [<span class="keyword">self</span> setValue:[aDecoder decodeObjectForKey:key] forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">    Ivar * ivars = class_copyIvarList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i ++) &#123;</span><br><span class="line">        Ivar ivar = ivars[i];</span><br><span class="line">        <span class="built_in">NSString</span> * key = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">        [aCoder encodeObject:[<span class="keyword">self</span> valueForKey:key] forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Runloop"><a href="#Runloop" class="headerlink" title="Runloop"></a>Runloop</h2><p><a href="https://github.com/qiaoyoung/RunLoop" target="_blank" rel="noopener">参考一</a></p>
<p><a href="https://github.com/diwu/RunLoopWorkDistribution" target="_blank" rel="noopener">参考二</a></p>
<p><a href="https://www.jianshu.com/p/413811babe1e" target="_blank" rel="noopener">iOS RunLoop</a></p>
<h2 id="音视频处理"><a href="#音视频处理" class="headerlink" title="音视频处理"></a>音视频处理</h2><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><h5 id=""><a href="#" class="headerlink" title=""></a></h5><ul>
<li><p><a href="https://www.jianshu.com/p/3e0a399380df" target="_blank" rel="noopener">iOS音频掌柜– AVAudioSession</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/c1195f90f081" target="_blank" rel="noopener">AVAudioSession管理需要注意的问题</a></p>
</li>
</ul>
<h5 id="录制"><a href="#录制" class="headerlink" title="录制"></a>录制</h5><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)setupRecorder&#123;</span><br><span class="line">    <span class="comment">//设置音频会话</span></span><br><span class="line">    <span class="built_in">NSError</span> *sessionError;</span><br><span class="line">    [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryRecord</span> error:&amp;sessionError];</span><br><span class="line">    <span class="keyword">if</span> (sessionError)&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Error creating session: %@"</span>,[sessionError description]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        [[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> error:&amp;sessionError];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//录音设置</span></span><br><span class="line">    <span class="comment">//创建录音文件保存路径</span></span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="keyword">self</span> getSavePath];</span><br><span class="line">    <span class="comment">//创建录音机</span></span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    _audioRecorder = [[<span class="built_in">AVAudioRecorder</span> alloc] initWithURL:url settings:<span class="keyword">self</span>.setting error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"创建录音机对象时发生错误，错误信息：%@"</span>,error.localizedDescription);</span><br><span class="line">    &#125;</span><br><span class="line">    _audioRecorder.delegate = <span class="keyword">self</span>;</span><br><span class="line">    _audioRecorder.meteringEnabled = <span class="literal">YES</span>;<span class="comment">//如果要监控声波则必须设置为YES</span></span><br><span class="line">    [_audioRecorder prepareToRecord];</span><br><span class="line">    <span class="keyword">if</span> (![_audioRecorder isRecording]) &#123;</span><br><span class="line">        [_audioRecorder record];<span class="comment">//首次使用应用时如果调用record方法会询问用户是否允许使用麦克风</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// !!!: 录音设置</span></span><br><span class="line">-(<span class="built_in">NSDictionary</span> *)setting&#123;</span><br><span class="line">    <span class="keyword">if</span> (_setting==<span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="built_in">NSMutableDictionary</span> *setting = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        <span class="comment">//录音格式</span></span><br><span class="line">        [setting setObject:@(kAudioFormatLinearPCM) forKey:<span class="built_in">AVFormatIDKey</span>];</span><br><span class="line">        <span class="comment">//采样率，8000/11025/22050/44100/96000（影响音频的质量）,8000是电话采样率</span></span><br><span class="line">        [setting setObject:@(<span class="number">22050</span>) forKey:<span class="built_in">AVSampleRateKey</span>];</span><br><span class="line">        <span class="comment">//通道 , 1/2</span></span><br><span class="line">        [setting setObject:@(<span class="number">2</span>) forKey:<span class="built_in">AVNumberOfChannelsKey</span>];</span><br><span class="line">        <span class="comment">//采样点位数，分为8、16、24、32, 默认16</span></span><br><span class="line">        [setting setObject:@(<span class="number">16</span>) forKey:<span class="built_in">AVLinearPCMBitDepthKey</span>];</span><br><span class="line">        <span class="comment">//是否使用浮点数采样</span></span><br><span class="line">        [setting setObject:@(<span class="literal">YES</span>) forKey:<span class="built_in">AVLinearPCMIsFloatKey</span>];</span><br><span class="line">        <span class="comment">// 录音质量</span></span><br><span class="line">        [setting setObject:@(<span class="built_in">AVAudioQualityHigh</span>) forKey:<span class="built_in">AVEncoderAudioQualityKey</span>];</span><br><span class="line">        <span class="comment">//....其他设置等</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _setting;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认录制是PCM格式的 也可直接设置录制aac格式</span></span><br><span class="line">let recordSettings:[String : AnyObject] = [</span><br><span class="line">            <span class="built_in">AVFormatIDKey</span>:             <span class="built_in">NSNumber</span>(value: kAudioFormatMPEG4AAC),</span><br><span class="line">            <span class="built_in">AVEncoderAudioQualityKey</span> : <span class="built_in">NSNumber</span>(value:<span class="built_in">AVAudioQuality</span>.max.rawValue),</span><br><span class="line">            <span class="built_in">AVNumberOfChannelsKey</span>:     <span class="built_in">NSNumber</span>(value:<span class="number">2</span>),</span><br><span class="line">            <span class="built_in">AVSampleRateKey</span> :          <span class="built_in">NSNumber</span>(value:<span class="number">11025.0</span>),</span><br><span class="line">            <span class="comment">//AVEncoderBitRateKey:       NSNumber(value:64000),</span></span><br><span class="line">            <span class="built_in">AVLinearPCMBitDepthKey</span>:    <span class="built_in">NSNumber</span>(value:<span class="number">16</span>)</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure>

<h5 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h5><ul>
<li>AudioServicesCreateSystemSoundID(url,soundId)  用于播放音效 </li>
<li>AVPlayer  本地/远程的音视频均可播放</li>
<li>AVAudioPlayer 只支持播放本地音频文件</li>
<li>AudioToolbox中的Audio Queue Services</li>
</ul>
<h5 id="转格式"><a href="#转格式" class="headerlink" title="转格式"></a>转格式</h5><ul>
<li>wav <a href="https://www.jianshu.com/p/5a91edee4871" target="_blank" rel="noopener">参考WAV文件格式</a></li>
<li>aac 体积小,音质尚可,手机语音音频传输用得多 可直接录制 <a href="https://www.jianshu.com/p/5b12022cdc88" target="_blank" rel="noopener">iOS下解码AAC并播放</a></li>
<li>mp3 早期音乐音频格式 <a href="https://www.jianshu.com/p/45a520d6b05e" target="_blank" rel="noopener">wav转mp3</a></li>
<li>amr 安卓的比aac体积还小的音频格式 <a href="https://github.com/WangGuibin/AmrToWav" target="_blank" rel="noopener">amr和wav互转</a></li>
</ul>
<p><a href="https://github.com/qq631192328/PFAudioLib" target="_blank" rel="noopener">iOS的音频文件的格式转换</a></p>
<p><a href="https://www.jianshu.com/p/a3de5e777692" target="_blank" rel="noopener">Mac终端音频格式转换</a></p>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h5 id="录制-1"><a href="#录制-1" class="headerlink" title="录制"></a>录制</h5><ul>
<li>通过系统相机的录制</li>
<li>基于<code>AVFoundation</code>自定义相机</li>
<li>第三方GPUImage自定义相机</li>
</ul>
<h5 id="播放-1"><a href="#播放-1" class="headerlink" title="播放"></a>播放</h5><ul>
<li>AVPlayer 需要自定义UI</li>
<li>AVPlayerViewController 封装好的拿来即用</li>
</ul>
<h5 id="转格式-1"><a href="#转格式-1" class="headerlink" title="转格式"></a>转格式</h5><p>录制格式为mov需要转成mp4</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)convertAvcompositionToAvasset:(<span class="built_in">AVURLAsset</span> *)composition presentName:(<span class="built_in">NSString</span> *)presentName completion:(<span class="keyword">void</span> (^)(<span class="built_in">AVAsset</span> * _Nonnull, <span class="built_in">NSURL</span> * _Nonnull))completion &#123;</span><br><span class="line">    <span class="comment">// 导出视频</span></span><br><span class="line">    <span class="built_in">AVAssetExportSession</span> *exporter = [<span class="built_in">AVAssetExportSession</span> exportSessionWithAsset:composition presetName:presentName];</span><br><span class="line">    <span class="comment">// 生成一个文件路径</span></span><br><span class="line">    <span class="built_in">NSInteger</span> randNumber = arc4random();</span><br><span class="line">    <span class="built_in">NSString</span> *exportPath = [[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject] stringByAppendingString:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"/%ldvideo.mp4"</span>, (<span class="keyword">long</span>)randNumber]];</span><br><span class="line">    <span class="built_in">NSURL</span> *exportURL = [<span class="built_in">NSURL</span> fileURLWithPath:exportPath];</span><br><span class="line">    <span class="comment">// 导出</span></span><br><span class="line">    <span class="keyword">if</span> (exporter) &#123;</span><br><span class="line">        exporter.outputURL = exportURL;  <span class="comment">// 设置路径</span></span><br><span class="line">        exporter.outputFileType = <span class="built_in">AVFileTypeMPEG4</span>;</span><br><span class="line">        exporter.shouldOptimizeForNetworkUse = <span class="literal">YES</span>;</span><br><span class="line">        [exporter exportAsynchronouslyWithCompletionHandler:^&#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">AVAssetExportSessionStatusCompleted</span> == exporter.status) &#123;   <span class="comment">// 导出完成</span></span><br><span class="line">                    <span class="built_in">NSURL</span> *URL = exporter.outputURL;</span><br><span class="line">                    <span class="built_in">AVAsset</span> *avAsset = [<span class="built_in">AVAsset</span> assetWithURL:URL];                    </span><br><span class="line">                    <span class="keyword">if</span> (completion) &#123;</span><br><span class="line">                        completion(avAsset, URL);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (completion) &#123;</span><br><span class="line">                        completion(<span class="literal">nil</span>, <span class="literal">nil</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            <span class="keyword">if</span> (completion) &#123;</span><br><span class="line">                completion(<span class="literal">nil</span>, <span class="literal">nil</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="存储到相册"><a href="#存储到相册" class="headerlink" title="存储到相册"></a>存储到相册</h5><p><code>和保存图片到相册类似的C接口</code></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Adds a video to the saved photos album. The optional completionSelector should have the form:</span></span><br><span class="line"><span class="comment">//  - (void)video:(NSString *)videoPath didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo;</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="keyword">void</span> <span class="built_in">UISaveVideoAtPathToSavedPhotosAlbum</span>(<span class="built_in">NSString</span> *videoPath, __<span class="keyword">nullable</span> <span class="keyword">id</span> completionTarget, __<span class="keyword">nullable</span> SEL completionSelector, <span class="keyword">void</span> * __<span class="keyword">nullable</span> contextInfo) API_AVAILABLE(ios(<span class="number">3.1</span>)) API_UNAVAILABLE(tvos);</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>学习总结</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
